---------- locale/ru.lua ----------

return {
----------
language = 'Русский',
authors  = [[Станистав Михель]],
---------- dialog ----------
Dialog = {
["cmd_trace"]              = [[Профилирование функции.]],
["cmd_ls"]                 = [[Отобразить список блоков.]],
["cmd_help"]               = [[Показать эту справку.]],
["cmd_o"]                  = [[Открыть note-файл.]],
["intro"]                  = [[-------- help([функция]) = справка --------------
---------- use([модуль]) = импорт функций -------
----------------- quit() = выход ----------------
]],
["done"]                   = [[Выполнено.]],
["cmd_q"]                  = [[Выйти.]],
["cmd_show"]               = [[Отобразить следующий или заданный блок.]],
["cmd_N"]                  = [[Выполнить блок N.]],
["cmd_time"]               = [[Оценка времени работы функции.]],
["cmd_rm"]                 = [[Очистить список блоков.]],
--["cmd_shell"]              = [[Execute command in shell]],
["cmd_log"]                = [[Включить/выключить запись лога.]],
},
---------- asciiplot.lua ----------
asciiplot = {
[":concat(F1, F2) --> str"] = [[Горизонтальное объединение графиков равного размера. Эквивалентно '..' .]],
["__module__"]             = [[Визуализация данных с помощью псевдо-графики.]],
["F:axes() --> tbl"]       = [[Получить информацию по каждой оси в виде таблицы {'size','log','range','view','fix'}.]],
["Plot(...)"]              = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
["F:addString(row_N, col_N, str)"] = [[Добавление строки в указанную позицию.]],
["F:setY(par_t)"]          = [[Настройки оси Y. Установить 'range' ({a,b}), 'view' ('min'/'mid'/'max'/false), 'log'-арифм (true/false), 'fix'-ировать диапазон (true/false), 'size'.]],
["F:addPose(row_N, col_N, char_s='*')"] = [[Установка символа в указанную позицию.]],
["F:scale(factor_d | src_F)"] = [[Изменить размер графика относительно начальных размеров.]],
["F:addPoint(x_d, y_d, char_s='*')"] = [[Отметить точку с координатами (x,y) с помощью символа.]],
["F:setX(par_t)"]          = [[Настройки оси X. Установить 'range' ({a,b}), 'view' ('min'/'mid'/'max'/false), 'log'-арифм (true/false), 'fix'-ировать диапазон (true/false), 'size'.]],
["F:title(str)"]           = [[Установить название графика.]],
["F:reset()"]              = [[Очистка холста.]],
[" (width_N=73, height_N=21) --> new_F"] = [[Новый график.]],
["F:bar(t, y_N=2, x_N=1)"] = [[Столбчатая диаграмма.]],
["F:tplot(data_t, cols_t={x=1, polar=false})"] = [[Построение графика на основе таблицы, можно указать номера столбцов и дополнительные опции.]],
["F:plot(...)"]            = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
["F:legend(str_t)"]        = [[Настроить подписи.]],
["F:contour(fn, {level=5, view='XY'}) --> nil|str"] = [[Проекция контуров функции fn(x,y). Проекции: XY, XZ, YZ, concat.]],
["F:setZ(par_t)"]          = [[Настройки оси Z. Установить 'range' ({a,b}), 'view' ('min'/'mid'/'max'/false), 'log'-арифм (true/false), 'fix'-ировать диапазон (true/false), 'size'.]],
["F:copy() --> cpy_F"]     = [[Возвращает копию объекта.]],
},
---------- bigint.lua ----------
bigint = {
["B:sign() --> int"]       = [[Возвращает +1/-1.]],
["__module__"]             = [[Вычисления с целыми числами произвольной длины.]],
["B:F() --> B!"]           = [[Возвращает факториал положительного числа.]],
["B:random() --> rand_B"]  = [[Псевдо-случайное число от 0 до B.]],
["B:FF() --> B!!"]         = [[Возвращает двойной факториал.]],
[":ratF(num_B, denom_B) --> num!/denom!"] = [[Вычисляет отношение факториалов num!/denom!.]],
[":gcd(...) --> B"]        = [[Наибольший общий делитель.]],
["B:factorize() --> prime_t"] = [[Возвращает список простых множителей для данного числа.]],
["B:subF() --> !B"]        = [[Возвращает субфакториал.]],
["B:isPrime(method_s=nil) --> bool"] = [[Проверка числа на простоту. Установите метод 'Fermat' для использования малой теоремы Ферма.]],
["B:abs() --> abs_B"]      = [[Возвращает модуль числа.]],
["B:float() --> num"]      = [[Представление в виде числа с плавающей точкой.]],
[":C(n, k, isRepeat=false) --> combinations_B"] = [[Возвращает число компинаций из n по k, с повторениями и без.]],
[":lcm(...) --> B"]        = [[Наименьшее общее кратное.]],
["B:digits(N=10) --> tbl"] = [[Возвращает цифры числа для заданной системы счисления.]],
[":P(n, k, isRepeat=false) --> permutaions_B"] = [[Возвращает число перестановок без повторов.]],
[" (num|str|tbl) --> new_B"] = [[Создаёт большое целое число на основе числа, строки или таблицы.]],
},
---------- complex.lua ----------
complex = {
["C:tanh() --> y_C"]       = [[Комплексный гиперболический тангенс.]],
["C:re() --> var"]         = [[Действительная часть.]],
[":i(x=1) --> new_C"]      = [[Возвращает комплексное число x*i.]],
["C:cos() --> y_C"]        = [[Комплексный обратный косинус.]],
["C:asin() --> y_C"]       = [[Комплексный обратный синус.]],
["C:atanh() --> y_C"]      = [[Комплексный обратный гиперболический тангенс.]],
["C:log() --> y_C"]        = [[Комплексный логарифм.]],
["C:asinh() --> y_C"]      = [[Комплексный обратный гиперболический синус.]],
["C:exp() --> y_C"]        = [[Комплексная экспонента.]],
["C:arg() --> float"]      = [[Возвращает агрумент комплексного числа.]],
[" (re=0, im=0) --> new_C"] = [[Создать новое комплексное число.]],
[":cis(phy) --> cos(phy)+i*sin(phy)"] = [[Комплексное число exp(i*phy).]],
["C:tan() --> y_C"]        = [[Комплексный обратный тангенс.]],
["C:acos() --> y_C"]       = [[Комплексный обратный косинус.]],
["C:sqrt() --> y_C"]       = [[Комплексный квадратный корень.]],
["C:sinh() --> y_C"]       = [[Комплексный гиперболический синус.]],
["C:sin() --> y_C"]        = [[Комплексный синус.]],
["C:im() --> var"]         = [[Мнимая часть.]],
["C:acosh() --> y_C"]      = [[Комплексный обратный гиперболический косинус.]],
["C:atan() --> y_C"]       = [[Комплексный обратный тангенс.]],
["C:abs() --> float"]      = [[Модуль комплексного числа.]],
["C:conj() --> conj_C"]    = [[Комплексно-сопряженное число. Эквивалентно ~C.]],
["C:cosh() --> y_C"]       = [[Комплексный гиперболический косинус.]],
["__module__"]             = [[Вычисления с комплексными числами.]],
},
---------- const.lua ----------
const = {
[".phy.e --> 1.6E-19"]     = [[Заряд электрона.]],
["__module__"]             = [[Разнообразные константы.]],
[".phy.NA --> 6E23"]       = [[Число Авогадро.]],
[".math.phi --> 1.62"]     = [[Золотое сечение.]],
[".astro.pc --> 3.1E16"]   = [[Один парсек.]],
[".astro.ly --> 9.5E15"]   = [[Световой год.]],
[".phy.Rinf --> 1.1E7"]    = [[Постоянная Ридберга.]],
[".phy.Vm --> 2.2E-2"]     = [[Объём моля идеального газа.]],
[".phy.g --> 9.81"]        = [[Ускорение свободного падения.]],
[".astro.au --> 1.5E11"]   = [[Астрономическая единица.]],
[".phy.G --> 6.7E-11"]     = [[Гравитационная постоянная.]],
[":add(name_s, value, units_s=nil)"] = [[Добавление временной константы.]],
[".phy.k --> 1.4E-23"]     = [[Постоянная Больцмана.]],
[":remove(name_s) --> bool"] = [[Удаление константы.]],
[".math.e --> 2.72"]       = [[Основание натурального логарифма.]],
[".phy.c --> 3E8"]         = [[Скорость света.]],
[".phy.h --> 6.6E-34"]     = [[Постоянная Планка.]],
[".phy.sigma --> 5.6E-8"]  = [[Постоянная Стефана-Больцмана.]],
[".phi.Da --> 1.7E-27"]    = [[Атомная единица массы.]],
[".phy.mu0 --> 1.2E-6"]    = [[Магнитная постоянная.]],
[".phy.R --> 8.31"]        = [[Универсальная газовая постоянная.]],
[".phy.eps0 --> 8.8E-12"]  = [[Электрическая постоянная.]],
[".math.gamma --> 0.577"]  = [[Постоянная Эйлера-Маскерони.]],
[".astro.k --> 0.017"]     = [[Гравитационная постоянная Гаусса.]],
},
---------- data.lua ----------
data = {
[":filter(in_t, fn|str|tbl) --> out_t"] = [[Фильтрует список данных. Условием является булева функция, строка или массив весов.]],
[":mean(data_t, wight_t=nil) --> num"] = [[Вычисляет среднее значение.]],
["__module__"]             = [[Обработка данных и статистические расчёты.]],
[":std(data_t, weight_t=nil) --> num"] = [[Возвращает стандартное отклонение и дисперсию.]],
[":isNot(data_t, fn|str) --> weigh_t"] = [[Возвращает инвертированные веса для булевой функции.]],
[":freq(data_t) --> tbl"]  = [[Возвращает таблицу частот элементов.]],
[":histcounts(data_t, rng_v=10) --> sum_t, edges_t"] = [[Распределение данных по интервалам. Можно указать число интервалов разбиения, либо задать границы в виде таблицы.]],
[":reduce(fn|str, data_t, initial=nil) --> var"] = [[Итеративное применение функции к элементам списка и предыдущему результату.]],
[":csvread(file_s, delim_s=',') --> tbl"] = [[Формирует таблицу на основе файла с заданным разделителем.]],
[":max(data_t) --> var, ind_N"] = [[Максимальный элемент и его индекс.]],
[":sum(data_t) --> var"]   = [[Возвращает сумму элементов.]],
[":zip(fn|str, ...) --> tbl"] = [[Последовательно применяет функцию к списку векторов.]],
[":harmmean(data_t, weigh_t=nil) --> num"] = [[Гармоническое среднее.]],
[":moment(order_N, data_t, weigth_t=nil) --> num"] = [[Центральный момент порядка N (с заданными весами).]],
[":T(src_t) --> new_T"]    = [[Возвращает указатель на 'транспонированную' таблицу.]],
[":csvwrite(file_s, data_t, delim_s=',')"] = [[Сохраняет таблицу в файл с заданным разделителем.]],
[":range(begin_d, end_d, step_d=±1) --> new_R"] = [[Генерация диапазона чисел.]],
[":cov(data_t) --> cov_M"] = [[Возвращает матрицу ковариации для списка векторов.]],
[":ref(src_t, begin_N=1, end_N=#src_t) --> new_R"] = [[Возвращает "ссылку" на таблицу элементов.]],
[":Fn(expr_s, arg_N=2) --> fn"] = [[Генерирует функцию из строки с параметрами x1, x2 и т.д.]],
[":md(data_t, names_t=nil, row_fn=nil) --> str"] = [[Печать таблицы в стиле Markdown. Строки могут быть обработаны функцией row_fn(t)-->t.]],
[":median(data_t) --> num"] = [[Возвращает медиану распределения.]],
[":geomean(data_t, weigh_t=nil) --> num"] = [[Геометрическое среднее.]],
[":min(data_t) --> var, ind_N"] = [[Возвращает наименьший элемент и его индекс.]],
[":cov2(xs_t, ys_t) --> float"] = [[Вычисляет ковариацию для двух списков.]],
[":is(data_t, fn|str) --> weigh_t"] = [[Возвращает массив весов на основе булевой функции или строки.]],
[":copy(t) --> copy_t"]    = [[Глубокое копирование списка.]],
},
---------- geodesy.lua ----------
geodesy = {
["E:solveInv(blh1_t, blh2_t) --> dist_d, az1_d, az2_d"] = [[Решение обратной задачи геодеции, поиск расстояния и азимутов для двух заданных точек.]],
[":grav(latitude_d) --> acceleration"] = [[Международная формула гравитации, аргумент в градусах.]],
[":hashEncode(coord_t, letter_N=6) --> hash_s"] = [[Вычисления геохэша для точки.]],
["__module__"]             = [[Преобразования координат и другие геодезические задачи.]],
["E:toBLH(xyz_t) --> blh_t"] = [[Приобразовать геоцентрические координаты в геодезические.]],
[":deg2dms(deg_d) --> deg, min, sec"] = [[Возвращает градусы, минуты и секунды для заданного угла в градусах.]],
["E.xyzInto[E2] --> fn"]   = [[Возвращает функцию для преобразования геоцентрических координат из системы E в E2.]],
["E.blhInto[E2] --> fn"]   = [[Возвращает функцию для преобразования геодезических координат из E в E2 с помощью метода Молоденского.]],
["E:toXYZ(blh_t) --> xyz_t"] = [[Преобразует геодезические координаты в геоцентрические.]],
["E:solveDir(blh_t, az1_d, dist_d) --> blh_t, az2_d"] = [[Решение прямой задачи геодезии, поиск положения и азимута второй точки при заданных начальной точке, направлении и расстоянии.]],
[":hashDecode(hash_s) --> coord_t, range_t"] = [[Определения положения зоны по геохэшу.]],
[" (param_t=nil) --> E"]   = [[Новый эллипсоид с заданными параметрами {'a', 'f'}.]],
[":dms2deg(deg_d, min_d=0, sec_d=0) --> deg"] = [[Преобразует градусы, минуты, секунды в десятичные градусы.]],
["E:into(E2, lin, rot, m)"] = [[Задать правила преобразования эллипсоидов.]],
["E:utm2bl(utm_t) --> blh_t"] = [[Найти геодезические координаты для заданной UTM позиции и зоны.]],
["E:bl2utm(blh_t) --> utm_t"] = [[Найти UTM проекцию для заданных координат.]],
},
---------- gnuplot.lua ----------
gnuplot = {
[":surfplot(x1_t, y1_t, fn1, [nm_s, x2_t, y2_t,..])"] = [[Построение поверхности. 'x' и 'y' - списки чисел, 'fn' - функция двух агрументов, 'nm' - имя поверхности.]],
["G:show()"]               = [[Строит график на основе параметров, представленных в виде таблицы Lua.]],
["__module__"]             = [[Интерфейс для взаимодействия с Gnuplot.]],
["G:add(curve_v)"]         = [[Добавить функцию для построения.]],
[":polarplot(x1_t, y1_t, [nm_s, x2_t, y2_t,..])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
[":tpolar(var, [x_N, y1_N, y2_N,..])"] = [[График в полярных координатах для таблицы, матрицы или файла. Опциональные элементы определяют стоблцы.]],
[" () --> new_G"]          = [[Подготовка таблицы для Gnuplot.]],
[":tplot(var, [x_N, y1_N, y2_N,..])"] = [[Построение графика на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
[".keys"]                  = [[  Описание параметров:
{math.sin, title='sin'}                      -- строит график для Lua функции, добавляет текст в легенду
{'sin.dat', ln=1, lw=2}                      -- строит график для файла с учётом цвета и толщины маркеров
{tbl, with='lines'}                          -- строит график для Lua таблицы с помощью линий
title='Graph name'                           -- имя графика в целом
xrange={0,10}                                -- диапазон x от 0 до 10
yrange={-2,2}                                -- диапазон y
zrange={0,5}                                 -- диапазон z
trange={1,2}                                 -- изменение параметра в случае параметрической функции
xtitle='A', ytitle='B'                       -- имена осей
terminal='jpeg'                              -- сохранение результата в файл
output='my_plot.jpg'                         -- имя файла для вывода результата
parametric=true                              -- параметрическое представление функции
size='square'                                -- установить квадратный размер изображения
polar=true                                   -- график в полярных координатах
grid='polar'                                 -- изменить тип сетки на полярный
legend=false                                 -- отключить легенду
surface=true                                 -- построение трёхмерного графика
samples=200                                  -- задать число точек на графике
raw='set pm3d'                               -- позволяет написать команды Gnuplot в явном виде
]],
[":plot(x1_t, [y1_t, nm_s, x2_t,..])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
[":tsurf(var, [x_N, y_N, z1_N, z2_N,..])"] = [[Построение графика поверхности на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
["G:copy() --> cpy_G"]     = [[Возвращает копию параметров графика.]],
},
---------- graph.lua ----------
graph = {
["__module__"]             = [[Операции с графами.]],
["G:dot(fname_s=nil) --> str"] = [[Возвращает описание структуры в dot формате.]],
["G:addEdges(list_t)"]     = [[Импортирует рёбра и веса из списка.]],
["G:size() --> nodes_N"]   = [[Число узлов графа. Эквивалентно #G.]],
["G:isDirected() --> bool"] = [[True если граф направленный.]],
["G:toSvg(name_s)"]        = [[Сохраняет граф в SVG изображене с помощью Graphviz.]],
["G:remove(n1, n2=nil)"]   = [[Удаляет узел или ребро.]],
["G:nodes() --> node_t"]   = [[Возвращает список узвло графа.]],
["G:isWeighted() --> bool"] = [[True если граф взвешенный.]],
["G:edge(pair_t) --> weight_d|nil"] = [[Возвращает вес ребра.]],
["G:addNodes(list_t)"]     = [[Импортирует узлы из списка.]],
["G:isComplete() --> bool"] = [[True если граф полный.]],
["G:copy() --> cpy_G"]     = [[Создаёт копию графа.]],
["G:edges() --> edges_t"]  = [[Возвращает список рёбер.]],
["G:add(n1, n2=nil, w_d=1)"] = [[Добавляет узел (одиночное имя) или ребро.]],
["G:components() --> G_t"] = [[Список компонентов графа.]],
["G:rand(edge_N)"]         = [[Заполнить граф случайными ребрами.]],
[":concat(G_t) --> new_G"] = [[Объединить несколько графов в один объект.]],
["G:isConnected() --> bool"] = [[True если граф связанный.]],
["G:isTree() --> bool"]    = [[True если это дерево.]],
["G:randp(probability_d)"] = [[Заполнить рёбрами с заданной вероятностью.]],
[" (params_t={}) --> new_G"] = [[Создать граф, используюя параметры {dir=флаг, O|K|C|P=число|names_t, name='n'}.]],
["G:search(node1, node2, method_s) --> path_t|nil"] = [[Поиск пути между двумя узлами. Методы: bfs, dfs, dijkstra.]],
["G:nout(node) --> nodes_t"] = [[Список узлов на выходе.]],
["G:matrix() --> adjacency_M, nodes_t"] = [[Матрица сопряжения и список узлов.]],
["G:has(node) --> bool"]   = [[Проверка принадлежности узла графу.]],
["G:isEuler() --> bool"]   = [[True если содержит цикл Эйлера.]],
["G:nin(node) --> nodes_t"] = [[Список узлов на входе.]],
},
---------- lens.lua ----------
lens = {
["__module__"]             = [[Матричные методы в параксиальной оптике.]],
["L:cardinal(nLft_d=1, nRht_d=1) --> points_t"] = [[Поиск положения кардинальных точек системы относительно входных и выходных плоскостей, с учётом показателей преломления. Возвращает список расстояний.]],
[":solve(fn, index_N, initial_d) --> found_d"] = [[Поиск условий, при которых компонент с заданным индексом равен 0, используется начальное предположение.]],
["L:beam(inCurv_d, inSize_d, lambda_d) --> outCurv_d, outSize_d"] = [[Определение кривизны фронта и радиуса гаусова пуска на выходе из системы.]],
[":thin(focal_d) --> L"]   = [[Возвращает матрицу для тонкой линзы при заданном фокальном расстоянии.]],
["L:inv() --> inv_L"]      = [[Инвертированная матрица системы.]],
[" (A_d, B_d, C_d, D_d) --> new_L"] = [[Новый объект с произвольными параметрами A, B, C, D.]],
["L:copy() --> cpy_L"]     = [[Возвращает копию объекта.]],
["L:transform(yIn_d, VIn_d) --> yOut_d, VOut_d"] = [[Определяет положение луча 'y' и оптический угол 'V' (= v*n) на выходе оптической системы. Эквивалентно вызову L(y,V).]],
[":afocal(magn_d) --> L"]  = [[Возвращает матрицу для афокальной системы.]],
[":R(nin_d, rad_d, nout_d) --> L"] = [[Матрица преломления с учётом радиуса кривизны и показателей преломления на входе и выходе.]],
[":T(dist_d, n_d=1) --> L"] = [[Матрица перемещения для заданного расстояния и показателя преломления.]],
[":M(rad_d, n_d=1) --> L"] = [[Матрица для отражающей поверхности заданного радиуса с учётом показателя преломления среды.]],
[":gSize(waist_d, lambda_d, dist_d) --> curv_d, rad_d"] = [[Размер пучка и радиус кривизны на расстоянии от перетяжки.]],
["L:matrix() --> M"]       = [[Матрица оптической системы.]],
["L:emit(lambda_d) --> outCurv_d, outSize_d|nil, waist_d|nil, shift_d|nil "] = [[Поиск радиуса кривизны фронта на выходе резонатора. 
Для устойчивого резонатора также возвращает радиус пучка на выходе, а также размер и положение перетяжки.]],
[":gParam(waist_d, lambda_d) --> div_d, range_d"] = [[Возвращает угол расходимости и размер ближней зоны гауссова луча.]],
},
---------- main.lua ----------
main = {
["sqrt(x) --> y"]          = [[Квадратный корень.]],
["atan2(y_d, x_d) --> num"] = [[Арктангенс y/x с учётом знака.]],
["sinh(x) --> y"]          = [[Гиперболический синус.]],
["PI --> 3.14"]            = [[Число пи.]],
["atan(x) --> y"]          = [[Арктангенс x.]],
["atanh(x) --> y"]         = [[Гиперболический арктангенс.]],
["tan(x) --> y"]           = [[Тангенс x.]],
["tanh(x) --> y"]          = [[Гиперболический тангенс.]],
["log(x) --> y"]           = [[Натуральный логарифм.]],
["quit()"]                 = [[Выход из программы.]],
["exp(x) --> y"]           = [[Экспонента.]],
["Map(fn, in_t) --> out_t"] = [[Вычисляет функцию для всех элементов списка (таблицы), возвращает новый список.]],
["use([module_s]) --> str|nil"] = [[Используйте use('модуль') или use{'модульA','модульB'} для подключения дополнительных модулей.]],
["asin(x) --> y"]          = [[Арксинус x.]],
["asinh(x) --> y"]         = [[Гиперболический арксинус.]],
["help(fn='main') --> str"] = [[Описание модуля, функции или элемента.]],
["Round(v, decimal_N=0) --> round_v"] = [[Округление числа до заданного количества десятичных знаков или точности.]],
["sin(x) --> y"]           = [[Синус x.]],
["abs(x) --> y"]           = [[Абсолютная величина.]],
["Bind(obj, fn_name) --> fn"] = [[Обёртывание функций для вызова без объекта.]],
["__module__"]             = [[Программа для математических расчётов на Lua.]],
["cosh(x) --> y"]          = [[Гиперболический косинус.]],
["acos(x) --> y"]          = [[Арккосинус x.]],
["acosh(x) --> y"]         = [[Гиперболический арккосинус.]],
["cos(x) --> y"]           = [[Косинус x.]],
["hypot(...)"]             = [[Гипотенуза.]],
},
---------- matrix.lua ----------
matrix = {
["M:det() --> num"]        = [[Определитель матрицы.]],
["__module__"]             = [[Операции с матрицами. На нулевые элементы память не расходуется. Индексация с единицы.]],
["M:pinv() --> inv_M"]     = [[Вовзращает псевдо-обратную матрицу.]],
["M:lu() --> L_M, U_M, perm_M"] = [[LU преобразование матрицы. Возвращает L, U и P.]],
[":V {...} --> mat_Ref"]   = [[Строит вектор из списка чисел.]],
["M:vec() --> vec_Ref|nil"] = [[Создаёт вектор.]],
["M:map(fn) --> found_M"]  = [[Формирует новую матрицу путём применения указанной функции к исходной. Функция может зависеть как от элементов f(x), так и от индексов f(x,row,col).]],
["V:dot(V2) --> num"]      = [[Скалярное произведение векторов.]],
["M:T() --> transpose_Ref"] = [[Транспонирование матрицы.]],
[":hor(mat_t) --> mat_Ref"] = [[Горизонтальная конкатенация списка матриц.]],
["V:cross(V2) --> M"]      = [[Векторное произведение 3-элементных векторов.]],
["M:exp() --> new_M"]      = [[Матричная экспонента.]],
["M:kron(M2) --> M⊗M2"]  = [[Произведение Кронеккера.]],
[":eye(row_N, col_N=row_N) --> M"] = [[Единичная матрица.]],
[":fill(row_N, col_N, val=1) --> M"] = [[Создать матрицу, заполненную заданной величиной.]],
["M:chol() --> lower_M|nil"] = [[Преобразование Холески для положительно определённой симметричной матрицы.]],
["M:H() --> conj_Ref"]     = [[Сопряженная транспонированная матрица.]],
["M:cols() --> N"]         = [[Число столбцов.]],
["M:eig() --> vectors_M, values_M"] = [[Возвращает матрицы из собственных векторов и чисел.]],
["M:rref() --> upd_M"]     = [[Преобразование матрицы методом Гаусса.]],
["M:reshape(row_N=(rows*cols), col_N=1) --> mat_Ref"] = [[Изменить размер матрицы.]],
["M:tr() --> sum"]         = [[След матрицы.]],
["M:vectorize() --> V"]    = [[Преобразование в вектор по столбцам.]],
[":ver(mat_t} --> mat_Ref"] = [[Вертикальная конкатенация списка матриц.]],
[":zeros(row_N, col_N=row_N) --> M"] = [[Формирует матрицу нулей.]],
["M:inv() --> inv_M"]      = [[Обратная матрица.]],
["M:diag() --> V"]         = [[Извлекает диагональные элементы матрицы.]],
[":zip(fn, ...) --> res_M"] = [[Поэлементно применяет функцию к матрицам для формирования новой матрицы.]],
["M:stars(cond_fn) --> str"] = [[Печатает элементы звёздочками когда условие истинно.]],
[":D(list_v, shift_N=0) --> M"] = [[Матрица с заданными диагональными элементами.]],
["M:qr() --> Q_M, R_M"]    = [[QR разложение матрицы. Возвращает Q и R.]],
["M:svd() --> U_M, S_M, V_M"] = [[Сингулярное разложение матрицы, возвращает U, S, V.]],
["V:normalize()"]          = [[Нормализация вектора.]],
["M:rank() --> N"]         = [[Возвращает ранг матрицы.]],
["M:table() --> tbl"]      = [[Преобразует матрицу в обыкновенную Lua таблицу.]],
["M:copy() --> cpy_M"]     = [[Возвращает копию матрицы.]],
["M:minor(row_N, col_N) --> minor_M"] = [[Возвращает минорную матрицу для заданного элемента.]],
["M:kronSum(M2) --> M⊕M2"] = [[Сумма Кронеккера.]],
["M:norm() --> num"]       = [[Евклидова норма.]],
["M:rows() --> N"]         = [[Число строк.]],
[" {row1_t, ...} --> new_M"] = [[Строит матрицу из списка строк.]],
},
---------- numeric.lua ----------
numeric = {
[":lim(fn, xn_d, isPositive=false) --> y"] = [[Оценка предела функции.]],
["__module__"]             = [[Функции для численных расчётов. Все функции работают с точностью, определяемой параметром TOL.]],
[":newton(fn, x0_d) --> num"] = [[Поиск корня методом Ньютона в окрестностях заданной точки.]],
[":der(fn, x_d) --> num"]  = [[Оценка производной функции в точке.]],
[":solve(fn, low_d, up_d) --> num"] = [[Поиск корня уравнения fn(x)=0 на интервале [a,b].]],
[":int(fn, x1_d, x2_d) --> num"] = [[Определённый интеграл. Допустимы бесконечные пределы.]],
[":ode(fn, interval_t, y0, {dt=del/20,exit=nil}) --> ys_t"] = [[Численное решение ОДУ.
Списко параметров опциональный, может включать шаг по времени и условие завершения.
Возвращает список найденных точек в форме {t, x(t)}.]],
},
---------- polynomial.lua ----------
polynomial = {
[":spline(xs_t, ys_t) --> Ps_t"] = [[Интерполяция данных кубическими сплайнами. Возвращает таблицу полиномов.]],
[":taylor(x_d, fx_d, [fx'_d, fx''_d,..]) --> P"] = [[Формирует полином Тейлора в окрестности заданной точки.]],
["__module__"]             = [[Действия над полиномами.]],
["P:val(x) --> y"]         = [[Вычисляет значение полинома в заданной точке. Эквивалентно вызаву P(x).]],
["P:str(char_s='x') --> str"] = [[Более наглядное представление полинома.]],
[":char(M) --> P"]         = [[Возвращает характеристический полином матрицы.]],
[":fit(xs_t, ys_t, order_N) --> P"] = [[Аппроксимация точек полиномом заданной степени.]],
["P:copy() --> cpy_P"]     = [[Возвращает копию полинома.]],
["P:int(x0_d=0) --> int_P"] = [[Первообразная полинома, x0 - свободный коэффициент.]],
[" {.., v1, v0} --> new_P"] = [[Создаёт полином на основе списка коэффициентов.]],
["P:der() --> der_P"]      = [[Первая производная полинома.]],
[":x() --> P"]             = [[Возвращает объект для представления полинома в виде суммы k*x^n]],
["P:roots() --> roots_t"]  = [[Поиск действительных и комплексных корней полинома.]],
[":lagrange(xs_t, ys_t) --> P"] = [[Интерполяция данных полиномом Лагранжа.]],
[":R(roots_t) --> P"]      = [[Строит полином по списку корней.]],
[":lin(xs_t, ys_t, before_d=nil, after_d=before_d) --> Ps_t"] = [[Линейная интерполяция. Возвращает таблицу полиномов.]],
},
---------- quaternion.lua ----------
quaternion = {
[":fromAA(angle_d, axis_t|V) --> Q"] = [[Возвращает кватернион для заданного угла и оси вращения.]],
["__module__"]             = [[Операции над кватернионами.]],
["Q:toRot() --> M"]        = [[Возвращает эквивалентную матрицу вращения.]],
[":fromRot(M) --> Q"]      = [[Строит кватернион на основе угла поворота и оси вращения.]],
["Q:x() --> var"]          = [[Компонента x.]],
["Q:conj() --> conj_Q"]    = [[Сопряжённый кватернион.]],
["Q:inv() --> inv_Q"]      = [[Возвращает крватернион, обратный к данному.]],
[":fromRPY(roll_d, pitch_d, yaw_d) --> Q"] = [[Построить кватернион по углам Эйлера.]],
["Q:w() --> var"]          = [[Действительная часть w.]],
["Q:rotate(in_t|V) --> out_t"] = [[Возвращает вектор, полученный при вращении с помощью заданного кватерниона.]],
["Q:z() --> var"]          = [[Компонента z.]],
["Q:abs() --> num"]        = [[Норма кватерниона.]],
["Q:toRPY() --> roll_d, pitch_d, yaw_d"] = [[Найти углы крен-тангаж-рысканье.]],
["Q:y() --> var"]          = [[Компонента y.]],
["Q:slerp(end_Q, rat_f) --> rat_Q"] = [[Сферическая линейная интерполяция двух кватернионов.]],
["Q:toAA() --> angle_d, axis_t|nil"] = [[Возвращает угол поворота и ось вращения.]],
[" {x, y, z, w} --> new_Q"] = [[Новый кватернион, w - действительная часть, остальные мнимые.]],
["Q:exp() --> exp_Q"]      = [[Экспонента кватерниона.]],
["Q:normalized() --> unit_Q"] = [[Возвращает единичный кватернион.]],
["Q:log() --> log_Q"]      = [[Логарифм кватерниона.]],
},
---------- qubit.lua ----------
qubit = {
["G:fromTable(truth_t) --> upd_G"] = [[Добавить гейт на основе таблицы истинности.]],
["__module__"]             = [[Симуляция квантовых расчётов.]],
["Q:matrix() --> M"]       = [[Эквивалентная матрица гейтов или вектор кубитов.]],
["Q:prob(state_s) --> probatility_d"] = [[Вероятность заданного состояния.]],
["Q:copy() --> cpy_Q"]     = [[Возвращает копию объекта.]],
["G:X([ind1, ind2 ...]) --> upd_G"] = [[Добавить гейт X.]],
["G:CNOT(slave_i, master_i) --> upd_G"] = [[Добавить CNOT гейт.]],
["G:H([ind1, ind2 ...]) --> upd_G"] = [[Добавить гейт Адамара.]],
["G:Z([ind1, ind2 ...]) --> upd_G"] = [[Добавить Z гейт.]],
["G:SWAP(ind1, ind2) --> upd_G"] = [[Добавить гейт для обмена 2х кубитов.]],
["G:Y([ind1, ind2 ...]) --> upd_G"] = [[Добавить Y гейт.]],
["G:T([ind1, ind2 ...]) --> upd_G"] = [[Добавить T гейт.]],
["G:fromMatrix(M) --> upd_G"] = [[Добавить гейт на основе матрицы.]],
["Q:meas(index=nil) --> Q"] = [[Измерить всё состояние или заданный кубит. После измерения система остаётся в найденном состоянии.]],
["G:S([ind1, ind2 ...]) --> upd_G"] = [[Добавить S гейт.]],
[":gates(input_n) --> G"]  = [[Инициализация гейта для заданного числа кубитов.]],
["G:P(phase, [ind1, ind2 ...] --> G"] = [[Добавить гейт для сдвига фазы.]],
["G:isUnitary() --> bool"] = [[Проверка унитарности преобразования.]],
["G:inverse() --> inv_G"]  = [[Возвращает обратное преобразование.]],
["Q:normalize()"]          = [[Нормализовать коэффициенты.]],
[":combine([Q1, Q2, ...]) --> Q|nil"] = [[Объединить кубиты в систему. Эквивалентно Q1..Q2.]],
[" (state_s|num) --> Q"]   = [[Создать систему кубитов.]],
[":fromVector(V) --> Q"]   = [[Создать систему на основе вектора состояний.]],
["G:R(axis_s, angle, [ind1, ind2 ...] --> G"] = [[Гейт вращения для оси 'X', 'Y' или 'Z'.]],
},
---------- random.lua ----------
random = {
["R:logistic(mu_d=0, sigma_d=1) --> float"] = [[Логистическое распределение.]],
["__module__"]             = [[Генераторы случайных чисел.]],
["R:shuffle(tbl)"]         = [[Перемешать элементы списка.]],
["R:int(lower_i=1, upper_i) -> int"] = [[Равномерное распределение целых чисел в заданном диапазоне.]],
["R:cauchy(mu_d=0, sigma_d=1) --> float"] = [[Распределение Коши.]],
["R:exp(lambda_d=1) --> float"] = [[Экспоненциальное распределение.]],
["R:seed(N=os.time) --> R"] = [[Установка начального значения генератора случайных чисел.]],
["R:gamma(alpha_N, beta_d=1) --> float"] = [[Гамма распределение.]],
["R:poisson(lambda_d) --> int"] = [[Распределение Пуассона.]],
[" () --> float"]          = [[Случайное число от 0 до 1.]],
[":new() --> R"]           = [[Новый генератор равномерно распределённых случайных чисел.]],
["R:bytes(N) --> str"]     = [[Случайная последовательность символов заданной длины.]],
["R:rayleigh(sigma_d) --> float"] = [[Распределение Рэлея.]],
["R:ipairs(tbl) --> iterator_fn"] = [[Итерация по элементам списка в случайном порядке.]],
["R:norm(mean_d=0, dev_d=1) --> float"] = [[Нормальное распределение.]],
["R:choice(tbl) --> element, index_N"] = [[Случайный элемент списка.]],
["R:binomial(p_d, N) --> int"] = [[Биномиальное распределение.]],
["R:flip(p=0.5) --> bool"] = [[Случайное логическое значение.]],
},
---------- rational.lua ----------
rational = {
["R:toCF() --> coeff_t"]   = [[Преобразование рационального числа в цепную дробь.]],
["__module__"]             = [[Операции с числами, представленными в виде дроби.]],
["R:denom() --> var"]      = [[Возвращает знаменатель.]],
[":fromCF(coeff_t) --> R"] = [[Преобразование цепной дроби в рациональное число.]],
["R:num() --> var"]        = [[Возвращает числитель.]],
[":from(src_f, err_f=1E-3) --> R"] = [[Оценка дроби рациональным числом с заданной точностью.]],
[" (num, denom=1) --> new_R"] = [[Для создания рационального числа укажите числитель и (опционально) знаменатель.]],
["R:float() --> num"]      = [[Представление рационального числа в десятичном виде.]],
},
---------- special.lua ----------
special = {
[":beta(z_d, w_d) --> num"] = [[Бета-функция.]],
[":erf(x_d) --> num"]      = [[Функция ошибки.]],
["__module__"]             = [[Специальные функции.]],
[":gammq(order_N, x_d) --> num"] = [[Неполная гамма-функция Q(N,x) = 1-P(N,x).]],
[":gammp(order_N, x_d) --> num"] = [[Неполная гамма-функция P(N,x).]],
[":dawson(x_d) --> num"]   = [[Интеграл Доусона.]],
[":expint(pow_N, x_d) --> num"] = [[Экспоненциальный интеграл En(x).]],
[":gammaln(x_d) --> num"]  = [[Натуральный логарифм гамма-функции.]],
[":besselk(order_N, x_d) --> num"] = [[Модифицированная функция Бесселя Kn(x).]],
[":betaln(z_d, w_d) --> num"] = [[Натуральный логарифм бета-функции.]],
[":besselj(order_N, x_d) --> num"] = [[Функция Бесселя первого рода.]],
[":erfc(x_d) --> num"]     = [[Дополнительная функция ошибки.]],
[":besseli(order_N, x_d) --> num"] = [[Модифицированная функция Бесселя In(x).]],
[":gamma(x_d) --> num"]    = [[Гамма функция.]],
[":betainc(x_d, a_d, b_d) --> num"] = [[Неполная бета-функция Ix(a,b).]],
[":bessely(order_N, x_d) --> num"] = [[Функция Бесселя второго рода.]],
},
---------- symbolic.lua ----------
symbolic = {
[":def(name_s, args_t, expr_S) --> fn_S"] = [[Создаёт символьную функцию. S либо символьное выражение, либо Lua функция.]],
["__module__"]             = [[Символьные преобразования.]],
[":fn(name_s) --> fn_S|nil"] = [[Возвращает символьную функцию с заданным именем или nil.]],
[" (num|str) --> new_S"]   = [[Символьная переменная или константа.]],
["S:isFn() --> bool"]      = [[Проверяет, является ли символ функцией.]],
[":parse(expr_s) --> S1, S2, .."] = [[Формирует символьное выражение из строки.]],
["S:eval(env_t={}) --> upd_S|num"] = [[Вычисляет выражение с заданным окружением.]],
["S:diff(var_S) --> derivative_S"] = [[Возвращает символьную производную выражения.]],
--["S:ratDenom() --> denominator_S"] = [[Get denominator of the expression.]],
--["S:ratNum() --> numerator_S"] = [[Get numerator of the expression.]],
--["S:struct() --> str"]     = [[Show internal structure.]],
--["S:expand() --> expanded_S"] = [[Expand product of polynomials when possible.]],
},
---------- units.lua ----------
units = {
["__module__"]             = [[Операции с единицами измерения.]],
[".prefix"]                = [[Таблица приставок.]],
[" (val=1, name_s) --> new_U"] = [[Создание числа с единицами измерения.]],
["U:key() --> str"]        = [[Возвращает единицы измерения.]],
["U:copy() --> cpy_U"]     = [[Создание копии объекта.]],
["U:convert(new_s) --> upd_U|nil"] = [[Преобразование единиц измерения, возвращает новый объект или nil.]],
[".rules"]                 = [[Таблица с правилами преобразования.]],
},
}
