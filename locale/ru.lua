---------- locale/ru.lua ----------

return {
----------
language = 'Русский',
authors  = [[Станистав Михель]],
---------- dialog ----------
Dialog = {
["done"]                   = [[Выполнено.]],
["intro"]                  = [[-------- help([функция]) = справка --------------
---------- use([модуль]) = импорт функций -------
----------------- quit() = выход ----------------
]],
},
---------- asciiplot.lua ----------
asciiplot = {
["F:setZ(par_t={range,view,log,fix})"] = [[Установить Z диапазон.]],
["F:reset()"]              = [[Очистка холста.]],
["Plot(...)"]              = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
["F:axes() --> tbl"]       = [[Получить информацию по каждой оси в виде таблицы {size, log, range, pose}.]],
["F:copy() --> cpy_F"]     = [[Возвращает копию объекта.]],
["F:tplot(data_t, cols_N={})"] = [[Построение графика на основе таблицы, можно указать номера столбцов и дополнительные опции.]],
["F:addString(row_N, col_N, str)"] = [[Добавление строки в указанную позицию.]],
["F:addPose(row_N, col_N, char_s)"] = [[Установка символа в указанную позицию.]],
["F:resize(src_F | (width_N, height_N))"] = [[Задать новый размер графика.]],
["F:contour(fn, {level=5, view='XY'}) --> nil|str"] = [[Проекция контуров функции fn(x,y). Проекции: XY, XZ, YZ, concat.]],
["F:plot(...)"]            = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
[":concat(...) --> str"]   = [[Горизонтальное объединение графиков равного размера. Для двух объектов можно использовать оператор '..' .]],
["F:title(str)"]           = [[Установить название графика.]],
["__module__"]             = [[Визуализация данных с помощью псевдо-графики.]],
[" (width_N=73, height_N=21) --> new_F"] = [[Новый график.]],
["F:addPoint(x_d, y_d, char_s)"] = [[Добавить точку с координатами (x,y) с помощью символа.]],
["F:setX(par_t={range,view,log,fix})"] = [[Установить X диапазон.]],
["F:setY(par_t={range,view,log,fix})"] = [[Установить Y диапазон.]],
["F:bar(t, y_N=2, x_N=1)"] = [[Столбчатая диаграмма. vy может быть индексом y в таблице t либо списком y-в.]],
["F:scale(factor_d, isDefault=false) --> F"] = [[Изменить размер графика относительно начальных размеров.]],
["F:legend(str_t)"]        = [[Настроить подписи.]],
},
---------- bigint.lua ----------
bigint = {
["B:float() --> num"]      = [[Представление в виде числа с плавающей точкой.]],
[":P(n, k) --> permutaions_B"] = [[Возвращает число перестановок без повторов.]],
["B:F() --> B!"]           = [[Возвращает факториал положительного числа.]],
["B:abs() --> num"]        = [[Возвращает модуль числа.]],
["B:factorize() --> primeBs_t"] = [[Возвращает список простых множителей для данного числа.]],
["B:isPrime([method_s]) --> bool"] = [[Проверка числа на простоту. Установите метод 'Fermat' для использования малой теоремы Ферма.]],
[":ratF(num_B, denom_B) --> num!/denom!"] = [[Вычисляет отношение факториалов num!/denom!.]],
[" (var) --> new_B"]       = [[Создаёт большое целое число на основе числа, строки или таблицы.]],
["B:gcd(B2) --> B3"]       = [[Наибольший общий делитель.]],
[":random(B) --> rand_B"]  = [[Псевдо-случайное число от 0 до B.]],
["__module__"]             = [[Вычисления с целыми числами произвольной длины.]],
["B:sign() --> int"]       = [[Возвращает +1/0/-1.]],
["B:eq(x) --> bool"]       = [[Проверка равенства двух чисел.]],
["B:base(N) --> tbl"]      = [[Возвращает основание системы счисления.]],
[":C(n, k) --> combinations_B"] = [[Возвращает число компинаций из n по k.]],
},
---------- complex.lua ----------
complex = {
[" (re=0, im=0) --> new_Z"] = [[Создание комплексного числа.]],
[":trig(module, angle) --> module*exp(i*angle)"] = [[Создание комплексного числа по модули и агрументу.]],
["Z:tanh() --> y_Z"]       = [[Комплексный гиперболический тангенс.]],
["Z:acosh() --> y_Z"]      = [[Комплексный обратный гиперболический косинус.]],
["Z:tan() --> y_Z"]        = [[Комплексный тангенс.]],
[":i(x=1) --> new_Z"]      = [[Возвращает комплексное число v*i.]],
["Z:sqrt() --> y_Z"]       = [[Комплексный квадратный корень.]],
["Z:re() --> var"]         = [[Действительная часть.]],
["Z:sinh() --> y_Z"]       = [[Комплексный гиперболический синус.]],
["Z:acos() --> y_Z"]       = [[Комплексный обратный косинус.]],
["Z:atan() --> y_Z"]       = [[Комплексный обратный тангенс.]],
["Z:im() --> var"]         = [[Мнимая часть.]],
["Z:round(N=6) --> rounded_Z"] = [[Возвращает число с округлением до заданного количества знаков.]],
["Z:abs() --> float"]      = [[Модуль комплексного числа.]],
["Z:exp() --> y_Z"]        = [[Комплексная экспонента.]],
["Z:cos() --> y_Z"]        = [[Комплексный косинус.]],
["Z:sin() --> y_Z"]        = [[Комплексный синус.]],
["__module__"]             = [[Вычисления с комплексными числами.]],
["Z:log() --> y_Z"]        = [[Комплексный логарифм.]],
["Z:asin() --> y_Z"]       = [[Комплексный обратный синус.]],
["Z:conj() --> conj_Z"]    = [[Комплексно-сопряженное число. Эквивалентно ~C.]],
["Z:asinh() --> y_Z"]      = [[Комплексный обратный гиперболический синус.]],
["Z:cosh() --> y_Z"]       = [[Комплексный гиперболический косинус.]],
["Z:arg() --> float"]      = [[Возвращает агрумент комплексного числа.]],
["Z:atanh() --> y_Z"]      = [[Комплексный обратный гиперболический тангенс.]],
},
---------- const.lua ----------
const = {
[".phi.Da"]                = [[Атомная единица массы.]],
[".astro.pc"]              = [[Один парсек.]],
[".phy.e"]                 = [[Заряд электрона.]],
[".phy.sigma"]             = [[Постоянная Стефана-Больцмана.]],
[".phy.NA"]                = [[Число Авогадро.]],
[".math.phi"]              = [[Золотое сечение.]],
[".math.pi"]               = [[Отношение длины окружности к её диаметру.]],
[".phy.c"]                 = [[Скорость света.]],
[".phy.Rinf"]              = [[Постоянная Ридберга.]],
[".phy.Vm"]                = [[Объём моля идеального газа.]],
[".phy.g"]                 = [[Ускорение свободного падения.]],
[".phy.G"]                 = [[Гравитационная постоянная.]],
[":remove(name_s) --> bool"] = [[Удаление константы.]],
[".phy.k"]                 = [[Постоянная Больцмана.]],
["__module__"]             = [[Разнообразные константы.]],
[":add(name_s, value, [units_s])"] = [[Добавление временной константы.]],
[".math.e"]                = [[Основание натурального логарифма.]],
[".phy.h"]                 = [[Число планка.]],
[".astro.au"]              = [[Астрономическая единица.]],
[".phy.R"]                 = [[Универсальная газовая постоянная.]],
[".phy.mu0"]               = [[Магнитная постоянная.]],
[".phy.eps0"]              = [[Электрическая постоянная.]],
[".astro.ly"]              = [[Световой год.]],
},
---------- data.lua ----------
data = {
[":cov(data_t) --> cov_M"] = [[Возвращает матрицу ковариации для списка векторов.]],
[":histcounts(data_t, rng_v=10) --> sum_t, edges_t"] = [[Распределение данных по интервалам. Можно указать число интервалов разбиения, либо задать границы в виде таблицы.]],
[":tpdf(x_d, deg_N) --> num"] = [[Плотность распределения Стьюдента.]],
[":ref(src_t, begin_N=1, end_N=#src_t) --> new_R"] = [[Возвращает "ссылку" на таблицу элементов.]],
[":range(begin_d, end_d, [step_d]) --> new_R"] = [[Генерация диапазона чисел.]],
[":harmmean(data_t, [weigh_t]) --> num"] = [[Гармоническое среднее.]],
[":zip(fn,...) --> tbl"]   = [[Последовательно применяет функцию к списку векторов.]],
[":xLt(num) --> cond_fn"]  = [[Возвращает функцию для условия x < d.]],
[":isNot(data_t, cond_fn) --> yesno_t"] = [[Возвращает инвертированные веса для булевой функции.]],
[":median(data_t) --> num"] = [[Возвращает медиану распределения.]],
[":csvwrite(file_s, data_t, char=',')"] = [[Сохраняет таблицу в файл с заданным разделителем.]],
[":xIn(num1, num2) --> cond_fn"] = [[Возвращает функцию для условия d1 <= x <= d2.]],
[":xGt(num) --> cond_fn"]  = [[Возвращает функцию для условия x > d.]],
[":xEq(num) --> cond_fn"]  = [[Возвращает функцию для условия x == d.]],
[":tcdf(x_d, deg_N) --> num"] = [[Распределение Стьюдента.]],
[":min(data_t) --> var, ind_N"] = [[Возвращает наименьший элемент и его индекс.]],
[":std(data_t, [weight_t]) --> dev_f, var_f"] = [[Возвращает стандартное отклонение и дисперсию.]],
[":is(data_t, cond_fn) --> yesno_t"] = [[Возвращает массив весов на основе булевой функции.]],
[":mean(data_t, [wight_t]) --> num"] = [[Вычисляет среднее значение.]],
[":sum(data_t) --> var"]   = [[Возвращает сумму элементов.]],
[":moment(order_N, data_t, [weigth_t]) --> num"] = [[Центральный момент t порядка N (с весами tw).]],
["__module__"]             = [[Обработка данных и статистические расчёты.]],
[":cov2(xs_t, ys_t) --> float"] = [[Вычисляет ковариацию для двух списков.]],
[":csvread(file_s, delim_s=',') --> tbl"] = [[Формирует таблицу на основе файла с заданным разделителем.]],
[":T(src_t) --> TR"]       = [[Возвращает указатель на 'транспонированную' таблицу.]],
[":geomean(data_t, [weigh_t]) --> num"] = [[Геометрическое среднее.]],
[":filter(in_t, condition) --> out_t"] = [[Вильтрует список данных. Условием является булева функция или массив весов.]],
[":Fn(expr_s, arg_N=2) --> fn"] = [[Генерирует функцию из строки с параметрами x1, x2 и т.д.]],
[":max(data_t) --> var, ind_N"] = [[Максимальный элемент и его индекс.]],
[":freq(data_t) --> tbl"]  = [[Возвращает таблицу частот элементов.]],
[":md(data_t, names_t=nil, row_fn=nil) --> str"] = [[Печать таблицы в стиле Markdown. Строки могут быть обработаны функцией row_fn(t)-->t.]],
},
---------- geodesy.lua ----------
geodesy = {
["E:solveDir(blh_t, az1_d, dist_d) --> blh_t, az2_d"] = [[Решение прямой задачи геодезии, поиск положения и азимута второй точки при заданных начальной точке, направлении и расстоянии.]],
[":grav(latitude_d) --> num"] = [[Международная формула гравитации, аргумент в радианах.]],
[":toENU(blRef_t, xyzRef_t, xyzObs_t) --> top_t"] = [[Преобразовать геоцентрические координаты точки в топоцентрические.]],
["E.blhInto[E2] --> fn"]   = [[Возвращает функцию для преобразования геодезических координат из A в B с помощью метода Молоденского.]],
["E:toBLH(xyz_t) --> blh_t"] = [[Приобразовать геоцентрические координаты в геодезические.]],
[":dms2rad(deg_d, min_d=0, sec_d=0) --> num"] = [[Преобразует градусы, минуты и секунды в радианы.]],
[":fromENU(blRef_t, xyzRef_t, top_t) --> xyzObs_t"] = [[Преобразовать топоцентрические координаты точки в геоцентрические.]],
[":hashEncode(coord_t, letter_N=6) --> hash_s"] = [[Вычисления геохэша для точки.]],
[":hashDecode(hash_s) --> coord_t, range_t"] = [[Определения положения зоны по геохэшу.]],
["E:toXYZ(blh_t) --> xyz_t"] = [[Преобразует геодезические координаты в геоцентрические.]],
["E:solveInv(blh1_t, blh2_t) --> dist_d, az1_d, az2_d"] = [[Решение обратной задачи геодеции, поиск расстояния и азимутов для двух заданных точек.]],
["E:ll2utm(blh_t) --> utm_t"] = [[Найти UTM проекцию для заданных координат.]],
["E:utm2ll(utm_t) --> blh_t"] = [[Найти геодезические координаты для заданной UTM позиции и зоны.]],
["__module__"]             = [[Преобразования координат и другие геодезические задачи.]],
["E.xyzInto[E2] --> fn"]   = [[Возвращает функцию для преобразования геоцентрических координат из системы A в B.]],
[":deg2dms(deg_d) --> num"] = [[Возвращает градусы, минуты и секунды для заданного угла в градусах.]],
},
---------- gnuplot.lua ----------
gnuplot = {
[":tpolar(var, [x_N, y1_N, y2_N,..])"] = [[График в полярных координатах для таблицы, матрицы или файла. Опциональные элементы определяют стоблцы.]],
[" () --> new_G"]          = [[Подготовка таблицы для Gnuplot.]],
[":tplot(var, [x_N, y1_N, y2_N,..])"] = [[Построение графика на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
[":plot(x1_t, [y1_t, nm_s, x2_t,..])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
["__module__"]             = [[Интерфейс для взаимодействия с Gnuplot.]],
[":surfplot(x1_t, y1_t, fn1, [nm_s, x2_t, y2_t,..])"] = [[Построение поверхности. 'x' и 'y' - списки чисел, 'fn' - функция двух агрументов, 'nm' - имя поверхности.]],
["G:show()"]               = [[Строит график на основе параметров, представленных в виде таблицы Lua.]],
["G:copy() --> cpy_G"]     = [[Возвращает копию параметров графика.]],
["G:add(curve_v)"]         = [[Добавить функцию для построения.]],
[":polarplot(x1_t, y1_t, [nm_s, x2_t, y2_t,..])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
[":tsurf(var, [x_N, y_N, z1_N, z2_N,..])"] = [[Построение графика поверхности на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
[".keys"]                  = [[  Описание параметров:
{math.sin, title='sin'}                      -- строит график для Lua функции, добавляет текст в легенду
{'sin.dat', ln=1, lw=2}                      -- строит график для файла с учётом цвета и толщины маркеров
{tbl, with='lines'}                          -- строит график для Lua таблицы с помощью линий
title='Graph name'                           -- имя графика в целом
xrange={0,10}                                -- диапазон x от 0 до 10
yrange={-2,2}                                -- диапазон y
zrange={0,5}                                 -- диапазон z
trange={1,2}                                 -- изменение параметра в случае параметрической функции
xtitle='A', ytitle='B'                       -- имена осей
terminal='jpeg'                              -- сохранение результата в файл
output='my_plot.jpg'                         -- имя файла для вывода результата
parametric=true                              -- параметрическое представление функции
size='square'                                -- установить квадратный размер изображения
polar=true                                   -- график в полярных координатах
grid='polar'                                 -- изменить тип сетки на полярный
legend=false                                 -- отключить легенду
surface=true                                 -- построение трёхмерного графика
samples=200                                  -- задать число точек на графике
raw='set pm3d'                               -- позволяет написать команды Gnuplot в явном виде
]],
},
---------- graph.lua ----------
graph = {
["G:isWeighted() --> bool"] = [[True если граф взвешенный.]],
["G:isNegative() --> bool"] = [[True если граф содержит отрицательные веса.]],
["G:dot() --> str"]        = [[Возвращает описание структуры в dot формате.]],
[" () --> new_G"]          = [[Создаёт ненаправленный граф.]],
["G:size() --> nodes_N"]   = [[Число узлов графа.]],
["G:toSvg(name_s)"]        = [[Сохраняет граф в SVG изображене с помощью Graphviz.]],
["G:dfs(startNote, goalNode) --> isFound, path_t"] = [[Поиск в глубину. Возвращает флаг результата и найденный путь.]],
["G:bfs(startNode, goalNode) --> isFound, path_t"] = [[Поиск в ширину. Возвращает флаг результата и найденный путь.]],
["G:remove(n1, [n2])"]     = [[Удаляет узел или ребро. Узлы представляются именем, рёбра - двухэлементным списком.]],
["G:isDirected() --> bool"] = [[True если граф направленный.]],
["G:nodes() --> node_t"]   = [[Возвращает список узвло графа.]],
["G:edge() --> weight_d|nil"] = [[Возвращает вес ребра.]],
[":dir() --> new_G"]       = [[Создаёт направленный граф.]],
["G:addEdges(list_t)"]     = [[Импортирует рёбра и веса из списка.]],
["G:isComplete() --> bool"] = [[True если граф полный.]],
["G:pathD(startNode, [goalNode]) --> dist_d, path_t|prev_t"] = [[Поиск кратчайшего пути алгоритмом Дейкстры. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["G:copy() --> cpy_G"]     = [[Создаёт копию графа.]],
["G:add(n1, n2=nil, w_d=1)"] = [[Добавляет узел (одиночное имя) или ребро. Ребро представлено списком, содержащим начало, конец и, при необходимости, вес (веса).]],
["G:addNodes(list_t)"]     = [[Импортирует узлы из списка.]],
["__module__"]             = [[Операции с графами.]],
["G:edges() --> edges_t"]  = [[Возвращает список рёбер.]],
},
---------- lens.lua ----------
lens = {
[":mirror(rad_d, n_d) --> L"] = [[Возвращает матрицу отражения на кривой поверхности с учётом показателя преломления.]],
[":thin(focalDist_d) --> L"] = [[Возвращает матрицу для тонкой линзы при заданном фокальном расстоянии.]],
["L:det() --> determinant_d"] = [[Возвращает определитель матрицы.]],
[":afocal(magn_d) --> L"]  = [[Возвращает матрицу для афокальной системы.]],
["L:cardinal(nLft_d=1, nRht_d=1) --> points_t"] = [[Поиск положения кардинальных точек системы относительно входных и выходных плоскостей, с учётом показателей преломления. Возвращает список расстояний.]],
[":solve(fn, index_N, initial_d) --> found_d"] = [[Поиск условий, при которых компонент с заданным индексом равен 0. d0 - начальное предположение.]],
["L:transform(yIn_d, VIn_d) --> yOut_d, VOut_d"] = [[Определяет положение луча 'dy' и оптический угол 'dV' (= v*n) на выходе оптической системы. Эквивалентно вызову L(dy,dV).]],
[":gaussSize(waist_d, lambda_d, dist_d) --> rad_d, curv_d"] = [[Определение радиуса и кривизны гаусова пучка на заданном расстоянии.]],
[":trans(dist_d, n_d=1) --> L"] = [[Возвращает матрицу перемещения с учётом показателя преломления.]],
["__module__"]             = [[Матричные методы в параксиальной оптике.]],
[":gaussParam(waist_d, lambda_d) --> div_d, range_d"] = [[Определение расходимости и размера ближней зоны пучка.]],
["L:isUnit() --> bool"]    = [[Проверка, является ли матрица единичной.]],
[" (A_d, B_d, C_d, D_d) --> new_L"] = [[Новый объект с произвольными параметрами A, B, C, D.]],
["L:beam(inRad_d, inCurv_d, lambda_d) --> outRad_d, outCurv_d"] = [[Определение радиуса и кривизны фронта гаусова пуска на выходе из системы.]],
["L:copy() --> cpy_L"]     = [[Возвращает копию объекта.]],
["L:inv() --> inv_L"]      = [[Инвертированная матрица системы.]],
[":ref(rad_d, n1_d, n2_d) --> L"] = [[Возвращает матрицу для преломления с учётом показателей преломления и радиуса кривизны поверхности.]],
},
---------- main.lua ----------
main = {
["Print(...)"]             = [[Дополненная функция печати, показывает элементы таблицы, представляет числа в н "научно" виде.]],
["atan(x) --> y"]          = [[Арктангенс x.]],
["quit()"]                 = [[Выход из программы.]],
["_pi"]                    = [[Число pi.]],
["tan(x) --> y"]           = [[Тангенс x.]],
["asinh(x) --> y"]         = [[Гиперболический арксинус.]],
["atan2(y_d, x_d) --> num"] = [[Арктангенс dy/dx с учётом знака.]],
["cosh(x) --> y"]          = [[Гиперболический косинус.]],
["help(fn='main') --> str"] = [[Описание модуля, функции или элемента.]],
["use([module_s]) --> str|nil"] = [[Используйте use('модуль') или use{'модульA','модульB'} для подключения дополнительных модулей.]],
["asin(x) --> y"]          = [[Арксинус x.]],
["abs(x) --> num"]         = [[Абсолютная величина.]],
["Type(x) --> str"]        = [[Печатает тип объекта, распознаёт типы, заданные в Sonata.]],
["Round(x_d, N=0) --> num"] = [[Округление числа до заданного количества десятичных знаков.]],
["sin(x) --> y"]           = [[Синус x.]],
["sinh(x) --> y"]          = [[Гиперболический синус.]],
["Map(fn, in_t) --> out_t"] = [[Вычисляет функцию для всех элементов списка (таблицы), возвращает новый список.]],
["exp(x) --> y"]           = [[Экспонента.]],
["__module__"]             = [[Программа для математических расчётов на Lua.]],
["acos(x) --> y"]          = [[Арккосинус x.]],
["atanh(x) --> y"]         = [[Гиперболический арктангенс.]],
["sqrt(x) --> y"]          = [[Квадратный корень.]],
["acosh(x) --> y"]         = [[Гиперболический арккосинус.]],
["cos(x) --> y"]           = [[Косинус x.]],
["tanh(x) --> y"]          = [[Гиперболический тангенс.]],
["_e"]                     = [[Число Эйлера.]],
["log(x) --> y"]           = [[Натуральный логарифм.]],
},
---------- matrix.lua ----------
matrix = {
["M:minor(row_N, col_N) --> minor_M"] = [[Возвращает минорную матрицу для заданного элемента.]],
[":zeros(row_N, col_N=row_N) --> M"] = [[Формирует матрицу нулей.]],
["M:svd() --> U_M, S_M, V_M"] = [[Сингулярное разложение матрицы, возвращает U, S, V.]],
["M:cols() --> N"]         = [[Число столбцов.]],
["M:chol() --> lower_M"]   = [[Преобразование Холески для положительно определённой симметричной матрицы.]],
["M:rank() --> N"]         = [[Возвращает ранг матрицы.]],
["V:dot(V2) --> num"]      = [[Скалярное произведение векторов.]],
["M:range(rows_t, cols_t) --> range_M"] = [[Возвращает подматрицу с заданным интервалом строк и столбцов.]],
["M:insert(rows_t, cols_t, M2)"] = [[Вставляет матрицу в заданный диапазон строк и столбцов.]],
["M:rows() --> N"]         = [[Число строк.]],
["M:norm() --> num"]       = [[Евклидова норма.]],
["M:rref() --> upd_M"]     = [[Преобразование матрицы методом Гаусса.]],
["M:T() --> transpose_M"]  = [[Транспонирование матрицы. Эквивалентно T().]],
[":fill(row_N, col_N, val=1) --> M"] = [[Создать матрицу, заполненную заданным числом.]],
["M:H() --> conj_M"]       = [[Сопряженная транспонированная матрица.]],
["M:qr() --> Q_M, R_M"]    = [[QR разложение матрицы. Возвращает Q и R.]],
["M:tr() --> sum"]         = [[След матрицы.]],
["M:det() --> num"]        = [[Определитель матрицы.]],
[":zip(fn, M1, M2,..) --> res_M"] = [[Поэлементно применяет функцию к матрицам для формирования новой матрицы.]],
["M:map(fn) --> found_M"]  = [[Формирует новую матрицу путём применения указанной функции к исходной. Функция может зависеть как от элементов, f(x) так и от индексов f(x,row,col).]],
[" {row1_t, row2_t,..} --> new_M"] = [[Создаёт матрицу на основе списка строк.]],
["M:pinv() --> inv_M"]     = [[Вовзращает псевдо-обратную матрицу.]],
["M:round(N=6)"]           = [[Округлить все элементы матрицы до заданного числа знаков.]],
[":V {...} --> new_V"]     = [[Создать вектор из списка чисел.]],
["M:lu() --> L_M, U_M, perm_M"] = [[LU преобразование матрицы. Возвращает L, U и P.]],
["M:table() --> tbl"]      = [[Преобразует матрицу в обыкновенную Lua таблицу.]],
["M:diag() --> V"]         = [[Извлекает диагональные элементы матрицы.]],
["M:bidiag() --> U_M, B_M, V_M"] = [[Бидиагонализация матрицы, возвращает U, B, V.]],
["V:cross(V2) --> V3"]     = [[Векторное произведение 3-элементных векторов.]],
["__module__"]             = [[Операции с матрицами. На нулевые элементы память не расходуется. Индексация с единицы.]],
["M:reshape(row_N=size, col_N=1) --> upd_M"] = [[Изменить размер матрицы.]],
["M:eig() --> vectors_M, values_M"] = [[Возвращает матрицы из собственных векторов и чисел.]],
[":eye(row_N, col_N=row_N) --> M"] = [[Единичная матрица.]],
["M:inv() --> inv_M"]      = [[Обратная матрица.]],
[":D(list_v) --> M"]       = [[Матрица с заданными диагональными элементами.]],
["M:concat(M2, dir_s) --> comb_M"] = [[Объединяет две матрица горизонтально (dir='h') или вертикально (dir='v').
Горизонтальная конкатенация доступна в виде M1 .. M2, а вертикальная - M1 // M2.]],
["M:copy() --> cpy_M"]     = [[Возвращает копию матрицы.]],
["M:kron(M2) --> M3"]      = [[Произведение Кронеккера.]],
["M:kronSum(M2) --> M3"]   = [[Сумма Кронеккера.]],
["M:vectorize() --> V"]    = [[Преобразование в вектор по столбцам.]],
},
---------- numeric.lua ----------
numeric = {
[":trapez(fn, x1_d, x2_d) --> num"] = [[Интегрирование методом трапеций.]],
[":solve(fn, xLow_d, xUp_d) --> num"] = [[Поиск корня уравнения fn(x)=0 на интервале [a,b].]],
[".TOL=0.001"]             = [[Точность решения.]],
[":der(fn, x_d) --> num"]  = [[Оценка производной функции в точке.]],
[":ode45(fn, interval_t, y0, {dt=10*TOL,exit=nil}) --> ys_t"] = [[Численное решение ОДУ.
Первый параметр задаёт уравнение, второй - временной интервал, третий - начальное значение функции. Дополнительно можно определить такие параметры как шаг интегрирования и условие прерывания.
Возвращает таблицу промежуточных точек и конечное значение yn.]],
[":newton(fn, x0_d) --> num"] = [[Поиск корня методом Ньютона в окрестностях заданной точки.]],
["__module__"]             = [[Функции для численных расчётов. Все функции работают с точностью, определяемой параметром TOL.]],
[":lim(fn, xn_d, isPositive) --> y, isFound"] = [[Оценка предела функции.]],
},
---------- polynomial.lua ----------
polynomial = {
["P:val(x) --> y"]         = [[Вычисляет значение полинома в заданной точке. Эквивалентно вызаву P(x).]],
["P:int(x0_d=0) --> int_P"] = [[Первообразная полинома, x0 - свободный коэффициент.]],
[":lagrange(xs_t, ys_t) --> P"] = [[Интерполяция данных полиномом Лагранжа.]],
[":spline(xs_t, ys_t) --> Ps_t"] = [[Интерполяция данных кубическими сплайнами. Возвращает таблицу полиномов.]],
["P:str(char_s='x') --> str"] = [[Более наглядное представление полинома.]],
["P:real() --> roots_t"]   = [[Возвращает список действительных корней полинома.]],
["P:copy() --> cpy_P"]     = [[Возвращает копию полинома.]],
["P:roots() --> roots_t"]  = [[Поиск действительных и комплексных корней полинома.]],
[":build(roots_t) --> P"]  = [[Строит полином на основе списка корней.]],
[":ppval(Ps_t, x_d, [index_N]) --> num"] = [[Вычисляет значение интерполяции из таблицы полиномов, можно использовать индекс полинома для ускорения расчёта.]],
["P:der() --> der_P"]      = [[Первая производная полинома.]],
["__module__"]             = [[Действия над полиномами.]],
[":char(M) --> P"]         = [[Возвращает характеристический полином матрицы.]],
[" {.., v1, v0} --> new_P"] = [[Создаёт полином на основе списка коэффициентов.]],
[":taylor(x_d, fx_d, [fx'_d, fx''_d,..]) --> P"] = [[Формирует полином Тейлора в окрестности заданной точки.]],
[":fit(xs_t, ys_t, order_N) --> P"] = [[Аппроксимация точек полиномом заданной степени.]],
[":lin(xs_t, ys_t, yBefore_d=0, yAfter_d=y0) --> P"] = [[Линейная интерполяция. Возвращает таблицу полиномов.]],
},
---------- quaternion.lua ----------
quaternion = {
["Q:matrix() --> M"]       = [[Представление в виде матрицы.]],
["Q:conj() --> conj_Q"]    = [[Сопряжённый кватернион.]],
["Q:normalize() --> unit_Q"] = [[Возвращает единичный кватернион.]],
[":fromAA(angle_d, axis_d) --> Q"] = [[Возвращает кватернион для заданного угла и оси вращения.]],
["Q:abs() --> num"]        = [[Норма кватерниона.]],
["Q:rotate(inVec) --> outVec_t"] = [[Возвращает вектор, полученный при вращении с помощью заданного кватерниона.]],
[":fromRot(M) --> Q"]      = [[Строит кватернион на основе угла поворота и оси вращения.]],
["Q:slerp(end_Q, rat_f) --> rat_Q"] = [[Сферическая линейная интерполяция двух кватернионов.]],
[" {w, x, y, z} --> new_Q"] = [[Создаёт новый кватернион.]],
["Q:y() --> var"]          = [[Компонента y.]],
["__module__"]             = [[Операции над кватернионами.]],
["Q:toAA() --> angle_d, axis_t|nil"] = [[Возвращает угол поворота и ось вращения.]],
["Q:z() --> var"]          = [[Компонента z.]],
["Q:inv() --> inv_Q"]      = [[Возвращает крватернион, обратный к данному.]],
["Q:x() --> var"]          = [[Компонента x.]],
["Q:w() --> var"]          = [[Действительная часть w.]],
["Q:toRot() --> M"]        = [[Возвращает эквивалентную матрицу вращения.]],
["Q:toRPY() --> roll_d, pitch_d, yaw_d"] = [[Преобразовать в крен-тангаж-рысканье.]],
[":fromRPY(roll_d, pitch_d, yaw_d) --> Q"] = [[Построить кватернион по углам Эйлера.]],
},
---------- qubit.lua ----------
qubit = {
["Q:prob(state_s) --> probatility_d"] = [[Вероятность заданного состояния.]],
[":gates(input_n) --> G"]  = [[Инициализация гейта для заданного числа кубитов.]],
["G:isUnitary() --> bool"] = [[Проверка унитарности преобразования.]],
[" (t) --> Q"]             = [[Создать систему кубитов.]],
["G:X([ind1,ind2,..]) --> upd_G"] = [[Добавить гейт X.]],
["Q:normalize()"]          = [[Нормализовать коэффициенты.]],
["G:fromMatrix(mat) --> upd_G"] = [[Добавить гейт на основе матрицы.]],
["G:T([ind1,ind2,..]) --> upd_G"] = [[Добавить T гейт.]],
[":combine([Q1,Q2,..]) --> Q|nil"] = [[Объединить кубиты в систему. Эквивалентно Q1..Q2.]],
["G:S([ind1,ind2,..]) --> upd_G"] = [[Добавить S гейт.]],
["G:CNOT(slave_i, master_i) --> upd_G"] = [[Добавить CNOT гейт.]],
["G:H([i1,i2,..]) --> upd_G"] = [[Добавить гейт Адамара.]],
["__module__"]             = [[Симуляция квантовых расчётов.]],
["G:Z([ind1,ind2,..]) --> upd_G"] = [[Добавить Z гейт.]],
["G:Y([ind1,ind2,..]) --> upd_G"] = [[Добавить Y гейт.]],
["Q:meas([index]) --> Q"]  = [[Измерить всё состояние или заданный кубит. После измерения система остаётся в найденном состоянии.]],
["Q:matrix() --> M"]       = [[Эквивалентная матрица гейтов или вектор кубитов.]],
["G:inverse() --> inv_G"]  = [[Возвращает обратное преобразование.]],
["G:fromTable(truth_t) --> upd_G"] = [[Добавить гейт на основе таблицы истинности.]],
["Q:copy() --> cpy_Q"]     = [[Возвращает копию объекта.]],
["G:SWAP(ind1, ind2) --> upd_G"] = [[Добавить гейт для обмена 2х кубитов.]],
},
---------- random.lua ----------
random = {
[":logistic(mu_d=0, sigma_d=1) --> float"] = [[Логистическое распределение.]],
[":bytes(N) --> str"]      = [[Случайная последовательность символов заданной длины.]],
[" () --> float"]          = [[Случайное число от 0 до 1.]],
[":int([lower_i=1], upper_i) -> int"] = [[Равномерное распределение целых чисел в заданном диапазоне.]],
[":binomial(p_d, N) --> int"] = [[Биномиальное распределение.]],
[":flip(p=0.5) --> bool"]  = [[Случайное логическое значение.]],
[":seed(N=os.time)"]       = [[Установка начального значения генератора случайных чисел.]],
[":gamma(alpha_N, beta_d=1) --> float"] = [[Гамма распределение.]],
[":choice(tbl) --> element, index_N"] = [[Случайный элемент таблицы.]],
[":poisson(lambda_d) --> int"] = [[Распределение Пуассона.]],
[":exp(lambda_d=1) --> float"] = [[Экспоненциальное распределение.]],
["__module__"]             = [[Генераторы случайных чисел.]],
[":rayleigh(sigma_d) --> float"] = [[Распределение Рэлея.]],
[":shuffle(tbl)"]          = [[Случайное изменение порядка элементов таблицы.]],
[":ipairs(tbl) --> fn"]    = [[Итерация по элементам таблицы в случайном порядке.]],
[":norm(mean_d=0, dev_d=1) --> float"] = [[Нормальное распределение.]],
[":new(seed_i=0) --> R"]   = [[Новый генератор равномерно распределённых случайных чисел.]],
[":cauchy(mu_d=0, sigma_d=1) --> float"] = [[Распределение Коши.]],
},
---------- rational.lua ----------
rational = {
[":fromCF(coeff_t) --> R"] = [[Преобразование цепной дроби в рациональное число.]],
["R:denom() --> var"]      = [[Возвращает знаменатель.]],
[":from(src_f, err_f=1E-3) --> R"] = [[Оценка дроби рациональным числом с заданной точностью.]],
["__module__"]             = [[Операции с числами, представленными в виде дроби.]],
["R:float() --> num"]      = [[Представление рационального числа в десятичном виде.]],
[" (num, denom=1) --> new_R"] = [[Для создания рационального числа укажите числитель и (опционально) знаменатель.]],
["R:toCF() --> coeff_t"]   = [[Преобразование рационального числа в цепную дробь.]],
["R:eq(x) --> bool"]       = [[Проверка равенства двух чисел.]],
["R:num() --> var"]        = [[Возвращает числитель.]],
},
---------- special.lua ----------
special = {
[":bessely(order_N, x_d) --> num"] = [[Функция Бесселя второго рода.]],
[":betaln(z_d, w_d) --> num"] = [[Натуральный логарифм бета-функции.]],
[":besseli(order_N,x_d) --> num"] = [[Модифицированная функция Бесселя In(x).]],
[":besselj(order_N, x_d) --> num"] = [[Функция Бесселя первого рода.]],
[":erf(x_d) --> num"]      = [[Функция ошибки.]],
[":gammp(order_N, x_d) --> num"] = [[Неполная гамма-функция P(N,x).]],
[":besselk(order_N, x_d) --> num"] = [[Модифицированная функция Бесселя Kn(x).]],
[":erfc(x_d) --> num"]     = [[Дополнительная функция ошибки.]],
[":gammq(order_N, x_d) --> num"] = [[Неполная гамма-функция Q(N,x) = 1-P(N,x).]],
[":beta(z_d, w_d) --> num"] = [[Бета-функция.]],
[":gammaln(x_d) --> num"]  = [[Натуральный логарифм гамма-функции.]],
[":dawson(x_d) --> num"]   = [[Интеграл Доусона.]],
[":expint(pow_N, x_d) --> num"] = [[Экспоненциальный интеграл En(x).]],
["__module__"]             = [[Специальные функции.]],
[":legendre(order_N, x_d) --> coeff_t"] = [[Список коэффициентов полиномов Лежандра.]],
[":betainc(x_d, a_d, b_d) --> num"] = [[Неполная бета-функция Ix(a,b).]],
[":gamma(x_d) --> num"]    = [[Гамма функция.]],
},
---------- symbolic.lua ----------
symbolic = {
["S:isFn() --> bool"]      = [[Проверяет, является ли символ функцией.]],
["S:eval(env_t={}) --> upd_S|num"] = [[Вычисляет выражение с заданным окружением.]],
["S:introspect() --> str"] = [[Отображает внутреннее представление выражения.]],
["__module__"]             = [[Символьные преобразования.]],
[":def(name_s, args_t, expr_S) --> fn_S"] = [[Создаёт символьную функцию. S либо символьное выражение, либо Lua функция.]],
[":fn(name_s) --> fn_S|nil"] = [[Возвращает символьную функцию с заданным именем или nil.]],
[":parse(expr_s) --> S1, S2, .."] = [[Формирует символьное выражение из строки.]],
[" (num|str) --> new_S"]   = [[Символьная переменная или константа.]],
["S:diff(var_S) --> derivative_S"] = [[Возвращает символьную производную выражения.]],
},
---------- units.lua ----------
units = {
[".prefix"]                = [[Тарлица приставок.]],
["U:key() --> str"]        = [[Возвращает единицы измерения.]],
["__module__"]             = [[Операции с единицами измерения.]],
["U:copy() --> cpy_U"]     = [[Создание копии объекта с его единицами измерения.]],
[" (val=1, name_s) --> new_U"] = [[Создание числа с единицами измерения.]],
["U:value() --> var"]      = [[Возвращает значение объекта. Эквивалентно #U.]],
[":rules() --> str"]       = [[Печатает список заданных правил.]],
[":setRule(name_s, val_U)"] = [[Добавление нового правила преобразования единиц измерения.]],
["U:convert(new_s) --> upd_U|nil"] = [[Преобразование единиц измерения, возвращает новый объект или nil.]],
},
}