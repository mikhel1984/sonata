---------- locale/eo.lng ----------
{
language = 'Esperanto',
authors  = [[Stanislav Mikhel]],
---------- dialog ----------
Dialog = {
["intro"]                = [[-------- help([functio]) = akiri helpon -----------
---------- use([modulo]) = piliigi la funcionalidad
----------------- quit() = finu -------------------
]],
["done"]                 = [[Preta.]],
["use_import"]           = [[Alvoku
  use 'modulo' aǔ use {'moduloA','moduloB' ...}
por akiri ekstrajn modulojn.
]],
},
---------- main.lua ----------
Main = {
["__module__"]           = [[Komputado sistemo bazita sur Lua.]],
["_ans"]                 = [[Resulto de la lasta operacio.]],
["atan2(y,x)"]           = [[Tangentarco de nombro y/x kun signoj.]],
["DsvWrite(sFile,t[,char=',',bCol=false])"] = [[Savi Lua tabulon kiel dosieron kun delimitilo disigita datumojn.]],
["log(x)"]               = [[Natura logaritmo.]],
["rand()"]               = [[Hazarda nombro inter 0 kaj 1.]],
["_pi"]                  = [[Nombro pi.]],
["cos(x)"]               = [[La kosinuso de nombro x.]],
["atanh(x)"]             = [[Hiperbola tangentarco de nombro.]],
["sin(x)"]               = [[La sinuso de nombro x.]],
["Round(f[,N=0])"]       = [[Rondu nombron, difini kvanto de dekumaj ciferoj.]],
["Range(dBegin,dEnd[,dStep])"] = [[Faru tabelon kun vico da nombroj.]],
["cosh(x)"]              = [[La hiperbola kosinuso de nombro x.]],
["Logging(flag)"]        = [[Sesio-registrado al protokola dosiero. Uzu 'on'/true por komenci kaj 'off'/false por ĉesi.]],
["Map(fn,t)"]            = [[Taksi funkcion por ĉiu elemento de la tablo.]],
["tanh(x)"]              = [[Hiperbola tangento.]],
["asin(x)"]              = [[La sinusarko de nombro x.]],
["Run(sFile)"]           = [[Ekzekuti lua- aŭ note- skripton.]],
["sinh(x)"]              = [[Hyperbola sinuso.]],
["randi(N)"]             = [[Hazarda entrejo de 1 al N.]],
["asinh(x)"]             = [[La hiperbola sinusarko de nombro x.]],
["Type(v)"]              = [[Montri objektan tipon.]],
["acosh(x)"]             = [[La hiperbola kosinusarko de nombro x.]],
["exp(x)"]               = [[La eksponenta dependeco.]],
["randn()"]              = [[Normale distribuita hazarda nombro kun nula mezumo kaj varieco 1.]],
["DsvRead(sFile[,delim=',',bCol=false])"] = [[Legas datumojn disigitaj per delimitilo en la dosiero, revenas Lua tabulon.]],
["_e"]                   = [[Eǔlera nombro.]],
["Print(...)"]           = [[Presi Lua tablo en uzanta formato, usi 'scienca' formon de nombro.]],
["TblImport(sFile)"]     = [[Importu Lua-tabelon el dosiero.]],
["tan(x)"]               = [[La tangento de nombro x.]],
["sqrt(a)"]              = [[Kvadrata radiko.]],
["acos(x)"]              = [[La kosinusarko de nombro x.]],
["abs(x)"]               = [[La absoluta valoro.]],
},
---------- bigint.lua ----------
Int = {
["__module__"]           = [[Operacioj kun la arbitraj longaj entjeroj.]],
["Int(v)"]               = [[Krei novan arbitra longa entjero bazitan sur la nombro, teksto aǔ tablo.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
["isPrime(B[,sMethod])"] = [[Kontrolante numeron por simpleco. Metita metodo 'Fermat' por usi la etan teoremon de Fermat.]],
["base(B)"]              = [[Radikso por nombro.]],
["factorize(B)"]         = [[Listo de primaj faktoroj.]],
["eq(B1,B2)"]            = [[Egaleco kontrolo.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
["fact(B)"]              = [[Revenas faktorialon de la ne indika entjera nombro n.]],
["random(B)"]            = [[Hazarda nombro de 0 al B.]],
["abs(B)"]               = [[Absoluta valoro.]],
["gcd(B1,B2)"]           = [[Plej granda komuna faktoro.]],
["val(B)"]               = [[Prezenti grandan entjeron en nombra formo se eble.]],
["rebase(B,N)"]          = [[Konvertu numbrom al nova numbrosistemo.]],
["copy(B)"]              = [[Krei kopion de granda entjero.]],
},
---------- units.lua ----------
Unit = {
["__module__"]           = [[Operacioj kun unuoj de mezuroj.]],
["copy(U)"]              = [[Krei kopion de objecto.]],
["prefix"]               = [[Prefikso tablo.]],
["convert(v, fn)"]       = [[Konvertas unuojn de mezuro, redonas novan objector aǔ nil. 'fn' povas esti teksto aǔ funkcio. 
Operacio v['fn'] redonas nur la nombro.]],
["Unit(v[,u])"]          = [[Krei novan valoron kun unuoj de mezuro.]],
["add(U,rule)"]          = [[Aldoni regulon por konverti unuojn de mezuro.]],
--["comparison"]           = [[U1==U2, U1~=U2, U1<U2, U1<=U2, U1>U2, U1>=U2]],
--["arithmetic"]           = [[U1+U2, U1-U2, U1*u2, U1/U2, U1^n]],
},
---------- geodesy.lua ----------
Geo = {
["__module__"]           = [[Kunordigi transformoj kaj aliaj geodeziaj taskoj.]],
["fromENU(tBLr,tXYZr,tTop)"] = [[Akiru kartezajn koordinatojn de loka punkto en referenca kadro.]],
["A.blhInto[B]"]         = [[Revenas funkcion por konverti geodeziajn koordinatojn de sistemo A al B per la Molodensky metodo.]],
["A.xyzInto[B]"]         = [[Revenas funkcion por konverti koordinatojn de sistemo A al B.]],
["toENU(tBLr,tXYZr,tCatr)"] = [[Akiru topocentrajn koordinatojn de punkto en referenca kadro.]],
["toXYZ(E,tBLH)"]        = [[Konvertado de geodeziaj koordinatoj al karteziaj koordinatoj.]],
["projGK(E,tBL)"]        = [[Reiru norden kaj orienten poziciojn de la punkto post projekcio de Gauss-Kruger.]],
["deg2dms(d)"]           = [[Revenas gradoj, minutoj kaj sekundoj por donita angulo.]],
["grav(dB)"]             = [[Internacia gravita formulo, angulo en gradoj.]],
["solveInv(E,BLH1,BLH2)"] = [[Solvu inversan geodezian problemon, trovu distancon kaj azimutojn por du punktoj.]],
["toBLH(E,tXYZ)"]        = [[Konvertas kartezajn koordinatojn al geodeziaj koordinatoj.]],
["dms2rad(d[,m[,s]])"]   = [[Konvertas gradojn, minutojn kaj sekundojn al radianoj.]],
["solveDir(E,BLH,azimuth,dist)"] = [[Solvu rektan geodezian problemon, trovu duan punktan pozicion kaj ĝian orientiĝon se la unua punkto, azimuto kaj distanco estas donitaj.]],
["projM(E,tBL)"]         = [[Reiru norden kaj orienten poziciojn de la punkto post projekcio de Mercator.]],
},
---------- complex.lua ----------
Comp = {
["__module__"]           = [[Operacioj kun la kompleksaj nombroj.]],
["cos(C)"]               = [[Kosinuso de kompleksa nombro.]],
["atanh(C)"]             = [[Hyperbola tangentarko de kompleksa nombro.]],
["sinh(C)"]              = [[Hyperbola sinuso de kompleksa nombro.]],
["tanh(C)"]              = [[Hyperbola tangento de kompleksa nombro.]],
--["comparison"]           = [[a==b, a~=b]],
["sin(C)"]               = [[Kompleksa sinuso.]],
["angle(C)"]             = [[Revenas la argumenton de kompleksa nombro.]],
["conj(C)"]              = [[Kompleksa konjugata nombro. Egale al ~C.]],
["Comp([vRe=0,vIm=0])"]  = [[Krei novan kompleksan nombron.]],
["_i"]                   = [[Kompleksa unuo.]],
["acosh(C)"]             = [[Hyperbola kosinusarko de kompleksa nombro.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["trig(dModule,dAngle)"] = [[Uzi geometria prezento por kompleksa nombro.]],
["cosh(C)"]              = [[Hyperbola kosinuso de kompleksa nombro.]],
["asinh(C)"]             = [[Hyperbola sinusarko de kompleksa nombro.]],
["tan(C)"]               = [[Tangento de kompleksa nombro.]],
["abs(C)"]               = [[Redonas la modulo de kompleksa nombro.]],
["sqrt(C)"]              = [[Kvadrata radiko. Rezulto povas esti vera aǔ imaginara nombro.]],
["atan(C)"]              = [[Tangentarko de complexa nombro.]],
["log(C)"]               = [[Kompleksa logaritmo.]],
["asin(C)"]              = [[Sinusarko de kompleksa nombro.]],
["acos(C)"]              = [[Kompleksa kosinusarko.]],
["exp(C)"]               = [[Kompleksa eksponento.]],
["copy(C)"]              = [[Krei kopion de complexa nombro.]],
},
---------- const.lua ----------
_C = {
["__module__"]           = [[Iuj konstantaj valoroj.]],
["astro.pc"]             = [[Unu parsek.]],
["phy.e"]                = [[Electrono ŝarĝo.]],
["phy.sigma"]            = [[Konstanto de Stefan-Boltzmann.]],
["phy.NA"]               = [[Nombro de Avogadro.]],
["math.phi"]             = [[Ora proporcio.]],
["phy.c"]                = [[Rapido de lumo.]],
["remove(sName)"]        = [[Forigi konstantan.]],
["phy.Rinf"]             = [[Konstanto de Rydberg.]],
["phy.Vm"]               = [[Unu mole de ideala gaso volumo.]],
["phy.g"]                = [[Senpaga akcelo.]],
["phy.G"]                = [[Gravita konstanto.]],
["phy.k"]                = [[Konstanto de Boltzmann.]],
["phy.eps0"]             = [[Elektra konstanto.]],
["math.e"]               = [[Bazo de la natura logaritmo.]],
["phy.h"]                = [[Konstanto de Planck.]],
["math.pi"]              = [[Ratio de cirkvarmo de rondo al ĝia diametro.]],
["add(sName,value[,sUnits])"] = [[Krei novan konstanton.]],
["phy.mu0"]              = [[Magneta konstanto.]],
["phy.R"]                = [[Universaa gaso konstanto.]],
["astro.ly"]             = [[Unu uma jaro.]],
},
---------- numeric.lua ----------
Num = {
["__module__"]           = [[Grupo de funkcioj por la numeraj kalkuloj. Toleremo estas difinita per TOL.]],
["solve(fn,dA,dB)"]      = [[Trovu la radiko de ekvacio fn(x)=0 en la intervalo [a,b].]],
["Newton(fn,d0)"]        = [[Trovu la radiko de ekvacio uzante la metodon de Newton, x0 estas komenca proksimiĝo.]],
["TOL[=0.001]"]          = [[Precizeco de kalkuloj.]],
["der(fn,x)"]            = [[Kalkuli derivaĵon de la funkcio.]],
["trapez(fn,a,b)"]       = [[Kalkuli la integralo uzante la metodon de trapezoj.]],
["ode45(fn,tDelta,y0[,param])"] = [[Nombra solvo de ODE.
Se la paŝo dx ne estas specifita, tiam ĝi estas kalkulita aǔtomate laǔ la postulata precizeco.
Redonas liston de interaj punktoj kaj rezulton yn.]],
},
---------- lens.lua ----------
Lens = {
["__module__"]           = [[Matricaj metodoj en paraksiala optiko.]],
["afocal(dm)"]           = [[Liveras la matricon por la afoka sistemo.]],
["ref(dr,dn1,dn2)"]      = [[Liveras la matricon por refrakto.]],
["isUnit(L)"]            = [[Kontrolante ĉu matrico estas identeco.]],
["mirror(dr,dn)"]        = [[Liveras la matricon por la spegulo.]],
["trans(dt,dn)"]         = [[Liveras la matricon por movi la trabon.]],
["solve(fn,ind,d0)"]     = [[Determinu la kondiĉojn sub kiuj la komponanto kun donita indekso estas egala al 0.]],
["thin(df)"]             = [[Liveras la matricon por maldika lenso kun la donita fokusa distanco.]],
["cardinal(L[,dn1=1,dn2=1])"] = [[Determini la pozicion de la kardinalaj punktoj de la sistemo rilate al la eniga kaj eligo ebenoj.]],
["inv(L)"]               = [[Inversa matrico.]],
["copy(L)"]              = [[Kreu kopion de objekto.]],
["Lens(t)"]              = [[Kreu komponanton kun la donitaj parametroj.]],
["det(L)"]               = [[Matrica determinanto.]],
--["operations"]           = [[L1 == L2, L1 .. L2]],
["transform(L,dy,dV)"]   = [[Trovu la transformon de la pozicio 'dy' kaj optika angulo 'dV' (= v*n) de la trabo per la sistemo. Same kiel L(dy,dV).]],
},
---------- gnuplot.lua ----------
Gp = {
["__module__"]           = [[Interfaco por laborado kun Gnuplot de Lua.]],
["show(G)"]              = [[Konstrui funkcian grafeon. Parametroj estas specifita en Lua table G.]],
["tplot(v,[x,y1,y2..])"] = [[Grafikaĵo surbaze de tabelo, matrico aŭ dosiero. Laŭvolaj elementoj difinas kolumnojn.]],
["copy(G)"]              = [[Krei kopion la parametroj de grafeo.]],
["add(tCurve)"]          = [[Aldonu novan funkcion al la grafiko.]],
["tpolar(v,[x,y1,y2..])"] = [[Polusa intrigo por tabelo, matrico aŭ dosiero. Laŭvolaj elementoj difinas kolumnojn.]],
["keys"]                 = [[  Priskribo de parametroj:
{math.sin, title='sin'}                      -- grafeon por Lua funkcio, aldoni priskribon
{'sin.dat', ln=1, lw=2}                      -- grafeon por datumndosieron, specifi koloron kaj dikecon
{tbl, with='lines'}                          -- grafeon por Lua tabulo, uzi linioj
title='Graph name'                           -- apudskribo
xrange={0,10}                                -- gamo x de 0 ĝis 10
yrange={-2,2}                                -- gamo y
zrange={0,5}                                 -- gamo z
trange={1,2}                                 -- gamo por parametria funkcio
xtitle='A', ytitle='B'                       -- aksaj nomoj
terminal='jpeg'                              -- savi la rezulton kiel jpeg bildon
output='my_plot.jpg'                         -- dosiernomo
parametric=true                              -- parametria grafeo
size='square'                                -- kvadrata bildo
polar=true                                   -- uzi polusa grafeo
grid='polar'                                 -- polusa koordinata sistemo
legend=false                                 -- malebligi priskribon
surface=true                                 -- tridimensia grafeo
samples=200                                  -- nombro da punktoj
raw='set pm3d'                               -- fiksi la Gnuplot parametrojn permane 
]],
["Gp()"]                 = [[Krei tablon por 'Gnuplot'.]],
["polarplot(x1,y1,[nm,[x2,y2..]])"] = [[Grafikaĵo en polusaj koordinatoj. 'x' - listo de nombroj, 'y' - listo aŭ funkcio, 'nm' - kurba nomo.]],
["tsurf(v,[x1,y1,z1,z2..])"] = [[Grafikaĵo surfacan funkcion surbaze de tablo, matrico aŭ dosiero. Laŭvolaj elementoj difinas kolumnojn.]],
["surfplot(x1,y1,fn1,[nm,[x2,y2..]])"] = [[Grafikaĵo surfacan funkcion. 'x' kaj 'y' estas listoj de nombroj, 'fn' estas funkcio de du argumentoj, 'nm' estas la nomo.]],
["plot(x1,[y1,[nm,[x2,..]]])"] = [['x' - listo de nombroj, 'y' - listo aŭ funkcio, 'nm' - kurba nomo.]],
},
---------- polynomial.lua ----------
Poly = {
["__module__"]           = [[Operacioj kun polinomoj.]],
["spline(tX,tY)"]        = [[Kuba spline datuminterpolado. Revenas tabelon kun polinomoj.]],
["lagrange(tX,tY)"]      = [[Trovu interpola polinomon en la formo de Lagrange.]],
--["comparison"]           = [[a==b, a~=b]],
["lin(tX,tY[,v0=0,vN=v0])"] = [[Lineara dateninterpolado. Revenas tabelon kun polinomoj.]],
["ppval(tP,d[,N]"]       = [[Revenas valoron de peceta polinomo en la punkto, kaj la polinoma indekso.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
["build(root1,root2,...)"] = [[Kalkuli la polinomon per konataj radikoj.]],
["copy(P)"]              = [[Krei kopion de polinomo.]],
["roots(P)"]             = [[Trovi la realajn kaj kompleksajn radikojn de polinomo.]],
["Poly(...)"]            = [[Krei novan poinoman.]],
["der(P)"]               = [[Trovi la derivaĵon de polinomo.]],
["real(P)"]              = [[Trovi la realajn radikojn de polinomo.]],
["int(P[,d0=0])"]        = [[Trovi la integralo de polinomo, x0 - libera faktoro.]],
["val(P,v)"]             = [[Kalkulu la valoro de polinomo P je koordinato x. La sama al P(x).]],
["fit(tX,tY,N)"]         = [[Trovi la polinoman alproksimiĝon por la kurbo.]],
["taylor(v,vF[,vF',vF''..])"] = [[Akiru Taylor-serialon.]],
},
---------- array.lua ----------
Arr = {
["__module__"]           = [[Manipuladoj kun la tabelo de elementoj. Indeksado komencoj de unu. Indico estas tablo.]],
["next(A)"]              = [[Revenas funkcion por preterpasi ĉiujn indicojn kaj valorojn.]],
["map(A,fn)"]            = [[Aplikas funkcion al la tabelo. Redonas novan tabelon.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, -a, a^b]],
["apply(fn, ...)"]       = [[Aplikas funkcion al la valoroj de du tabeloj. Redonas novan tabelon.]],
["Arr(tSize)"]           = [[Krei malplenan tabelon. Dimensio estas tablo.]],
["set(A,tInd,v)"]        = [[Aldonu valoro al la tabelo. Indico estas tablo.]],
["concat(A1,A2,iAxis)"]  = [[Kombini tabeloj laǔ donita akso.]],
--["comparison"]           = [[a == b, a ~= b]],
["rand(tSize)"]          = [[Redonas tabulon de hazarda nombroj inter 0 kaj 1.]],
["get(A,tInd)"]          = [[Redonai elementon de tabelo.]],
["dim(A)"]               = [[Redonas dimension de la tabelo.]],
["sub(A,tInd1,tInd2)"]   = [[Redonas la parton de tabelo limigita de 2 indicoj.]],
["capacity(A)"]          = [[Maksimuma nombro da elementoj en la tabelo. La sama kiel #A.]],
["copy(A)"]              = [[Kreu kopion de la tabelo.]],
["isEqual(A1,A2)"]       = [[Kontroli egalecon de dimensioj.]],
},
---------- graph.lua ----------
Graph = {
["__module__"]           = [[Operacioj kun grafeoj. Nodo estas sola nomo. Rando estas tabulo de du nomoj.]],
["isComplete(G)"]        = [[Kontroli plenecon de la grafeo.]],
["pathBF(G,vStart[,vGoal])"] = [[Trovi la plej mallongan vojon uzanta Bellman-Ford algoritmon.]],
["pathD(G,vStart[,vGoal])"] = [[Trovi la plej mallongan vojon uzanta Dijkstra algoritmon.]],
["nodes(G)"]             = [[Listo de nodoj.]],
["dfs(G,vStart,vGoal)"]  = [[Profundo unua serĉo. Reveni rezulto kaj trovita vojon.]],
["bfs(G,vStart,vGoal)"]  = [[Larĝa unua serĉo. Reveni rezulto kaj trovita vojon.]],
["isDirected(G)"]        = [[Kontroli se la grafeo havas direktajn randojn.]],
["Graph(t)"]             = [[Krei novan grafeon.]],
["add(G,v)"]             = [[Aldoni novan nodo aŭ rando.]],
["isWeighted(G)"]        = [[Kontrolu se la randoj havas pezon malsama al 1.]],
["remove(G,v)"]          = [[Forigi nodo aŭ rando de la grafeo.]],
["isNegative(G)"]        = [[Kontrolu se la randoj havas negativaj pezoj.]],
["edges(G)"]             = [[Listo de grafeaj randoj.]],
["copy(G)"]              = [[Akiri copion de la grafeo.]],
},
---------- special.lua ----------
Spec = {
["__module__"]           = [[Specialaj matematikaj funkcioj.]],
["gammainc(x,N[,type='lower'])"] = [[Nekompleta gamma funkcio, P (type=lower) or Q (type=upper).]],
["besselj(N,x)"]         = [[Bessel-funkcio de la unua speco.]],
["expint(n,x)"]          = [[Eksponenta integralo En(x).]],
["dawson(x)"]            = [[Dawson integralo.]],
["gammp(N,x)"]           = [[Nekompleta gama-funkcio P(N,x).]],
["besselk(N,x)"]         = [[Modifita Bessel-funkcio Kn(x).]],
["erf(x)"]               = [[Eraro funkcio.]],
["betainc(x,a,b)"]       = [[Nekompleta beta-funkcio Ix(a,b).]],
["bessely(n,x)"]         = [[Bessel-funkcio de la dua speco.]],
["betaln(z,w)"]          = [[Naturala logaritmo de la beta-funkcio.]],
["erfc(x)"]              = [[Kompletiga eraro funkcio.]],
["besseli(N,x)"]         = [[Modifita Bessel-funkcio In(x).]],
["gammaln(z)"]           = [[Naturala logaritmo de la gama-funkcio.]],
["legendre(n,x)"]        = [[Listo de la Legendre polinomoj koeficientoj.]],
["gamma(z)"]             = [[Gama-funkcio.]],
["gammq(N,x)"]           = [[Nekompleta gama-funkcio Q(N,x) = 1-P(N,x).]],
["beta(z,w)"]            = [[Beta-funkcio.]],
},
---------- rational.lua ----------
Rat = {
["__module__"]           = [[Komputadoj kun la raciaj nombroj.]],
--["arithmetic"]           = [[R1+R2, R1-R2, R1*R2, R1/R2, -R, R1^R2} ]],
["De(R)"]                = [[Denominatoro de racia nombro.]],
["Nu(R)"]                = [[Numeratoro de racia nombro.]],
["gcd(va,vb)"]           = [[Plej granda komuna divizoro.]],
--["comparison"]           = [[R1<R2, R1<=R2, R1>R2, R1>=R2, R1==R2, R1~=R2]],
["copy(R)"]              = [[Kreu kopion de la racia nombro.]],
["val(R)"]               = [[Revenas racia nombro en dekuma formo.]],
["Rat(m[,n=1])"]         = [[Krei novan racian nombron. m - numeratoro, n - denominatoro.]],
},
---------- quaternion.lua ----------
Quat = {
["__module__"]           = [[Operacioj kun kvaternionoj.]],
["rotate(Q,vec)"]        = [[Apliki kvaternionon por turni la vektoron.]],
["toRot(Q)"]             = [[Akiru egalan turnan matricon.]],
--["comparison"]           = [[a == b, a ~= b]],
["fromAA(fAng,vAxe)"]    = [[Krei quaternionon por angulo kaj akso de rotacio.]],
["fromRot(M)"]           = [[Konverti rotacia matrico al kvaterniono.]],
["toAA(Q)"]              = [[Akiri angulon kaj akson de rotacio.]],
--["arithmetic"]           = [[a + b, a - b, a * b, a ^ k, -a]],
["slerp(Q1,Q2,f)"]       = [[Sfera linea interpolado.]],
["Quat(t={0,0,0,0})"]    = [[Krei novan kvaternionon.]],
["copy(t)"]              = [[Krei kopion de la kvaterniono.]],
["abs(Q)"]               = [[Valoro de la normo.]],
["conj(Q)"]              = [[Konjugacio.]],
["mat(Q)"]               = [[Ekvivalenta matrica reprezentado.]],
["inv(Q)"]               = [[Reversa kvaterniono.]],
["real(Q)"]              = [[Reala parto de la kvaterniono (la sama kiel Q.w)).]],
["imag(Q)"]              = [[Akiri imaginan parton.]],
["normalize(Q)"]         = [[Faru unuo-kvaterniono.]],
},
---------- stat.lua ----------
Stat = {
["__module__"]           = [[Statistikaj kalkuloj. Datumoj devas esti reprezentita kiel tablo Lua.]],
["min(t)"]               = [[La plej malgranda nombro kaj ĝia indekso.]],
["freq(t)"]              = [[Revenas tablon kun la oftecoj de elementoj.]],
["median(t)"]            = [[Meza de la listo.]],
["max(t)"]               = [[La plej granda nombro kaj ĝia indekso.]],
["tpdf(d,N)"]            = [[Dissendo denseco de la Studento.]],
["tcdf(d,N)"]            = [[Akumula distribuo-funkcio de la Studento.]],
["harmmean(t[,tw])"]     = [[Harmona meznombro.]],
["histcounts(X[,rng=10])"] = [[Distribuado de nombroj per intertempoj. La gamo povas esti aro kun nombro aŭ listo de limoj.]],
["moment(N,t[,tw])"]     = [[Momento de t kun N ordo, tw estas listo de pezoj.]],
["geomean(t[,tw])"]      = [[La geometria meznombro.]],
["mean(t[,tw])"]         = [[Kalkuli averaĝo. Pezoj povas esti prenita en konto.]],
["std(t[,tw])"]          = [[Norma devio kaj vario. Pezoj povas esti prenita en konto.]],
["sum(t)"]               = [[Kalkuli sumon de ĉiuj elementoj.]],
},
---------- asciiplot.lua ----------
Ap = {
["__module__"]           = [[Vidigo de datumoj kun pseŭdografioj.]],
["Ap(dwidth,dheight)"]   = [[Kreu novan diagramon.]],
["plot(F,...)"]          = [[Montru argumentojn 't', 't1,t1', 'fn,nm', 'fn1,fn2' ktp.]],
["addPoint(F,dx,dy,s)"]  = [[Aldonu punkton (dx,dy) per simbolo 's'.]],
["tplot(F,t[,tOpt={}])"] = [[Vidigo de tabelaj datumoj, vi povas specifi la kolumnombrojn.]],
["scale(F,factor)"]      = [[Skali la diagramon rilate al la defaŭlta grandeco.]],
["addString(F,ir,ic,s)"] = [[Aldonu vorton ĉe donita pozicio.]],
["reset(F[,bAxis=true,bLimits=true])"] = [[Preparu malplenan kanvason, difinu elementojn por montri.]],
["concat(...)"]          = [[Horizontala kuniĝo de grafikaĵoj de egala alteco.]],
["addPose(F,ir,ic,s)"]   = [[Aldonu signon s ĉe la donita pozicio.]],
["copy(F)"]              = [[Kreu kopion de objekto.]],
},
---------- matrix.lua ----------
Mat = {
["__module__"]           = [[Operacioj kun matricoj. La matricoj estas maldensa defaǔlte.]],
["size(M)"]              = [[Reveni numbron de vicoj kaj kolumnoj.]],
["fill(iRows,iCols,fn)"] = [[Kreu matrico uzante la funkcio fn(r,c).]],
["copy(M)"]              = [[Krei kopion de la matrico.]],
["det(M)"]               = [[Matrico determinanto.]],
["map(M,fn)"]            = [[Apliki la funkcion fn(row[,col,val]) al ĉiuj elementoj, redoni novan matricon.]],
["norm(M)"]              = [[Eŭklida normo.]],
["zeros(rows[,cols=rows])"] = [[Krei nula matrico.]],
["inv(M)"]               = [[Redonas la inversa matrico.]],
["Mat(...)"]             = [[Krei novan matricon de la listo de vicoj (tabloj).]],
["chol(M)"]              = [[Ĉoleska transformo de pozitiva simetria matrico.]],
["dot(V1,V2)"]           = [[Skalara produkto de du 3-elementa vektoroj.]],
["cross(V1,V2)"]         = [[Kruco produkto de du 3-elementa vektoroj.]],
["lu(M)"]                = [[LU transformo de la matrico. Redonas L,U kaj P valoroj.]],
["eye(iRows[,iCols=iRows,val=1])"] = [[Krei identeca matrico.]],
["diag(M[,n=0])"]        = [[Ĉerpti la diagonalajn elementojn aǔ krei novan matricon kun donita diagonalo. n estas delokigo.]],
["reshape(M,iRows[=size],iCols[=1])"] = [[Ŝanĝu matricon.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["transpose(M)"]         = [[Redonas la transposta matrico. La sama al T().]],
["pinv(M)"]              = [[Redonas pseǔdon-inversa matrico.]],
["concat(M1,M2,sDir)"]   = [[Kunmeti du matricoj, dir='h' - en horizontala directo, dir='v' - in vertikala direkto.
Uzi M1 .. M2 por horizontala kunmeto, kaj M1 // M2 por vertikala.]],
["ones(iRows[,iCols=iRows,val=1])"] = [[Kreu matricon plenigita de donita nombro.]],
["tr(M)"]                = [[Spuro de matrico.]],
["randi([M],N,[rows],[cols=rows])"] = [[Krei matricon de entjeraj nombroj inter 1 kaj N.]],
["randn(iRows[,iCols=iRows])"] = [[Krei matricon de normale hazardaj nombroj kun nula mezumo kaj varieco 1.]],
["table(M)"]             = [[Konverti al la simpla Lua tablo.]],
["apply(fn,M1,M2,...)"]  = [[Apliki la funkcion al ĉiu elemento de matricoj.]],
["rand(iRows[,iCols=iRows])"] = [[Krei matricon de hazardaj nombroj inter 0 kaj 1.]],
["rref(M)"]              = [[PGaǔsa transformo.]],
["rank(M)"]              = [[Trovi rangon de la matrico.]],
--["comparison"]           = [[a==b, a~=b]],
},
}