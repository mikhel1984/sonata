---------- locale/eo.lua ----------

return {
----------
language = 'Esperanto',
authors  = [[Stanislav Mikhel]],
---------- dialog ----------
Dialog = {
["intro"]                  = [[-------- help([functio]) = akiri helpon -----------
---------- use([modulo]) = piliigi la funcionalidad
----------------- quit() = finu -------------------
]],
["cmd_rm"]                 = [[Malplenigu la liston de notoj]],
["cmd_trace"]              = [[Profilante la funkcion]],
["cmd_log"]                = [[Ŝaltu/malŝaltu logilon]],
["cmd_q"]                  = [[Eliru la programon]],
["cmd_ls"]                 = [[Montru la liston de notoj]],
["cmd_o"]                  = [[Malfermu la noto-dosieron]],
["cmd_N"]                  = [[Iru al la noto N]],
["cmd_show"]               = [[Presu la sekvan aŭ la donitan noton]],
["cmd_help"]               = [[Montru ĉi tiun helpon]],
["done"]                   = [[Preta.]],
["cmd_time"]               = [[Taksi mezan tempon de ekzekuto]],
--["cmd_shell"]              = [[Execute command in shell]],
},
---------- asciiplot.lua ----------
asciiplot = {
["F:axes() --> tbl"]       = [[Akiru informojn {size, log, range, pose} por ĉiu akso.]],
[":concat(F1, F2) --> str"] = [[Horizontala kuniĝo de grafikaĵoj de egala alteco.]],
["F:legend(str_t)"]        = [[Ĝisdatigu la legendon.]],
["F:addString(row_N, col_N, str)"] = [[Aldonu vorton ĉe donita pozicio.]],
["F:addPose(row_N, col_N, char_s='*')"] = [[Aldonu signon ĉe la donita pozicio.]],
["F:contour(fn, {level=5, view='XY'}) --> nil|str"] = [[Trovu konturojn de projekcio por funkcio fn(x,y). Vidoj: XY, XZ, YZ, XYZ.]],
["F:setZ(par_t)"]          = [[Ĝisdatigu Z-aksan gamon.]],
["F:copy() --> cpy_F"]     = [[Kreu kopion de objekto.]],
["__module__"]             = [[Vidigo de datumoj kun pseŭdografioj.]],
["F:reset()"]              = [[Preparu malplenan kanvason.]],
["Plot(...)"]              = [[Montru argumentojn 't', 't1,t1', 'fn,nm', 'fn1,fn2' ktp]],
["F:setY(par_t)"]          = [[Ĝisdatigu Y-aksan gamon.]],
["F:tplot(data_t, cols_t={x=1, polar=false})"] = [[Vidigo de tabelaj datumoj, vi povas specifi la kolumnombrojn.]],
["F:bar(t, y_N=2, x_N=1)"] = [[Bardiagramo.Plot bar diargram for data. vy estas aŭ indekso en t aŭ tabelo de y-j.]],
["F:scale(factor_d | src_F)"] = [[Skali la diagramon rilate al la komenca grandeco.]],
["F:plot(...)"]            = [[Vidigo de tabelaj datumoj, vi povas specifi la kolumnombrojn.]],
["F:setX(par_t)"]          = [[Ĝisdatigu X-aksan gamon.]],
["F:title(str)"]           = [[Agordu novan titolon.]],
[" (width_N=73, height_N=21) --> new_F"] = [[Kreu novan diagramon.]],
["F:addPoint(x_d, y_d, char_s='*')"] = [[Aldonu punkton (x,y) per simbolo.]],
},
---------- bigint.lua ----------
bigint = {
["B:float() --> num"]      = [[Prezenti grandan entjeron en nombra formo se eble.]],
[":lcm(...) --> B"]        = [[Malplej komuna oblo.]],
["__module__"]             = [[Operacioj kun la arbitraj longaj entjeroj.]],
["B:F() --> B!"]           = [[Revenas faktorialon de la ne indika entjera nombro.]],
[":gcd(...) --> B"]        = [[Plej granda komuna faktoro.]],
["B:factorize() --> prime_t"] = [[Listo de primaj faktoroj.]],
["B:subF() --> !B"]        = [[Subfactorialo.]],
["B:isPrime(method_s=nil) --> bool"] = [[Kontrolante numeron por simpleco. Metita metodo 'Fermat' por usi la etan teoremon de Fermat.]],
[":ratF(num_B, denom_B) --> num!/denom!"] = [[Proporcio de faktorialoj num!/denom!.]],
[":C(n, k, isRepeat=false) --> combinations_B"] = [[Nombro de kombinaĵoj C(n,k).]],
["B:random() --> rand_B"]  = [[Hazarda nombro de 0 al B.]],
["B:FF() --> B!!"]         = [[Duobla faktorialo.]],
["B:sign() --> int"]       = [[Revenas +1/0/-1.]],
["B:digits(N=10) --> tbl"] = [[Radikso por nombro.]],
["B:abs() --> abs_B"]      = [[Absoluta valoro.]],
[":P(n, k, isRepeat=false) --> permutaions_B"] = [[Nombro de permutaĵoj sen ripetoj.]],
--[" (num|str|tbl) --> new_B"] = [[Create number from integer, string or table.]],
},
---------- complex.lua ----------
complex = {
["C:conj() --> conj_C"]    = [[Kompleksa konjugata nombro. Egale al ~C.]],
["C:atan() --> y_C"]       = [[Tangentarko de complexa nombro.]],
["C:cosh() --> y_C"]       = [[Hyperbola kosinusarko de kompleksa nombro.]],
["C:im() --> var"]         = [[Kompleksa parto.]],
["C:acos() --> y_C"]       = [[Kompleksa kosinusarko.]],
["C:sinh() --> y_C"]       = [[Hyperbola sinuso de kompleksa nombro.]],
[" (re=0, im=0) --> new_C"] = [[Krei novan kompleksan nombron.]],
["__module__"]             = [[Operacioj kun la kompleksaj nombroj.]],
["C:asinh() --> y_C"]      = [[Hyperbola sinusarko de kompleksa nombro.]],
["C:sqrt() --> y_C"]       = [[Kvadrata radiko. Rezulto povas esti vera aǔ imaginara nombro.]],
["C:atanh() --> y_C"]      = [[Hyperbola tangentarko de kompleksa nombro.]],
["C:arg() --> float"]      = [[Revenas la argumenton de kompleksa nombro.]],
["C:acosh() --> y_C"]      = [[Hyperbola kosinusarko de kompleksa nombro.]],
["C:abs() --> float"]      = [[Revenas la modulo de kompleksa nombro.]],
["C:tan() --> y_C"]        = [[Tangento de kompleksa nombro.]],
["C:asin() --> y_C"]       = [[Sinusarko de kompleksa nombro.]],
[":cis(phy) --> cos(phy)+i*sin(phy)"] = [[Geometria prezento por kompleksa nombro.]],
["C:tanh() --> y_C"]       = [[Hyperbola tangentarko de kompleksa nombro.]],
["C:sin() --> y_C"]        = [[Sinusarko de kompleksa nombro.]],
["C:re() --> var"]         = [[Reala parto.]],
[":i(x=1) --> new_C"]      = [[Redonas v*i.]],
["C:log() --> y_C"]        = [[Kompleksa logaritmo.]],
["C:exp() --> y_C"]        = [[Kompleksa eksponento.]],
["C:cos() --> y_C"]        = [[Kompleksa kosinusarko.]],
},
---------- const.lua ----------
const = {
[".phy.e --> 1.6E-19"]     = [[Electrono ŝarĝo.]],
[".phy.sigma --> 5.6E-8"]  = [[Konstanto de Stefan-Boltzmann.]],
[".phy.NA --> 6E23"]       = [[Nombro de Avogadro.]],
[".math.phi --> 1.62"]     = [[Ora proporcio.]],
[".astro.pc --> 3.1E16"]   = [[Unu parsek.]],
[":remove(name_s) --> bool"] = [[Forigi konstantan.]],
[".astro.ly --> 9.5E15"]   = [[Unu uma jaro.]],
[".phy.Rinf --> 1.1E7"]    = [[Konstanto de Rydberg.]],
[".phy.Vm --> 2.2E-2"]     = [[Unu mole de ideala gaso volumo.]],
[".phy.g --> 9.81"]        = [[Senpaga akcelo.]],
[".astro.au --> 1.5E11"]   = [[Aastronomia unuo.]],
[".phy.G --> 6.7E-11"]     = [[Gravita konstanto.]],
[":add(name_s, value, units_s=nil)"] = [[Krei tempan konstanton.]],
[".phy.k --> 1.4E-23"]     = [[Konstanto de Boltzmann.]],
[".math.e --> 2.72"]       = [[Bazo de la natura logaritmo.]],
["__module__"]             = [[Iuj konstantaj valoroj.]],
[".phy.h --> 6.6E-34"]     = [[Konstanto de Planck.]],
[".phy.eps0 --> 8.8E-12"]  = [[Elektra konstanto.]],
[".phi.Da --> 1.7E-27"]    = [[Atommasunuo.]],
[".phy.mu0 --> 1.2E-6"]    = [[Magneta konstanto.]],
[".phy.R --> 8.31"]        = [[Universala gaso konstanto.]],
[".phy.c --> 3E8"]         = [[Rapido de lumo.]],
--[".math.gamma --> 0.577"]  = [[Euler-Mascheroni constant.]],
--[".astro.k --> 0.017"]     = [[Gaussian gravitational constant.]],
},
---------- data.lua ----------
data = {
[":geomean(data_t, weigh_t=nil) --> num"] = [[La geometria meznombro.]],
[":min(data_t) --> var, ind_N"] = [[La plej malgranda nombro kaj ĝia indekso.]],
[":is(data_t, fn|str) --> weigh_t"] = [[Trovu pezon uzante bulean funkcion.]],
[":filter(in_t, fn|str|tbl) --> out_t"] = [[Akiru rezulton de la tabelfiltrado. Kondiĉo estas aŭ bulea funkcio aŭ tabelo de pezoj.]],
[":mean(data_t, wight_t=nil) --> num"] = [[Kalkuli averaĝo. Pezoj povas esti prenita en konto.]],
[":cov2(xs_t, ys_t) --> float"] = [[Trovu kunvariancon por du vektoroj.]],
[":isNot(data_t, fn|str) --> weigh_t"] = [[Trovu inversan pezon uzante bulean funkcion.]],
[":freq(data_t) --> tbl"]  = [[Revenas tablon kun la oftecoj de elementoj.]],
[":histcounts(data_t, rng_v=10) --> sum_t, edges_t"] = [[Distribuado de nombroj per intertempoj. La gamo povas esti aro kun nombro aŭ listo de limoj.]],
["__module__"]             = [[Prilaborado de datumoj kaj statistiko.]],
[":max(data_t) --> var, ind_N"] = [[La plej granda nombro kaj ĝia indekso.]],
[":std(data_t, weight_t=nil) --> num"] = [[Norma devio kaj vario. Pezoj povas esti prenita en konto.]],
[":csvwrite(file_s, data_t, delim_s=',')"] = [[Savi Lua tabulon kiel dosieron kun delimitilo disigita datumojn.]],
[":T(src_t) --> new_T"]    = [[Akiru referencon al 'transmetita' tabelo.]],
[":ref(src_t, begin_N=1, end_N=#src_t) --> new_R"] = [[Akiru referencon al la gamo de elementoj.]],
[":reduce(fn|str, data_t, initial=nil) --> var"] = [[Apliki funkcion al ĝia antaŭa rezulto kaj sekva elemento.]],
[":harmmean(data_t, weigh_t=nil) --> num"] = [[Harmona meznombro.]],
[":copy(t) --> copy_t"]    = [[Faru profundan kopion de la listo.]],
[":range(begin_d, end_d, step_d=±1) --> new_R"] = [[Faru tabelon kun vico da nombroj.]],
[":zip(fn|str, ...) --> tbl"] = [[Sinsekve apliki funkcion al la listo de vektoroj.]],
[":md(data_t, names_t=nil, row_fn=nil) --> str"] = [[Markdown-simila tabloreprezento. Vicoj povas esti procesitaj per funkcio row_fn(t)-->t.]],
[":median(data_t) --> num"] = [[Mezo de la listo.]],
[":sum(data_t) --> var"]   = [[Kalkuli sumon de ĉiuj elementoj.]],
[":Fn(expr_s, arg_N=2) --> fn"] = [[Generu funkcion el esprimo de x1, x2 ktp.]],
[":moment(order_N, data_t, weigth_t=nil) --> num"] = [[Momento de t kun N ordo, tw estas listo de pezoj.]],
[":cov(data_t) --> cov_M"] = [[Trovu kunvarianca matrico.]],
[":csvread(file_s, delim_s=',') --> tbl"] = [[Legas datumojn disigitaj per delimitilo en la dosiero, revenas Lua tabulon.]],
},
---------- geodesy.lua ----------
geodesy = {
["E.xyzInto[E2] --> fn"]   = [[Revenas funkcion por konverti koordinatojn de sistemo A al B.]],
["E.blhInto[E2] --> fn"]   = [[Revenas funkcion por konverti geodeziajn koordinatojn de sistemo A al B per la Molodensky metodo.]],
[":grav(latitude_d) --> acceleration"] = [[Internacia gravita formulo, angulo en gradoj.]],
["E:toXYZ(blh_t) --> xyz_t"] = [[Konvertado de geodeziaj koordinatoj al karteziaj koordinatoj.]],
[":deg2dms(deg_d) --> deg, min, sec"] = [[Revenas gradoj, minutoj kaj sekundoj por donita angulo.]],
[":hashEncode(coord_t, letter_N=6) --> hash_s"] = [[Trovu haŝvaloro por la donita punkto.]],
["E:solveInv(blh1_t, blh2_t) --> dist_d, az1_d, az2_d"] = [[Solvu inversan geodezian problemon, trovu distancon kaj azimutojn por du punktoj.]],
["E:solveDir(blh_t, az1_d, dist_d) --> blh_t, az2_d"] = [[Solvu rektan geodezian problemon, trovu duan punktan pozicion kaj ĝian orientiĝon se la unua punkto, azimuto kaj distanco estas donitaj.]],
["__module__"]             = [[Kunordigi transformoj kaj aliaj geodeziaj taskoj.]],
["E:toBLH(xyz_t) --> blh_t"] = [[Konvertas kartezajn koordinatojn al geodeziaj koordinatoj.]],
[":hashDecode(hash_s) --> coord_t, range_t"] = [[Trovu centran punkton kaj gamon de la zono.]],
--[":dms2deg(deg_d, min_d=0, sec_d=0) --> deg"] = [[Convert degrees, minutes and seconds to degrees.]],
--["E:into(E2, lin, rot, m)"] = [[Define transormation rules between ellipsoids.]],
--["E:utm2bl(utm_t) --> blh_t"] = [[Find Geodetic coordinates for the given UTM pose and zone.]],
--["E:bl2utm(blh_t) --> utm_t"] = [[Find UTM projection for the given coordinates.]],
--[" (param_t=nil) --> E"]   = [[Produce ellipsoid with the given params {'a', 'f'}.]],
},
---------- gnuplot.lua ----------
gnuplot = {
["G:show()"]               = [[Konstrui funkcian grafeon. Parametroj estas specifita en Lua table G.]],
["G:copy() --> cpy_G"]     = [[Krei kopion la parametroj de grafeo.]],
["G:add(curve_v)"]         = [[Aldonu novan funkcion al la grafiko.]],
[":polarplot(x1_t, y1_t, [nm_s, x2_t, y2_t,..])"] = [[Grafikaĵo en polusaj koordinatoj. 'x' - listo de nombroj, 'y' - listo aŭ funkcio, 'nm' - kurba nomo.]],
[":tpolar(var, [x_N, y1_N, y2_N,..])"] = [[Polusa intrigo por tabelo, matrico aŭ dosiero. Laŭvolaj elementoj difinas kolumnojn.]],
[".keys"]                  = [[  Priskribo de parametroj:
{math.sin, title='sin'}                      -- grafeon por Lua funkcio, aldoni priskribon
{'sin.dat', ln=1, lw=2}                      -- grafeon por datumndosieron, specifi koloron kaj dikecon
{tbl, with='lines'}                          -- grafeon por Lua tabulo, uzi linioj
title='Graph name'                           -- apudskribo
xrange={0,10}                                -- gamo x de 0 ĝis 10
yrange={-2,2}                                -- gamo y
zrange={0,5}                                 -- gamo z
trange={1,2}                                 -- gamo por parametria funkcio
xtitle='A', ytitle='B'                       -- aksaj nomoj
terminal='jpeg'                              -- savi la rezulton kiel jpeg bildon
output='my_plot.jpg'                         -- dosiernomo
parametric=true                              -- parametria grafeo
size='square'                                -- kvadrata bildo
polar=true                                   -- uzi polusa grafeo
grid='polar'                                 -- polusa koordinata sistemo
legend=false                                 -- malebligi priskribon
surface=true                                 -- tridimensia grafeo
samples=200                                  -- nombro da punktoj
raw='set pm3d'                               -- fiksi la Gnuplot parametrojn permane 
]],
[":tplot(var, [x_N, y1_N, y2_N,..])"] = [[Grafikaĵo surbaze de tabelo, matrico aŭ dosiero. Laŭvolaj elementoj difinas kolumnojn.]],
[" () --> new_G"]          = [[Krei tablon por 'Gnuplot'.]],
[":plot(x1_t, [y1_t, nm_s, x2_t,..])"] = [[Grafikaĵo surfacan funkcion. 'x' kaj 'y' estas listoj de nombroj, 'fn' estas funkcio de du argumentoj, 'nm' estas la nomo.]],
["__module__"]             = [[Interfaco por laborado kun Gnuplot de Lua.]],
[":surfplot(x1_t, y1_t, fn1, [nm_s, x2_t, y2_t,..])"] = [[Grafikaĵo surfacan funkcion. 'x' kaj 'y' estas listoj de nombroj, 'fn' estas funkcio de du argumentoj, 'nm' estas la nomo.]],
[":tsurf(var, [x_N, y_N, z1_N, z2_N,..])"] = [[Grafikaĵo surfacan funkcion surbaze de tablo, matrico aŭ dosiero. Laŭvolaj elementoj difinas kolumnojn.]],
},
---------- graph.lua ----------
graph = {
["G:dot(fname_s=nil) --> str"] = [[Revenas grafean strukturon en 'dot' notacio.]],
["G:addEdges(list_t)"]     = [[Importu randojn kaj pezojn el listo.]],
["G:isDirected() --> bool"] = [[Kontroli se la grafeo havas direktajn randojn.]],
["G:remove(n1, n2=nil)"]   = [[Forigi nodo aŭ rando de la grafeo.]],
["__module__"]             = [[Operacioj kun grafeoj. Nodo estas sola nomo. Rando estas tabulo de du nomoj.]],
["G:size() --> nodes_N"]   = [[Nombro de nodoj.]],
["G:toSvg(name_s)"]        = [[Konverti grafeon al SVG-bildo per Graphviz.]],
["G:isWeighted() --> bool"] = [[Kontrolu se la randoj havas pezon malsama al 1.]],
["G:edge(pair_t) --> weight_d|nil"] = [[Akiru pezon de la rando.]],
["G:addNodes(list_t)"]     = [[Importi nodojn el listo.]],
["G:nodes() --> node_t"]   = [[Listo de nodoj.]],
["G:copy() --> cpy_G"]     = [[Akiri copion de la grafeo.]],
["G:edges() --> edges_t"]  = [[Listo de grafeaj randoj.]],
["G:add(n1, n2=nil, w_d=1)"] = [[Aldoni novan nodo aŭ rando.]],
["G:isComplete() --> bool"] = [[Kontroli plenecon de la grafeo.]],
--[":concat(G_t) --> new_G"] = [[Combine graphs into one object.]],
--["G:isConnected() --> bool"] = [[Check if the graph is connected.]],
--["G:isTree() --> bool"]    = [[Check if the graph is tree.]],
--[" (params_t={}) --> new_G"] = [[Create graph. Parameters are {dir=bool, O|K|C|P=number|names_t, name='n'}.]],
--["G:nout(node) --> nodes_t"] = [[Find adjucent output nodes.]],
--["G:search(node1, node2, method_s) --> path_t|nil"] = [[Find path between two nodes. Methods are: bfs, dfs, dijkstra.]],
--["G:rand(edge_N)"]         = [[Fill graph with random edges.]],
--["G:matrix() --> adjacency_M, nodes_t"] = [[Get adjacency matrix and node list.]],
--["G:has(node) --> bool"]   = [[Check if the graph has the node.]],
--["G:randp(probability_d)"] = [[Fill graph with random edges.]],
--["G:nin(node) --> nodes_t"] = [[Find adjucent input nodes.]],
--["G:components() --> G_t"] = [[Get list of connected components.]],
--["G:isEuler() --> bool"]   = [[Check if the graph has Euler circle.]],
},
---------- lens.lua ----------
lens = {
["L:transform(yIn_d, VIn_d) --> yOut_d, VOut_d"] = [[Trovu la transformon de la pozicio 'dy' kaj optika angulo 'dV' (= v*n) de la trabo per la sistemo. Same kiel L(dy,dV).]],
["L:cardinal(nLft_d=1, nRht_d=1) --> points_t"] = [[Determini la pozicion de la kardinalaj punktoj de la sistemo rilate al la eniga kaj eligo ebenoj.]],
[":solve(fn, index_N, initial_d) --> found_d"] = [[Determinu la kondiĉojn sub kiuj la komponanto kun donita indekso estas egala al 0.]],
["L:beam(inCurv_d, inSize_d, lambda_d) --> outCurv_d, outSize_d"] = [[Trovu la elirradiason kaj kurbecon.]],
[":afocal(magn_d) --> L"]  = [[Liveras la matricon por la afoka sistemo.]],
["L:inv() --> inv_L"]      = [[Inversa matrico.]],
[" (A_d, B_d, C_d, D_d) --> new_L"] = [[Kreu komponanton kun la donitaj parametroj.]],
["__module__"]             = [[Matricaj metodoj en paraksiala optiko.]],
[":thin(focal_d) --> L"]   = [[Liveras la matricon por maldika lenso kun la donita fokusa distanco.]],
["L:copy() --> cpy_L"]     = [[Kreu kopion de objekto.]],
--[":gSize(waist_d, lambda_d, dist_d) --> curv_d, rad_d"] = [[Find Gaussian beam radius and curvature at some distance.]],
--["L:matrix() --> M"]       = [[Get elements as matrix.]],
--[":R(nin_d, rad_d, nout_d) --> L"] = [[Find refraction matrix for the given radius of surface and input and output refractive indeces.]],
--[":gParam(waist_d, lambda_d) --> div_d, range_d"] = [[Find divergence angle and Raileigh range for a Gaussian beam.]],
--[":T(dist_d, n_d=1) --> L"] = [[Find translation matrix for the given distance and refractive index.]],
--[":M(rad_d, n_d=1) --> L"] = [[Find reflection matrix for the given radius and refractive index.]],
--["L:emit(lambda_d) --> outCurv_d, outSize_d|nil, waist_d|nil, shift_d|nil "] = [[Find laser cavity output beam curvature. In the case of stable cavity also returns size radius, waist radius and its shift from the plane.]],
},
---------- main.lua ----------
main = {
["atan(x) --> y"]          = [[Inversa tangento.]],
["atanh(x) --> y"]         = [[Hiperbola tangentarco de nombro.]],
["PI --> 3.14"]            = [[Nombro pi.]],
["tan(x) --> y"]           = [[La tangento de nombro d.]],
["tanh(x) --> y"]          = [[Hiperbola tangento.]],
["log(x) --> y"]           = [[Natura logaritmo.]],
["exp(x) --> y"]           = [[La eksponenta dependeco.]],
["__module__"]             = [[Komputado sistemo bazita sur Lua.]],
["atan2(y_d, x_d) --> num"] = [[Tangentarco de nombro dy/dx kun signoj.]],
["asin(x) --> y"]          = [[La sinusarko de nombro d.]],
["asinh(x) --> y"]         = [[La hiperbola sinusarko de nombro d.]],
["quit()"]                 = [[Eliru la programon.]],
["sin(x) --> y"]           = [[La sinuso de nombro d.]],
["help(fn='main') --> str"] = [[Rigardu informojn pri funkcio, modulo aŭ elemento.]],
["Bind(obj, fn_name) --> fn"] = [[Envolvi funkcion por nomi ĝin sen objekto.]],
["use([module_s]) --> str|nil"] = [[Alvoku use('modulo') aǔ use{'moduloA','moduloB'} por akiri ekstrajn modulojn.]],
["Round(v, decimal_N=0) --> round_v"] = [[Rondu nombron, difini kvanto de dekumaj ciferoj.]],
["acos(x) --> y"]          = [[La kosinusarko de nombro d.]],
["acosh(x) --> y"]         = [[La hiperbola kosinusarko de nombro x.]],
["sqrt(x) --> y"]          = [[Kvadrata radiko.]],
["Map(fn, in_t) --> out_t"] = [[Taksi funkcion por ĉiu elemento de la tablo.]],
["cos(x) --> y"]           = [[La kosinuso de nombro d.]],
["sinh(x) --> y"]          = [[Hyperbola sinuso.]],
["cosh(x) --> y"]          = [[La hiperbola kosinuso de nombro d.]],
["abs(x) --> y"]           = [[La absoluta valoro.]],
--["hypot(...)"]             = [[Hypotenuse.]],
},
---------- matrix.lua ----------
matrix = {
[":ver(mat_t} --> mat_Ref"] = [[Vertikala kunkatego de listo de matricoj.]],
["M:rows() --> N"]         = [[Nombro da vicoj.]],
["M:det() --> num"]        = [[Matrico determinanto.]],
["M:map(fn) --> found_M"]  = [[Apliki la funkcion fn(row[,col,val]) al ĉiuj elementoj, redoni novan matricon.]],
[":V {...} --> mat_Ref"]   = [[Krei vektoron el listo de nombroj.]],
["M:vec() --> vec_Ref|nil"] = [[Referenco al vektoro.]],
["M:copy() --> cpy_M"]     = [[Krei kopion de la matrico.]],
["M:reshape(row_N=(rows*cols), col_N=1) --> mat_Ref"] = [[Ŝanĝu matricon.]],
["M:kronSum(M2) --> M⊕M2"] = [[Trovu Kronecker-sumon.]],
["M:T() --> transpose_Ref"] = [[Redonas la transposta matrico.]],
["M:lu() --> L_M, U_M, perm_M"] = [[LU transformo de la matrico. Redonas L,U kaj P valoroj.]],
["M:stars(cond_fn) --> str"] = [[Presu stelon kiam la kondiĉo estas vera.]],
["M:qr() --> Q_M, R_M"]    = [[QR transformo.]],
["M:svd() --> U_M, S_M, V_M"] = [[Unuopa valormalkomponaĵo, reveno U, S, V.]],
["M:rank() --> N"]         = [[Trovi rangon de la matrico.]],
["M:table() --> tbl"]      = [[Konverti al la simpla Lua tablo.]],
["V:normalize()"]          = [[Vektora normaligo.]],
["M:exp() --> new_M"]      = [[Matrica eksponento.]],
["M:kron(M2) --> M⊗M2"]  = [[Trovu Kronecker-produkton.]],
[":eye(row_N, col_N=row_N) --> M"] = [[Krei identeca matrico.]],
["M:rref() --> upd_M"]     = [[PGaǔsa transformo.]],
["M:pinv() --> inv_M"]     = [[Redonas pseǔdon-inversa matrico.]],
[":fill(row_N, col_N, val=1) --> M"] = [[Krei matricon kun la donita nombroj.]],
["M:chol() --> lower_M|nil"] = [[Ĉoleska transformo de pozitiva simetria matrico.]],
["M:H() --> conj_Ref"]     = [[Konjugaci transpon. ]],
["M:cols() --> N"]         = [[Nombro da kolumnoj.]],
["V:dot(V2) --> num"]      = [[Skalara produkto de du vektoroj.]],
["M:eig() --> vectors_M, values_M"] = [[Trovu proprajn vektorojn kaj proprajn valorojn (matricoj).]],
["__module__"]             = [[Operacioj kun matricoj. La matricoj estas maldensa defaǔlte.]],
["M:norm() --> num"]       = [[Eŭklida normo.]],
["M:tr() --> sum"]         = [[Spuro de matrico.]],
["M:diag() --> V"]         = [[Ĉerpti la diagonalajn elementojn.]],
[":zip(fn, ...) --> res_M"] = [[Apliki la funkcion al ĉiu elemento de matricoj.]],
[":zeros(row_N, col_N=row_N) --> M"] = [[Krei nula matrico.]],
["M:vectorize() --> V"]    = [[Faru vektoron kiel stakon de kolumnoj.]],
["V:cross(V2) --> M"]      = [[Kruco produkto de du 3-elementa vektoroj.]],
[":D(list_v, shift_N=0) --> M"] = [[Krei novan matricon kun donita diagonalo.]],
["M:minor(row_N, col_N) --> minor_M"] = [[Trovu minoran matricon.]],
["M:inv() --> inv_M"]      = [[Redonas la inversa matrico.]],
[":hor(mat_t) --> mat_Ref"] = [[Horizontala kunkatego de listo de matricoj.]],
--[" {row1_t, ...} --> new_M"] = [[Create matrix from list of strings (tables).]],
},
---------- numeric.lua ----------
numeric = {
[":der(fn, x_d) --> num"]  = [[Kalkuli derivaĵon de la funkcio.]],
[":solve(fn, low_d, up_d) --> num"] = [[Trovu la radiko de ekvacio fn(x)=0 en la intervalo [a,b].]],
[":newton(fn, x0_d) --> num"] = [[Trovu la radiko de ekvacio uzante la metodon de Newton, x0 estas komenca proksimiĝo.]],
["__module__"]             = [[Grupo de funkcioj por la numeraj kalkuloj. Toleremo estas difinita per TOL.]],
[":lim(fn, xn_d, isPositive=false) --> y"] = [[Taksi funkciolimon.]],
--[":int(fn, x1_d, x2_d) --> num"] = [[Get integral of the function. Improper integrals with infinite limits are possible.]],
--[=[[":ode(fn, interval_t, y0, {dt=del/20,exit=nil}) --> ys_t"] = [[Numerical approximation of the ODE solution.
List of parameters is optional and can includes time step and exit condition.
Return table of intermediate points in form {t, x(t)}.]],]=]
},
---------- polynomial.lua ----------
polynomial = {
["P:str(char_s='x') --> str"] = [[Bele presita por la polinomo.]],
["P:val(x) --> y"]         = [[Kalkulu la valoro de polinomo P je koordinato x. La sama al P(x).]],
[":char(M) --> P"]         = [[Trovu karakterizan polinomon por la matrico.]],
[":fit(xs_t, ys_t, order_N) --> P"] = [[Trovi la polinoman alproksimiĝon por la kurbo.]],
["P:copy() --> cpy_P"]     = [[Krei kopion de polinomo.]],
["P:int(x0_d=0) --> int_P"] = [[Trovi la integralo de polinomo, d0 - libera faktoro.]],
["P:der() --> der_P"]      = [[Trovi la derivaĵon de polinomo.]],
[":lagrange(xs_t, ys_t) --> P"] = [[Trovu interpola polinomon en la formo de Lagrange.]],
[" {.., v1, v0} --> new_P"] = [[Krei novan poinoman.]],
[":spline(xs_t, ys_t) --> Ps_t"] = [[Kuba spline datuminterpolado. Revenas tabelon kun polinomoj.]],
[":x() --> P"]             = [[Akiru objekton por reprezenti polinomon en formo de sumo k*x^n.]],
[":R(roots_t) --> P"]      = [[Kalkuli la polinomon per konataj radikoj.]],
[":taylor(x_d, fx_d, [fx'_d, fx''_d,..]) --> P"] = [[Akiru Taylor-serialon.]],
["__module__"]             = [[Operacioj kun polinomoj.]],
[":lin(xs_t, ys_t, before_d=nil, after_d=before_d) --> Ps_t"] = [[Lineara dateninterpolado. Revenas tabelon kun polinomoj.]],
["P:roots() --> roots_t"]  = [[Trovi la realajn kaj kompleksajn radikojn de polinomo.]],
},
---------- quaternion.lua ----------
quaternion = {
["Q:conj() --> conj_Q"]    = [[Konjugacio.]],
[":fromAA(angle_d, axis_t|V) --> Q"] = [[Krei quaternionon por angulo kaj akso de rotacio.]],
["Q:w() --> var"]          = [[Reala parto.]],
["Q:rotate(in_t|V) --> out_t"] = [[Apliki kvaternionon por turni la vektoron.]],
[":fromRot(M) --> Q"]      = [[Konverti rotacia matrico al kvaterniono.]],
["__module__"]             = [[Operacioj kun kvaternionoj.]],
["Q:slerp(end_Q, rat_f) --> rat_Q"] = [[Sfera linea interpolado.]],
[":fromRPY(roll_d, pitch_d, yaw_d) --> Q"] = [[Konverti Euler-anguloj al kvaterniono.]],
["Q:y() --> var"]          = [[y komponanto.]],
["Q:toAA() --> angle_d, axis_t|nil"] = [[Akiri angulon kaj akson de rotacio.]],
["Q:inv() --> inv_Q"]      = [[Reversa kvaterniono.]],
["Q:z() --> var"]          = [[z komponanto.]],
["Q:toRPY() --> roll_d, pitch_d, yaw_d"] = [[Konverti kvaterniono al Euler-anguloj.]],
["Q:toRot() --> M"]        = [[Akiru egalan turnan matricon.]],
["Q:abs() --> num"]        = [[Valoro de la normo.]],
["Q:x() --> var"]          = [[x komponanto.]],
--["Q:normalized() --> unit_Q"] = [[Return unit quaternion.]],
--[" {x, y, z, w} --> new_Q"] = [[Create new quaternion.]],
--["Q:exp() --> exp_Q"]      = [[Quaternion exponential.]],
--["Q:log() --> log_Q"]      = [[Quaternion logarithm.]],
},
---------- qubit.lua ----------
qubit = {
["G:S([ind1, ind2 ...]) --> upd_G"] = [[Aldonu S-pordegon.]],
["G:isUnitary() --> bool"] = [[Kontrolu ĉu la matrico estas unueca.]],
["G:Z([ind1, ind2 ...]) --> upd_G"] = [[Aldonu Z-pordegon.]],
[":combine([Q1, Q2, ...]) --> Q|nil"] = [[Faru sistemon de kvbitoj. Same kiel Q1..Q2.]],
["Q:meas(index=nil) --> Q"] = [[Qubit-ŝtata mezurado.]],
["G:P(phase, [ind1, ind2 ...] --> G"] = [[Aldonu pordegon por interŝanĝi 2 kvbitojn.]],
["Q:copy() --> cpy_Q"]     = [[Krei kopion de objekto.]],
["__module__"]             = [[Kvantuma komputika simulado.]],
["G:Y([ind1, ind2 ...]) --> upd_G"] = [[Aldonu Y-pordegon.]],
["G:fromTable(truth_t) --> upd_G"] = [[Faru pordegon el vertabelo.]],
[":gates(input_n) --> G"]  = [[Inicialigu pordegojn por la donita nombro da enigaĵoj.]],
["G:CNOT(slave_i, master_i) --> upd_G"] = [[Aldonu CNOT-pordegon.]],
["G:X([ind1, ind2 ...]) --> upd_G"] = [[Aldonu X-pordegon.]],
["Q:normalize()"]          = [[Faru normon egala al 1.]],
["G:SWAP(ind1, ind2) --> upd_G"] = [[Aldonu pordegon por interŝanĝi 2 kvbitojn.]],
["G:H([ind1, ind2 ...]) --> upd_G"] = [[Aldonu Hadamard-pordegon.]],
["G:T([ind1, ind2 ...]) --> upd_G"] = [[Aldonu T-pordegon.]],
["Q:prob(state_s) --> probatility_d"] = [[Akiru probablon por la donita stato.]],
["G:inverse() --> inv_G"]  = [[Akiru inversan sekvencon de pordegoj]],
["G:fromMatrix(M) --> upd_G"] = [[Faru pordegon el matrico.]],
["Q:matrix() --> M"]       = [[Akiru matrican reprezenton.]],
--[" (state_s|num) --> Q"]   = [[Create new qubit.]],
--["G:R(axis_s, angle, [ind1, ind2 ...] --> G"] = [[Add rotation for axis 'X', 'Y' or 'Z'.]],
--[":fromVector(V) --> Q"]   = [[Initialize qubit state from vector.]],
},
---------- random.lua ----------
random = {
["R:gamma(alpha_N, beta_d=1) --> float"] = [[Gama distribuo.]],
["R:poisson(lambda_d) --> int"] = [[Poisson-distribuo.]],
[":new() --> R"]           = [[Kreu la generatoran objekton.]],
["R:rayleigh(sigma_d) --> float"] = [[Rayleigh-distribuo.]],
["R:cauchy(mu_d=0, sigma_d=1) --> float"] = [[Cauchy-distribuo.]],
["R:exp(lambda_d=1) --> float"] = [[Eksponenta distribuo.]],
["R:norm(mean_d=0, dev_d=1) --> float"] = [[Normala distribuo.]],
["__module__"]             = [[Generatoroj de hazardaj nombroj.]],
["R:logistic(mu_d=0, sigma_d=1) --> float"] = [[Loĝistika distribuo.]],
["R:bytes(N) --> str"]     = [[Hazarda sekvenco de simboloj.]],
[" () --> float"]          = [[Hazarda nombro inter 0 kaj 1.]],
["R:shuffle(tbl)"]         = [[Ŝanĝu ordon de la elementoj.]],
["R:binomial(p_d, N) --> int"] = [[Binoma distribuo.]],
["R:int(lower_i=1, upper_i) -> int"] = [[Unuforma distribuo en la donita gamo.]],
["R:flip(p=0.5) --> bool"] = [[Hazarda bulea valoro.]],
["R:choice(tbl) --> element, index_N"] = [[Akiru hazardan tabelelementon.]],
["R:seed(N=os.time) --> R"] = [[Agordu generatoran semon.]],
["R:ipairs(tbl) --> iterator_fn"] = [[Hazarda iteratoro super la listo.]],
},
---------- rational.lua ----------
rational = {
["R:toCF() --> coeff_t"]   = [[Transformi racian nombron al daŭra frakcio.]],
["R:denom() --> var"]      = [[Denominatoro de racia nombro.]],
[":fromCF(coeff_t) --> R"] = [[Transformi daŭra frakcio al racian nombron.]],
["R:num() --> var"]        = [[Numeratoro de racia nombro.]],
[" (num, denom=1) --> new_R"] = [[Krei novan racian nombron.]],
[":from(src_f, err_f=1E-3) --> R"] = [[Taksas racian nombron el dekuma nombro.]],
["__module__"]             = [[Komputadoj kun la raciaj nombroj.]],
["R:float() --> num"]      = [[Revenas racia nombron en dekuma formo.]],
},
---------- special.lua ----------
special = {
[":gammq(order_N, x_d) --> num"] = [[Nekompleta gama-funkcio Q(N,x) = 1-P(N,x).]],
[":beta(z_d, w_d) --> num"] = [[Beta-funkcio.]],
[":erf(x_d) --> num"]      = [[Eraro funkcio.]],
[":bessely(order_N, x_d) --> num"] = [[Bessel-funkcio de la dua speco.]],
[":gammp(order_N, x_d) --> num"] = [[Nekompleta gama-funkcio P(N,x).]],
[":gammaln(x_d) --> num"]  = [[Naturala logaritmo de la gama-funkcio.]],
[":dawson(x_d) --> num"]   = [[Dawson integralo.]],
[":expint(pow_N, x_d) --> num"] = [[Eksponenta integralo En(x).]],
[":gamma(x_d) --> num"]    = [[Gama-funkcio.]],
[":besselk(order_N, x_d) --> num"] = [[Modifita Bessel-funkcio Kn(x).]],
[":betaln(z_d, w_d) --> num"] = [[Naturala logaritmo de la beta-funkcio.]],
[":besselj(order_N, x_d) --> num"] = [[Bessel-funkcio de la unua speco.]],
[":erfc(x_d) --> num"]     = [[Kompletiga eraro funkcio.]],
[":besseli(order_N, x_d) --> num"] = [[Modifita Bessel-funkcio In(x).]],
["__module__"]             = [[Specialaj matematikaj funkcioj.]],
[":betainc(x_d, a_d, b_d) --> num"] = [[Nekompleta beta-funkcio Ix(a,b).]],
},
---------- symbolic.lua ----------
symbolic = {
["S:isFn() --> bool"]      = [[Kontrolu ĉu la simbolo estas funkcio.]],
[" (num|str) --> new_S"]   = [[Kreu novan simbolan variablon.]],
["S:eval(env_t={}) --> upd_S|num"] = [[Taksi simbolan esprimon kun la donita medio.]],
[":def(name_s, args_t, expr_S) --> fn_S"] = [[Difinu simbolan funkcion. S estas aŭ simbola esprimo aŭ Lua funkcio.]],
["S:diff(var_S) --> derivative_S"] = [[Simbola derivaĵo.]],
["__module__"]             = [[Simbolaj kalkuloj.]],
[":parse(expr_s) --> S1, S2, .."] = [[Akiru simbolan esprimon el linio.]],
[":fn(name_s) --> fn_S|nil"] = [[Redonu simbolan funkcion se ĝi estis difinita.]],
--["S:struct() --> str"]     = [[Show internal structure.]],
--["S:ratDenom() --> denominator_S"] = [[Get denominator of the expression.]],
--["S:ratNum() --> numerator_S"] = [[Get numerator of the expression.]],
--["S:expand() --> expanded_S"] = [[Expand product of polynomials when possible.]],
},
---------- units.lua ----------
units = {
["U:convert(new_s) --> upd_U|nil"] = [[Konvertu unu unuojn al alia, redonu novan objekton aŭ nulon.]],
[".prefix"]                = [[Tabelo de prefiksoj.]],
["U:key() --> str"]        = [[Akiru mezurunuojn.]],
["U:copy() --> cpy_U"]     = [[Krei kopion de objecto.]],
[" (val=1, name_s) --> new_U"] = [[Krei novan valoron kun unuoj de mezuro.]],
["__module__"]             = [[Operacioj kun unuoj de mezuroj.]],
--[".rules"]                 = [[Table of rules for conversation.]],
},
}