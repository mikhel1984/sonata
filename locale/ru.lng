return {
---------- locale/ru.lng ----------
language = 'Русский',
authors  = [[Станистав Михель]],
---------- dialog ----------
Dialog = {
["done"]                 = [[Выполнено.]],
["intro"]                = [[-------- help([функция]) = справка --------------
---------- use([модуль]) = импорт функций -------
----------------- quit() = выход ----------------
]],
["use_import"]           = [[

Используйте
  use 'модуль' или use {'модульA','модульB' ...}
для подключения дополнительных модулей.
]],
},
---------- main.lua ----------
main = {
["__module__"]           = [[Программа для математических расчётов на Lua.]],
["_ans"]                 = [[Результат последней операции.]],
["atan2(dy,dx)"]         = [[Арктангенс dy/dx с учётом знака.]],
["sinh(d)"]              = [[Гиперболический синус.]],
["acosh(x)"]             = [[Гиперболический арккосинус.]],
["asin(d)"]              = [[Арксинус x.]],
["log(dPos)"]            = [[Натуральный логарифм.]],
["Map(fn,t)"]            = [[Вычисляет функцию для всех элементов списка (таблицы), возвращает новый список.]],
["sin(d)"]               = [[Синус x.]],
["abs(d)"]               = [[Абсолютная величина.]],
["Range(dBegin,dEnd,[dStep])"] = [[Генерация диапазона чисел.]],
["cosh(d)"]              = [[Гиперболический косинус.]],
["asinh(x)"]             = [[Гиперболический арксинус.]],
["Round(f,[N=0])"]       = [[Округление числа до заданного количества десятичных знаков.]],
["cos(d)"]               = [[Косинус x.]],
["_pi"]                  = [[Число pi.]],
["Type(v)"]              = [[Печатает тип объекта, распознаёт типы, заданные в Sonata.]],
["Print(...)"]           = [[Дополненная функция печати, показывает элементы таблицы, представляет числа в н "научно" виде.]],
["randn([dMean=0,dev=1])"] = [[Нормально распределённая случайная величина с заданным средним значением и дисперсией.]],
["randi(N)"]             = [[Случайное целое число от 1 до N.]],
["acos(d)"]              = [[Арккосинус x.]],
["sqrt(dPos)"]           = [[Квадратный корень.]],
["tanh(d)"]              = [[Гиперболический тангенс.]],
["atanh(x)"]             = [[Гиперболический арктангенс.]],
["_e"]                   = [[Число Эйлера.]],
["rand()"]               = [[Случайное число от 0 до 1.]],
["Run(sFile,[bInt=false])"] = [[Выполнить lua- или note- файл. Установите флаг bInt для интерактивного выполнения.]],
["tan(d)"]               = [[Тангенс x.]],
["exp(d)"]               = [[Экспонента.]],
["Log(sFlag)"]           = [[Сохранение сессии в файл лога. Используйте 'on'/'off' чтобы запустить/остановить процесс.]],
},
---------- units.lua ----------
units = {
["__module__"]           = [[Операции с единицами измерения.]],
["prefix"]               = [[Таблица дольных и кратных приставок.]],
["copy()"]               = [[Создание копии объекта с его единицами измерения.]],
["key()"]                = [[Возвращает единицы измерения.]],
--["arithmetic"]           = [[U1+U2, U1-U2, U1*U2, U1/U2, U1^N]],
["convert(s)"]           = [[Преобразование единиц измерения, возвращает новый объект или nil.]],
["value()"]              = [[Возвращает значение объекта. Эквивалентно #U.]],
[":setRule(s,U)"]    = [[Добавление нового правила преобразования единиц измерения.]],
["Unit([v,]s)"]          = [[Создание числа с единицами измерения.]],
--["comparison"]           = [[U1==U2, U1~=U2, U1<U2, U1<=U2, U1>U2, U1>=U2]],
},
---------- geodesy.lua ----------
geodesy = {
["__module__"]           = [[Преобразования координат и другие геодезические задачи.]],
[":grav(dB)"]         = [[Международная формула гравитации, аргумент в радианах.]],
[":toENU(tBLr,tXYZr,tCatr)"] = [[Преобразовать геоцентрические координаты точки в топоцентрические.]],
["projGK(tBL)"]          = [[Вовзращает северное и восточное положение точки в проекции Гаусса-Крюгера.]],
["projM(tBL)"]           = [[Возвращает северное и восточное положение точки в проекции Меркатора.]],
["solveInv(BLH1,BLH2)"]  = [[Решение обратной задачи геодеции, поиск расстояния и азимутов для двух заданных точек.]],
["solveDir(BLH,azimuth,dist)"] = [[Решение прямой задачи геодезии, поиск положения и азимута второй точки при заданных начальной точке, направлении и расстоянии.]],
["toBLH(tXYZ)"]          = [[Приобразовать геоцентрические координаты в геодезические.]],
["A.xyzInto[B]"]         = [[Возвращает функцию для преобразования геоцентрических координат из системы A в B.]],
["A.blhInto[B]"]         = [[Возвращает функцию для преобразования геодезических координат из A в B с помощью метода Молоденского.]],
[":dms2rad(d,[m=0,s=0])"] = [[Преобразует градусы, минуты и секунды в радианы.]],
["toXYZ(tBLH)"]          = [[Преобразует геодезические координаты в геоцентрические.]],
[":fromENU(tBLr,tXYZr,tTop)"] = [[Преобразовать топоцентрические координаты точки в геоцентрические.]],
[":hashEncode(t[,N=6])"] = [[Вычисления геохэша для точки.]],
[":hashDecode(sHash)"] = [[Определения положения зоны по геохэшу.]],
[":deg2dms(d)"]       = [[Возвращает градусы, минуты и секунды для заданного угла в градусах.]],
},
---------- data.lua ----------
data = {
["__module__"]           = [[Обработка данных и статистические расчёты.]],
[":geomean(t,[tw])"]   = [[Геометрическое среднее.]],
[":std(t,[tw])"]       = [[Возвращает стандартное отклонение и дисперсию.]],
[":is(t,fn)"]          = [[Возвращает массив весов на основе булевой функции.]],
[":mean(t,[tw])"]      = [[Вычисляет среднее значение.]],
[":csvwrite(sFile,t,[char=',',bCol=false])"] = [[Сохраняет таблицу в файл с заданным разделителем.]],
[":tcdf(d,N)"]         = [[Распределение Стьюдента.]],
[":xIn(d1,d2)"]        = [[Возвращает функцию для условия d1 <= x <= d2.]],
[":freq(t)"]           = [[Возвращает таблицу частот элементов.]],
[":histcounts(X,[rng=10])"] = [[Распределение данных по интервалам. Можно указать число интервалов разбиения, либо задать границы в виде таблицы.]],
[":Fn(sExpr,[iArg=2])"] = [[Генерирует функцию из строки с параметрами x1, x2 и т.д.]],
[":max(t)"]            = [[Максимальный элемент и его индекс.]],
[":ref(t,[iBeg=1,iEnd=#t])"] = [[Возвращает "ссылку" на таблицу элементов.]],
[":xLt(d)"]            = [[Возвращает функцию для условия x < d.]],
[":xGt(d)"]            = [[Возвращает функцию для условия x > d.]],
[":zip(fn,...)"]       = [[Последовательно применяет функцию к списку векторов.]],
[":filter(t,vCond)"]   = [[Вильтрует список данных. Условием является булева функция или массив весов.]],
[":harmmean(t,[tw])"]  = [[Гармоническое среднее.]],
[":xEq(d)"]            = [[Возвращает функцию для условия x == d.]],
[":csvread(sFile,[delim=',',bCol=false])"] = [[Формирует таблицу на основе файла с заданным разделителем.]],
[":isNot(t,fn)"]       = [[Возвращает инвертированные веса для булевой функции.]],
[":median(t)"]         = [[Возвращает медиану распределения.]],
[":tpdf(d,N)"]         = [[Плотность распределения Стьюдента.]],
[":sum(t)"]            = [[Возвращает сумму элементов.]],
[":moment(N,t,[tw])"]  = [[Центральный момент t порядка N (с весами tw).]],
[":cov(t)"]            = [[Возвращает матрицу ковариации для списка векторов.]],
[":min(t)"]            = [[Возвращает наименьший элемент и его индекс.]],
[":cov2(t1,t2)"]       = [[Вычисляет ковариацию для двух списков.]],
},
---------- const.lua ----------
const = {
["__module__"]           = [[Разнообразные константы.]],
["phi.Da"]               = [[Атомная единица массы.]],
["astro.pc"]             = [[Один парсек.]],
["phy.e"]                = [[Заряд электрона.]],
["phy.sigma"]            = [[Постоянная Стефана-Больцмана.]],
["phy.NA"]               = [[Число Авогадро.]],
["math.phi"]             = [[Золотое сечение.]],
["math.pi"]              = [[Отношение длины окружности к её диаметру.]],
[":add(sName,value,[sUnits])"] = [[Добавление временной константы.]],
["phy.c"]                = [[Скорость света.]],
["phy.Rinf"]             = [[Постоянная Ридберга.]],
["phy.Vm"]               = [[Объём моля идеального газа.]],
["phy.g"]                = [[Ускорение свободного падения.]],
["phy.G"]                = [[Гравитационная постоянная.]],
["phy.k"]                = [[Постоянная Больцмана.]],
["phy.R"]                = [[Универсальная газовая постоянная.]],
["math.e"]               = [[Основание натурального логарифма.]],
["astro.au"]             = [[Астрономическая единица.]],
["phy.h"]                = [[Число планка.]],
[":remove(sName)"]     = [[Удаление константы.]],
["phy.mu0"]              = [[Магнитная постоянная.]],
["phy.eps0"]             = [[Электрическая постоянная.]],
["astro.ly"]             = [[Световой год.]],
},
---------- polynomial.lua ----------
polynomial = {
["__module__"]           = [[Действия над полиномами.]],
[":build(root1,root2,...)"] = [[Строит полином на основе списка корней.]],
[":lagrange(tX,tY)"] = [[Интерполяция данных полиномом Лагранжа.]],
["roots()"]              = [[Поиск действительных и комплексных корней полинома.]],
["real()"]               = [[Возвращает список действительных корней полинома.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
[":spline(tX,tY)"]   = [[Интерполяция данных кубическими сплайнами. Возвращает таблицу полиномов.]],
["copy()"]               = [[Возвращает копию полинома.]],
["der()"]                = [[Первая производная полинома.]],
["val(v)"]               = [[Вычисляет значение полинома в заданной точке. Эквивалентно вызаву P(x).]],
[":fit(tX,tY,N)"]    = [[Аппроксимация точек полиномом заданной степени.]],
[":taylor(v,vF,[vF',vF''..])"] = [[Формирует полином Тейлора в окрестности заданной точки.]],
--["comparison"]           = [[a==b, a~=b]],
[":lin(tX,tY,[v0=0,vN=v0])"] = [[Линейная интерполяция. Возвращает таблицу полиномов.]],
["int([d0=0])"]          = [[Первообразная полинома, x0 - свободный коэффициент.]],
["Poly {..,v1,v0}"]      = [[Создаёт полином на основе списка коэффициентов.]],
[":ppval(tP,d,[N]"]  = [[Вычисляет значение интерполяции из таблицы полиномов, можно использовать индекс полинома для ускорения расчёта.]],
[":char(M)"]         = [[Возвращает характеристический полином матрицы.]],
},
---------- numeric.lua ----------
numeric = {
["__module__"]           = [[Функции для численных расчётов. Все функции работают с точностью, определяемой параметром TOL.]],
[":solve(fn,dA,dB)"]  = [[Поиск корня уравнения fn(x)=0 на интервале [a,b].]],
["TOL[=0.001]"]          = [[Точность решения.]],
[":trapez(fn,a,b)"]   = [[Интегрирование методом трапеций.]],
[":Newton(fn,d0)"]    = [[Поиск корня методом Ньютона в окрестностях заданной точки.]],
[":der(fn,x)"]        = [[Оценка производной функции в точке.]],
[":ode45(fn,tDelta,y0,[param])"] = [[Численное решение ОДУ.
Первый параметр задаёт уравнение, второй - временной интервал, третий - начальное значение функции. Дополнительно можно определить такие параметры как шаг интегрирования и условие прерывания.
Возвращает таблицу промежуточных точек и конечное значение yn.]],
},
---------- complex.lua ----------
complex = {
["__module__"]           = [[Вычисления с комплексными числами.]],
["tan()"]                = [[Комплексный тангенс.]],
["log()"]                = [[Комплексный логарифм.]],
["acosh()"]              = [[Комплексный обратный гиперболический косинус.]],
["tanh()"]               = [[Комплексный гиперболический тангенс.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["asinh()"]              = [[Комплексный обратный гиперболический синус.]],
["arg()"]                = [[Возвращает агрумент комплексного числа.]],
["exp()"]                = [[Комплексная экспонента.]],
["asin()"]               = [[Комплексный обратный синус.]],
["sin()"]                = [[Комплексный синус.]],
["_Z([vRe=0,vIm=0])"]    = [[Создание комплексного числа.]],
["cos()"]                = [[Комплексный косинус.]],
[":trig(vModule,vAngle)"] = [[Создание комплексного числа по модули и агрументу.]],
["sqrt()"]               = [[Комплексный квадратный корень.]],
["sinh()"]               = [[Комплексный гиперболический синус.]],
["re()"]                 = [[Действительная часть.]],
["atanh()"]              = [[Комплексный обратный гиперболический тангенс.]],
["acos()"]               = [[Комплексный обратный косинус.]],
["im()"]                 = [[Мнимая часть.]],
["round([N=6])"]         = [[Возвращает число с округлением до заданного количества знаков.]],
["atan()"]               = [[Комплексный обратный тангенс.]],
--["comparison"]           = [[a==b, a~=b]],
["cosh()"]               = [[Комплексный гиперболический косинус.]],
["abs()"]                = [[Модуль комплексного числа.]],
["conj()"]               = [[Комплексно-сопряженное число. Эквивалентно ~C.]],
[":i([v=1])"]          = [[Возвращает комплексное число v*i.]],
},
---------- asciiplot.lua ----------
asciiplot = {
["__module__"]           = [[Визуализация данных с помощью псевдо-графики.]],
["addPoint(dx,dy,s)"]    = [[Добавить точку с координатами (dx,dy) с помощью символа 's'.]],
[":concat(...)"]       = [[Горизонтальное объединение графиков равного размера. Для двух объектов можно использовать оператор '..' .]],
["bar(t,[vy=2,ix=1])"]   = [[Столбчатая диаграмма. vy может быть индексом y в таблице t либо списком y-в.]],
["reset()"]              = [[Очистка холста.]],
["tplot(t,[tOpt={}])"]   = [[Построение графика на основе таблицы, можно указать номера столбцов и дополнительные опции.]],
["Ap([iWidth=75,iHeight=23])"] = [[Новый график.]],
["plot(...)"]            = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
["scale(factor,[bDefault=false])"] = [[Изменить размер графика относительно начальных размеров.]],
["addString(ir,ic,s)"]   = [[Добавление строки в указанную позицию.]],
["copy()"]               = [[Возвращает копию объекта.]],
["addPose(ir,ic,s)"]     = [[Установка символа s в указанную позицию.]],
},
---------- bigint.lua ----------
bigint = {
["__module__"]           = [[Вычисления с целыми числами произвольной длины.]],
["rebase(N)"]            = [[Конвертирует число в новую систему счисления.]],
["fact()"]               = [[Вычисляет факториал целого неотрицательного числа.]],
[":random(B)"]        = [[Псевдо-случайное число от 0 до B.]],
["eq(B)"]                = [[Проверка равенства двух чисел.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
["base()"]               = [[Возвращает основание системы счисления.]],
["isPrime([sMethod])"]   = [[Проверка числа на простоту. Установите метод 'Fermat' для использования малой теоремы Ферма.]],
["abs()"]                = [[Возвращает модуль числа.]],
["Int(v)"]               = [[Создаёт большое целое число на основе числа, строки или таблицы.]],
["at(N)"]                = [[Возвращает цифру в позиции N.]],
["gcd(B)"]               = [[Наибольший общий делитель.]],
["factorize()"]          = [[Возвращает список простых множителей для данного числа.]],
["float()"]              = [[Представление в виде числа с плавающей точкой.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
},
---------- quaternion.lua ----------
quaternion = {
["__module__"]           = [[Операции над кватернионами.]],
["normalize()"]          = [[Возвращает единичный кватернион.]],
["slerp(Q,f)"]           = [[Сферическая линейная интерполяция двух кватернионов.]],
["re()"]                 = [[Действительная часть (эквивалентно Q.w).]],
["toAA()"]               = [[Возвращает угол поворота и ось вращения.]],
["x()"]                  = [[Компонента x.]],
["toRot()"]              = [[Возвращает эквивалентную матрицу вращения.]],
[":fromAA(fAng,vAxe)"] = [[Возвращает кватернион для заданного угла и оси вращения.]],
["z()"]                  = [[Компонента z.]],
["inv()"]                = [[Возвращает крватернион, обратный к данному.]],
["Quat {w,x,y,z}"]       = [[Новый кватернион.]],
--["comparison"]           = [[a == b, a ~= b]],
--["arithmetic"]           = [[a + b, a - b, a * b, a ^ k, -a]],
[":fromRot(M)"]      = [[Строит кватернион на основе угла поворота и оси вращения.]],
["mat()"]                = [[Представление в виде эквивалентной матрицы.]],
["w()"]                  = [[Действительная часть w.]],
["rotate(vec)"]          = [[Возвращает вектор, полученный при вращении с помощью заданного кватерниона.]],
["conj()"]               = [[Сопряжённый кватернион.]],
["y()"]                  = [[Компонента y.]],
["im()"]                 = [[Возвращает таблицу мнимых элементов кватерниона.]],
["abs()"]                = [[Норма кватерниона.]],
},
---------- lens.lua ----------
lens = {
["__module__"]           = [[Матричные методы в параксиальной оптике.]],
["det()"]                = [[Возвращает определитель матрицы.]],
["transform(dy,dV)"]     = [[Определяет положение луча 'dy' и оптический угол 'dV' (= v*n) на выходе оптической системы. Эквивалентно вызову L(dy,dV).]],
["Lens {dA,dB,dC,dD}"]   = [[Новый объект с произвольными параметрами A, B, C, D.]],
[":gaussSize(dW0,dLam,dist)"] = [[Определение радиуса и кривизны гаусова пучка на заданном расстоянии.]],
["beam(dW,dR,dLam)"]     = [[Определение радиуса и кривизны фронта гаусова пуска на выходе из системы.]],
[":ref(dr,dn1,dn2)"] = [[Возвращает матрицу для преломления с учётом показателей преломления и радиуса кривизны поверхности.]],
["inv()"]                = [[Инвертированная матрица системы.]],
[":thin(df)"]        = [[Возвращает матрицу для тонкой линзы при заданном фокальном расстоянии.]],
["isUnit()"]             = [[Проверка, является ли матрица единичной.]],
--["operations"]           = [[L1 == L2, L1 .. L2]],
[":solve(fn,ind,d0)"] = [[Поиск условий, при которых компонент с заданным индексом равен 0. d0 - начальное предположение.]],
[":trans(dt,dn)"]    = [[Возвращает матрицу перемещения с учётом показателя преломления.]],
["copy()"]               = [[Возвращает копию объекта.]],
["cardinal([dn1=1,dn2=1])"] = [[Поиск положения кардинальных точек системы относительно входных и выходных плоскостей, с учётом показателей преломления. Возвращает список расстояний.]],
[":mirror(dr,dn)"]   = [[Возвращает матрицу отражения на кривой поверхности с учётом показателя преломления.]],
[":afocal(dm)"]      = [[Возвращает матрицу для афокальной системы.]],
[":gausParam(dW0,dLam)"] = [[Определение расходимости и размера ближней зоны пучка.]],
},
---------- graph.lua ----------
graph = {
["__module__"]           = [[Операции с графами.]],
["isWeighted()"]         = [[True если граф взвешенный.]],
["edges()"]              = [[Возвращает список рёбер.]],
["dfs(vStart,vGoal)"]    = [[Поиск в глубину. Возвращает флаг результата и найденный путь.]],
["isDirected()"]         = [[True если граф направленный.]],
["copy()"]               = [[Создаёт копию графа.]],
["pathD(vStart,[vGoal])"] = [[Поиск кратчайшего пути алгоритмом Дейкстры. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["remove(v)"]            = [[Удаляет узел или ребро. Узлы представляются именем, рёбра - двухэлементным списком.]],
["pathBF(vStart,[vGoal])"] = [[Поиск кратчайшего пути алгоритмом Беллмана-Форда. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["Graph {v1,v2,..}"]     = [[Создает новый граф.]],
["isComplete()"]         = [[True если граф полный.]],
["nodes()"]              = [[Возвращает список узвло графа.]],
["isNegative()"]         = [[True если граф содержит отрицательные веса.]],
["add(v)"]               = [[Добавляет узел (одиночное имя) или ребро. Ребро представлено списком, содержащим начало, конец и, при необходимости, вес (веса).]],
["bfs(vStart,vGoal)"]    = [[Поиск в ширину. Возвращает флаг результата и найденный путь.]],
},
---------- gnuplot.lua ----------
gnuplot = {
["__module__"]           = [[Интерфейс для взаимодействия с Gnuplot.]],
["copy()"]               = [[Возвращает копию параметров графика.]],
[":tsurf(v,[x1,y1,z1,z2..])"] = [[Построение графика поверхности на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
[":polarplot(x1,y1,[nm,x2,y2..])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
["Gp()"]                 = [[Подготовка таблицы для Gnuplot.]],
["add(tCurve)"]          = [[Добавить функцию для построения.]],
["keys"]                 = [[  Описание параметров:
{math.sin, title='sin'}                      -- строит график для Lua функции, добавляет текст в легенду
{'sin.dat', ln=1, lw=2}                      -- строит график для файла с учётом цвета и толщины маркеров
{tbl, with='lines'}                          -- строит график для Lua таблицы с помощью линий
title='Graph name'                           -- имя графика в целом
xrange={0,10}                                -- диапазон x от 0 до 10
yrange={-2,2}                                -- диапазон y
zrange={0,5}                                 -- диапазон z
trange={1,2}                                 -- изменение параметра в случае параметрической функции
xtitle='A', ytitle='B'                       -- имена осей
terminal='jpeg'                              -- сохранение результата в файл
output='my_plot.jpg'                         -- имя файла для вывода результата
parametric=true                              -- параметрическое представление функции
size='square'                                -- установить квадратный размер изображения
polar=true                                   -- график в полярных координатах
grid='polar'                                 -- изменить тип сетки на полярный
legend=false                                 -- отключить легенду
surface=true                                 -- построение трёхмерного графика
samples=200                                  -- задать число точек на графике
raw='set pm3d'                               -- позволяет написать команды Gnuplot в явном виде
]],
[":plot(x1[,y1,nm,x2,..])"] = [['x' - список чисел, 'y' - список или функция, 'nm' - имя кривой.]],
[":tpolar(v,[x,y1,y2..])"] = [[График в полярных координатах для таблицы, матрицы или файла. Опциональные элементы определяют стоблцы.]],
[":surfplot(x1,y1,fn1,[nm,x2,y2..])"] = [[Построение поверхности. 'x' и 'y' - списки чисел, 'fn' - функция двух агрументов, 'nm' - имя поверхности.]],
["show()"]               = [[Строит график на основе параметров, представленных в виде таблицы Lua.]],
[":tplot(v[,x,y1,y2..])"] = [[Построение графика на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
},
---------- special.lua ----------
special = {
["__module__"]           = [[Специальные функции.]],
[":erf(x)"]          = [[Функция ошибки.]],
[":bessely(n,x)"]    = [[Функция Бесселя второго рода.]],
[":gammp(N,x)"]      = [[Неполная гамма-функция P(N,x).]],
[":beta(z,w)"]       = [[Бета-функция.]],
[":gammainc(x,N,[type='lower'])"] = [[Неполная гамма-функция, P (lower - нижняя) или Q (upper - верхняя).]],
[":dawson(x)"]       = [[Интеграл Доусона.]],
[":gammq(N,x)"]      = [[Неполная гамма-функция Q(N,x) = 1-P(N,x).]],
[":betainc(x,a,b)"]  = [[Неполная бета-функция Ix(a,b).]],
[":gammaln(z)"]      = [[Натуральный логарифм гамма-функции.]],
[":besselk(N,x)"]    = [[Модифицированная функция Бесселя Kn(x).]],
[":gamma(z)"]        = [[Гамма функция.]],
[":legendre(n,x)"]   = [[Список коэффициентов полиномов Лежандра.]],
[":betaln(z,w)"]     = [[Натуральный логарифм бета-функции.]],
[":besseli(N,x)"]    = [[Модифицированная функция Бесселя In(x).]],
[":besselj(N,x)"]    = [[Функция Бесселя первого рода.]],
[":expint(n,x)"]     = [[Экспоненциальный интеграл En(x).]],
[":erfc(x)"]         = [[Дополнительная функция ошибки.]],
},
---------- matrix.lua ----------
matrix = {
["__module__"]           = [[Операции с матрицами. На нулевые элементы память не расходуется. Индексация с единицы.]],
["copy()"]               = [[Возвращает копию матрицы.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["pinv()"]               = [[Вовзращает псевдо-обратную матрицу.]],
["Mat {tRow1,tRow2,..}"] = [[Создаёт матрицу на основе списка строк.]],
[":V({...})"]         = [[Преобразует список чисел в вектор.]],
["rank()"]               = [[Возвращает ранг матрицы.]],
["rref()"]               = [[Преобразование матрицы методом Гаусса.]],
["norm()"]               = [[Евклидова норма.]],
["chol()"]               = [[Преобразование Холески для положительно определённой симметричной матрицы.]],
["T()"]                  = [[Транспонирование матрицы. Эквивалентно T().]],
["qr()"]                 = [[QR разложение матрицы. Возвращает Q и R.]],
["range(tR,tC)"]         = [[Возвращает подматрицу с заданным интервалом строк и столбцов.]],
[":fill(iRows,iCols,[val=1])"] = [[Создать матрицу, заполненную заданным числом.]],
["map(fn)"]              = [[Формирует новую матрицу путём применения указанной функции к исходной. Функция может зависеть как от элементов, f(x) так и от индексов f(x,row,col).]],
["round([N=6])"]         = [[Округлить все элементы матрицы до заданного числа знаков.]],
["H()"]                  = [[Сопряженная транспонированная матрица.]],
["tr()"]                 = [[След матрицы.]],
["insert(tR,tC,M)"]      = [[Вставляет матрицу в заданный диапазон строк и столбцов.]],
[":zip(fn,M1,M2,...)"] = [[Поэлементно применяет функцию к матрицам для формирования новой матрицы.]],
["rows()"]               = [[Число строк.]],
[":zeros(rows,[cols=rows])"] = [[Формирует матрицу нулей.]],
["cross(V)"]             = [[Векторное произведение 3-элементных векторов.]],
["reshape([iRows=size,iCols=1])"] = [[Изменить размер матрицы.]],
["table()"]              = [[Преобразует матрицу в обыкновенную Lua таблицу.]],
["cols()"]               = [[Число столбцов.]],
--["comparison"]           = [[a==b, a~=b]],
["dot(V)"]               = [[Скалярное произведение векторов.]],
["inv()"]                = [[Обратная матрица.]],
["det()"]                = [[Определитель матрицы.]],
["lu()"]                 = [[LU преобразование матрицы. Возвращает L,U и P.]],
["concat(M,sDir)"]       = [[Объединяет две матрица горизонтально (dir='h') или вертикально (dir='v').
Горизонтальная конкатенация доступна в виде M1 .. M2, а вертикальная - M1 // M2.]],
["eig()"]                = [[Возвращает матрицы из собственных векторов и чисел.]],
["diag()"]               = [[Извлекает диагональные элементы либо формирует новую матрицу из вектора. n - индекс диагонали.]],
[":eye(iRows,[iCols=iRows])"] = [[Единичная матрица.]],
},
---------- array.lua ----------
array = {
["__module__"]           = [[Операции с массивами, т.е. многомерными упорядоченными последовательностями элементов. Индексы задаются в виде таблицы. Индексация с единицы.]],
["get(tInd)"]            = [[Возвращает значение заданного элемента.]],
["map(fn)"]              = [[Формирует новый массив путём применения функции к элементам исходного.]],
["concat(A,iAxis)"]      = [[Формирует новый массив путём объединения двух исходных по заданной оси.]],
["dim()"]                = [[Возвращает размерность массива.]],
["Arr {n1,n2,..}"]       = [[Создаёт пустой массив заданного размера.]],
["isEqual(A)"]           = [[Сравнение размерностей массивов.]],
["copy()"]               = [[Возвращает копию массива.]],
["sub(tInd1,tInd2)"]     = [[Возвращает массив, ограниченный двумя индексами.]],
[":zip(fn, ...)"]     = [[Применяет функцию к списку массивов для получения нового массива.]],
["ipairs()"]             = [[Итератор, который при каждом вызове возвращает индекс и элемент множества.]],
--["comparison"]           = [[a == b, a ~= b]],
["set(tInd,v)"]          = [[Присваивание значения заданному элементу.]],
["capacity()"]           = [[Возвращает максимальное число элементов в массиве. Эквивалентно #A.]],
},
---------- rational.lua ----------
rational = {
["__module__"]           = [[Операции с числами, представленными в виде дроби.]],
["Rat(m,[n=1])"]         = [[Для создания рационального числа укажите числитель и (опционально) знаменатель.]],
[":fromCont(t)"]      = [[Преобразование цепной дроби в рациональное число.]],
["denom()"]              = [[Возвращает знаменатель.]],
[":from(f,[fErr=1E-3])"] = [[Оценка дроби рациональным числом с заданной точностью.]],
--["arithmetic"]           = [[R1+R2, R1-R2, R1*R2, R1/R2, -R, R1^R2]],
["float()"]              = [[Представление рационального числа в десятичном виде.]],
["num()"]                = [[Возвращает числитель.]],
["toCont()"]             = [[Преобразование рационального числа в цепную дробь.]],
["eq(R)"]                = [[Проверка равенства двух чисел.]],
[":gcd(va,vb)"]       = [[Наибольший общий делитель.]],
--["comparison"]           = [[R1<R2, R1<=R2, R1>R2, R1>=R2, R1==R2, R1~=R2]],
},
}
