---------- locale/ru.lng ----------
{
language = 'Русский',
authors  = [[Станистав Михель]],
---------- dialog ----------
Dialog = {
["done"]                 = [[Выполнено.]],
["use_import"]           = [[Используйте
  use 'модуль' или use {'модульA','модульB' ...}
для подключения дополнительных модулей.
]],
["intro"]                = [[-------- help([функция]) = справка --------------
---------- use([модуль]) = импорт функций -------
----------------- quit() = выход ----------------
]],
},
---------- main.lua ----------
Main = {
["__module__"]           = [[Программа для математических расчётов на Lua.]],
["_ans"]                 = [[Результат последней операции.]],
["cosh(x)"]              = [[Гиперболический косинус.]],
["acosh(x)"]             = [[Гиперболический арккосинус.]],
["tanh(x)"]              = [[Гиперболический тангенс.]],
["sqrt(a)"]              = [[Квадратный корень числа.]],
["_pi"]                  = [[Число pi.]],
["log(x)"]               = [[Натуральный логарифм.]],
["abs(x)"]               = [[Абсолютное значение (модуль) числа.]],
["asinh(x)"]             = [[Гиперболический арксинус.]],
["Print(...)"]           = [[Дополненная функция печати, показывает элементы таблицы, представляет числа в н "научно" виде.]],
["cos(x)"]               = [[Косинус x.]],
["Type(v)"]              = [[Печатает тип объекта, распознаёт типы, заданные в Sonata.]],
["acos(x)"]              = [[Арккосинус x.]],
["randn()"]              = [[Нормально распределённая случайная величина с нулевым средним и единичной дисперсией.]],
["DsvRead(sFile[,delim=',',bCol=false])"] = [[Формирует таблицу на основе файла с заданным разделителем.]],
["TblImport(sFile)"]     = [[Считывает Lua таблицу из файла.]],
["exp(x)"]               = [[Экспоненциальная зависимость.]],
["asin(x)"]              = [[Арксинус x.]],
["DsvWrite(sFile,t[,char=',',bCol=false])"] = [[Сохраняет таблицу в файл с заданным разделителем.]],
["_e"]                   = [[Число Эйлера.]],
["rand()"]               = [[Случайное число от 0 до 1.]],
["Run(sFile)"]           = [[Выполнить lua- или note-файл.]],
["Logging(flag)"]        = [[Сохранение сессии в файл. Используйте 'on'/true для начала и 'off'/false для окончания.]],
["randi(N)"]             = [[Случайное целое число от 1 до N.]],
["atanh(x)"]             = [[Гиперболический арктангенс.]],
["sin(x)"]               = [[Синус x.]],
["tan(x)"]               = [[Тангенс x.]],
["atan2(y,x)"]           = [[Арктангенс, который учитывает знаки агрументов.]],
["Round(f[,N=0])"]       = [[Округление числа до заданного количества десятичных знаков.]],
["sinh(x)"]              = [[Гиперболический синус.]],
["Range(dBegin,dEnd[,dStep])"] = [[Генерация последовательности чисел в заданном диапазоне.]],
["Map(fn,t)"]            = [[Вычисляет функцию для всех элементов списка (таблицы), возвращает новый список.]],
},
---------- units.lua ----------
Unit = {
["__module__"]           = [[Операции с единицами измерения.]],
--["comparison"]           = [[U1==U2, U1~=U2, U1<U2, U1<=U2, U1>U2, U1>=U2]],
--["arithmetic"]           = [[U1+U2, U1-U2, U1*u2, U1/U2, U1^n]],
["convert(v, fn)"]       = [[Преобразование между единицами измерения, функция возвращает новый объект или nil.]],
["Unit(v[,u])"]          = [[Создание числа и/или единиц измерения.]],
["add(U,rule)"]          = [[Добавление нового правила преобразования единиц измерения.]],
["prefix"]               = [[Таблица дольных и кратных приставок.]],
["copy(U)"]              = [[Создание копии объекта с его единицами измерения.]],
},
---------- lens.lua ----------
Lens = {
["__module__"]           = [[Матричные методы в параксиальной оптике.]],
["ref(dr,dn1,dn2)"]      = [[Возвращает матрицу для преломления с учётом показателей преломления и радиуса кривизны поверхности.]],
["cardinal(L[,dn1=1,dn2=1])"] = [[Поиск положения кардинальных точек системы относительно входных и выходных плоскостей, с учётом показателей преломления. Возвращает список расстояний.]],
["mirror(dr,dn)"]        = [[Возвращает матрицу отражения на кривой поверхности с учётом показателя преломления.]],
["trans(dt,dn)"]         = [[Возвращает матрицу перемещения с учётом показателя преломления.]],
["Lens(t)"]              = [[Новый объект.]],
["thin(df)"]             = [[Возвращает матрицу для тонкой линзы при заданном фокальном расстоянии.]],
["copy(L)"]              = [[Возвращает копию объекта.]],
["inv(L)"]               = [[Инвертированная матрица системы.]],
["det(L)"]               = [[Возвращает определитель матрицы.]],
["solve(fn,ind,d0)"]     = [[Поиск условий, при которых компонент с заданным индексом равен 0. d0 - начальное предположение.]],
["isUnit(L)"]            = [[Проверка, является ли матрица единичной.]],
["transform(L,dy,dV)"]   = [[Определяет положение луча 'dy' и оптический угол 'dV' (= v*n) на выходе оптической системы. Эквивалентно вызову L(dy,dV).]],
["afocal(dm)"]           = [[Возвращает матрицу для афокальной системы.]],
--["operations"]           = [[L1 == L2, L1 .. L2]],
},
---------- graph.lua ----------
Graph = {
["__module__"]           = [[Операции с графами.]],
["pathBF(G,vStart[,vGoal])"] = [[Поиск кратчайшего пути алгоритмом Беллмана-Форда. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["isDirected(G)"]        = [[True если граф направленный.]],
["copy(G)"]              = [[Создаёт копию графа.]],
["add(G,v)"]             = [[Добавляет узел (одиночное имя) или ребро. Ребро представлено списком, содержащим начало, конец и, при необходимости, вес (веса).]],
["Graph(t)"]             = [[Создает новый граф.]],
["remove(G,v)"]          = [[Удаляет узел или ребро. Узлы представляются именем, рёбра - двухэлементным списком.]],
["dfs(G,vStart,vGoal)"]  = [[Поиск в глубину. Возвращает флаг результата и найденный путь.]],
["edges(G)"]             = [[Возвращает список рёбер.]],
["isComplete(G)"]        = [[True если граф полный.]],
["pathD(G,vStart[,vGoal])"] = [[Поиск кратчайшего пути алгоритмом Дейкстры. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["bfs(G,vStart,vGoal)"]  = [[Поиск в ширину. Возвращает флаг результата и найденный путь.]],
["isWeighted(G)"]        = [[True если граф взвешенный.]],
["nodes(G)"]             = [[Возвращает список узвло графа.]],
["isNegative(G)"]        = [[True если граф содержит отрицательные веса.]],
},
---------- geodesy.lua ----------
Geo = {
["__module__"]           = [[Преобразования координат и другие геодезические задачи.]],
["fromENU(tBLr,tXYZr,tTop)"] = [[Преобразовать топоцентрические координаты точки в геоцентрические.]],
["toXYZ(E,tBLH)"]        = [[Преобразует геодезические координаты в геоцентрические.]],
["toENU(tBLr,tXYZr,tCatr)"] = [[Преобразовать геоцентрические координаты точки в топоцентрические.]],
["projGK(E,tBL)"]        = [[Вовзращает северное и восточное положение точки в проекции Гаусса-Крюгера.]],
["solveInv(E,BLH1,BLH2)"] = [[Решение обратной задачи геодеции, поиск расстояния и азимутов для двух заданных точек.]],
["toBLH(E,tXYZ)"]        = [[Приобразовать геоцентрические координаты в геодезические.]],
["deg2dms(d)"]           = [[Возвращает градусы, минуты и секунды для заданного угла в градусах.]],
["projM(E,tBL)"]         = [[Возвращает северное и восточное положение точки в проекции Меркатора.]],
["solveDir(E,BLH,azimuth,dist)"] = [[Решение прямой задачи геодезии, поиск положения и азимута второй точки при заданных начальной точке, направлении и расстоянии.]],
["grav(dB)"]             = [[Международная формула гравитации, аргумент в радианах.]],
["dms2rad(d[,m[,s]])"]   = [[Преобразует градусы, минуты и секунды в радианы.]],
["A.xyzInto[B]"]         = [[Возвращает функцию для преобразования геоцентрических координат из системы A в B.]],
["A.blhInto[B]"]         = [[Возвращает функцию для преобразования геодезических координат из A в B с помощью метода Молоденского.]],
},
---------- complex.lua ----------
Comp = {
["__module__"]           = [[Вычисления с комплексными числами.]],
["exp(C)"]               = [[Комплексная экспонента.]],
["tan(C)"]               = [[Комплексный тангенс.]],
["acos(C)"]              = [[Комплексный обратный косинус.]],
["asin(C)"]              = [[Комплексный обратный синус.]],
["sin(C)"]               = [[Комплексный синус.]],
["copy(C)"]              = [[Возвращает копию комплексного числа.]],
["asinh(C)"]             = [[Комплексный обратный гиперболический синус.]],
["tanh(C)"]              = [[Комплексный гиперболический тангенс.]],
["sinh(C)"]              = [[Комплексный гиперболический синус.]],
["cos(C)"]               = [[Комплексный косинус.]],
["angle(C)"]             = [[Аргумент комплексного числа.]],
["conj(C)"]              = [[Комплексно-сопряженное число. Эквивалентно ~C.]],
--["comparison"]           = [[a==b, a~=b]],
["trig(dModule,dAngle)"] = [[Формирует комплексное число через модуль и агрумент.]],
["Comp([vRe=0,vIm=0])"]  = [[Создаёт новое комплексное число.]],
["cosh(C)"]              = [[Комплексный гиперболический косинус.]],
["atanh(C)"]             = [[Комплексный обратный гиперболический тангенс.]],
["abs(C)"]               = [[Модуль комплексного числа.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["log(C)"]               = [[Комплексный логарифм.]],
["atan(C)"]              = [[Комплексный обратный тангенс.]],
["acosh(C)"]             = [[Комплексный обратный гиперболический косинус.]],
["_i"]                   = [[Комплексная единица.]],
["sqrt(C)"]              = [[Комплексный квадратный корень.]],
},
---------- bigint.lua ----------
Int = {
["__module__"]           = [[Вычисления с целыми числами произвольной длины.]],
["abs(B)"]               = [[Возвращает модуль числа.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
["Int(v)"]               = [[Создаёт большое целое число на основе числа, строки или таблицы.]],
["copy(B)"]              = [[Возвращает копию числа.]],
["fact(B)"]              = [[Вычисляет факториал целого неотрицательного числа.]],
["isPrime(B[,sMethod])"] = [[Проверка числа на простоту. Установите метод 'Fermat' для использования малой теоремы Ферма.]],
["factorize(B)"]         = [[Возвращает список простых множителей для данного числа.]],
["val(B)"]               = [[Представление в виде числа с плавающей точкой.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
["eq(B1,B2)"]            = [[Проверка равенства двух чисел.]],
["random(B)"]            = [[Псевдо-случайное число от 0 до B.]],
["gcd(B1,B2)"]           = [[Наибольший общий делитель.]],
["base(B)"]              = [[Возвращает основание системы счисления.]],
["rebase(B,N)"]          = [[Конвертирует число в новую систему счисления.]],
},
---------- quaternion.lua ----------
Quat = {
["__module__"]           = [[Операции над кватернионами.]],
["rotate(Q,vec)"]        = [[Возвращает вектор, полученный при вращении с помощью заданного кватерниона.]],
["toAA(Q)"]              = [[Возвращает угол поворота и ось вращения.]],
["toRot(Q)"]             = [[Возвращает эквивалентную матрицу вращения.]],
["inv(Q)"]               = [[Возвращает крватернион, обратный к данному.]],
["slerp(Q1,Q2,f)"]       = [[Сферическая линейная интерполяция двух кватернионов.]],
["fromRot(M)"]           = [[Строит кватернион на основе угла поворота и оси вращения.]],
["imag(Q)"]              = [[Возвращает таблицу мнимых элементов кватерниона.]],
["real(Q)"]              = [[Действительная часть (эквивалентно Q.w).]],
["mat(Q)"]               = [[Представление в виде эквивалентной матрицы.]],
["abs(Q)"]               = [[Норма кватерниона.]],
["Quat(t={0,0,0,0})"]    = [[Определение кватерниона через таблицу коэффициентов.]],
--["arithmetic"]           = [[a + b, a - b, a * b, a ^ k, -a]],
--["comparison"]           = [[a == b, a ~= b]],
["copy(t)"]              = [[Возвращает копию кватерниона.]],
["normalize(Q)"]         = [[Приводит кватернион к единичной форме.]],
["fromAA(fAng,vAxe)"]    = [[Возвращает кватернион для заданного угла и оси вращения.]],
["conj(Q)"]              = [[Сопряжённый кватернион.]],
},
---------- rational.lua ----------
Rat = {
["__module__"]           = [[Операции с числами, представленными в виде дроби.]],
["De(R)"]                = [[Возвращает знаменатель.]],
--["comparison"]           = [[R1<R2, R1<=R2, R1>R2, R1>=R2, R1==R2, R1~=R2]],
["gcd(va,vb)"]           = [[Наибольший общий делитель.]],
["copy(R)"]              = [[Возвращает копию рационального числа.]],
["Nu(R)"]                = [[Возвращает числитель.]],
--["arithmetic"]           = [[R1+R2, R1-R2, R1*R2, R1/R2, -R, R1^R2} ]],
["Rat(m[,n=1])"]         = [[Для создания рационального числа укажите числитель и (опционально) знаменатель.]],
["val(R)"]               = [[Представление рационального числа в десятичном виде.]],
},
---------- const.lua ----------
_C = {
["__module__"]           = [[Разнообразные константы.]],
["astro.pc"]             = [[Один парсек.]],
["phy.e"]                = [[Заряд электрона.]],
["phy.sigma"]            = [[Постоянная Стефана-Больцмана.]],
["phy.NA"]               = [[Число Авогадро.]],
["math.phi"]             = [[Золотое сечение.]],
["math.pi"]              = [[Отношение длины окружности к её диаметру.]],
["phy.c"]                = [[Скорость света.]],
["phy.Rinf"]             = [[Постоянная Ридберга.]],
["phy.Vm"]               = [[Объём моля идеального газа.]],
["phy.g"]                = [[Ускорение свободного падения.]],
["phy.G"]                = [[Гравитационная постоянная.]],
["phy.k"]                = [[Постоянная Больцмана.]],
["remove(sName)"]        = [[Удаление константы.]],
["phy.eps0"]             = [[Электрическая постоянная.]],
["phy.h"]                = [[Число планка.]],
["math.e"]               = [[Основание натурального логарифма.]],
["add(sName,value[,sUnits])"] = [[Добавление новой константы.]],
["phy.mu0"]              = [[Магнитная постоянная.]],
["phy.R"]                = [[Универсальная газовая постоянная.]],
["astro.ly"]             = [[Световой год.]],
},
---------- matrix.lua ----------
Mat = {
["__module__"]           = [[Операции с матрицами. На нулевые элементы память не расходуется. Индексация с единицы.]],
["rand(iRows[,iCols=iRows])"] = [[Создаёт матрицу случайных чисел от 0 до 1.]],
["Mat(...)"]             = [[Создаёт матрицу на основе таблицы строк.]],
["chol(M)"]              = [[Преобразование Холески для положительно определённой симметричной матрицы.]],
["reshape(M,iRows[=size],iCols[=1])"] = [[Изменение размера матрицы.]],
["randi([M],N,[rows],[cols=rows])"] = [[Создаёт матрицу случайных целых чисел от 1 до N. Возможен вызов в виде 'randi(M,N)' или 'randi(N,r,c)'.]],
["randn(iRows[,iCols=iRows])"] = [[Возвращает матрицу нормально распределённых случайных чисел (с нулевым средним и единичной дисперсией).]],
["norm(M)"]              = [[Евклидова норма.]],
["zeros(rows[,cols=rows])"] = [[Формирует матрицу нулей.]],
["lu(M)"]                = [[LU преобразование матрицы. Возвращает L,U и P.]],
["det(M)"]               = [[Определитель матрицы.]],
["copy(M)"]              = [[Возвращает копию матрицы.]],
["ones(iRows[,iCols=iRows,val=1])"] = [[Формирует матрицу из единиц (или заданного числа).]],
["rank(M)"]              = [[Возвращает ранг матрицы.]],
["inv(M)"]               = [[Обратная матрица.]],
["dot(V1,V2)"]           = [[Скалярное произведение 3-элементных векторов.]],
["diag(M[,n=0])"]        = [[Извлекает диагональные элементы либо формирует новую матрицу из вектора. n - индекс диагонали.]],
["map(M,fn)"]            = [[Формирует новую матрицу путём применения указанной функции к исходной. Функция может зависеть как от элементов, f(x) так и от индексов f(x,row,col).]],
["cross(V1,V2)"]         = [[Векторное произведение 3-элементных векторов.]],
["table(M)"]             = [[Преобразует матрицу в обыкновенную Lua таблицу.]],
["pinv(M)"]              = [[Вовзращает псевдо-обратную матрицу.]],
["transpose(M)"]         = [[Транспонирование матрицы. Эквивалентно T().]],
["size(M)"]              = [[Возвращает число строк и столбцов матрицы.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["concat(M1,M2,sDir)"]   = [[Объединяет две матрица горизонтально (dir='h') или вертикально (dir='v').
Горизонтальная конкатенация доступна в виде M1 .. M2, а вертикальная - M1 // M2.]],
["fill(iRows,iCols,fn)"] = [[Генерирует матрицу на основе функции fn(строка,столбец).]],
["eye(iRows[,iCols=iRows,val=1])"] = [[Возвращает единичную матрицу. Диагональные элементы могут быть отличны от 1.]],
--["comparison"]           = [[a==b, a~=b]],
["rref(M)"]              = [[Преобразование матрицы методом Гаусса.]],
["tr(M)"]                = [[След матрицы.]],
["apply(fn,M1,M2,...)"]  = [[Применяет функцию к одной или нескольким матрицам.]],
},
---------- gnuplot.lua ----------
Gp = {
["__module__"]           = [[Интерфейс для взаимодействия с Gnuplot.]],
["tpolar(v,[x,y1,y2..])"] = [[График в полярных координатах для таблицы, матрицы или файла. Опциональные элементы определяют стоблцы.]],
["polarplot(x1,y1,[nm,[x2,y2..]])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
["keys"]                 = [[  Описание параметров:
{math.sin, title='sin'}                      -- строит график для Lua функции, добавляет текст в легенду
{'sin.dat', ln=1, lw=2}                      -- строит график для файла с учётом цвета и толщины маркеров
{tbl, with='lines'}                          -- строит график для Lua таблицы с помощью линий
title='Graph name'                           -- имя графика в целом
xrange={0,10}                                -- диапазон x от 0 до 10
yrange={-2,2}                                -- диапазон y
zrange={0,5}                                 -- диапазон z
trange={1,2}                                 -- изменение параметра в случае параметрической функции
xtitle='A', ytitle='B'                       -- имена осей
terminal='jpeg'                              -- сохранение результата в файл
output='my_plot.jpg'                         -- имя файла для вывода результата
parametric=true                              -- параметрическое представление функции
size='square'                                -- установить квадратный размер изображения
polar=true                                   -- график в полярных координатах
grid='polar'                                 -- изменить тип сетки на полярный
legend=false                                 -- отключить легенду
surface=true                                 -- построение трёхмерного графика
samples=200                                  -- задать число точек на графике
raw='set pm3d'                               -- позволяет написать команды Gnuplot в явном виде
]],
["Gp()"]                 = [[Подготовка таблицы для Gnuplot.]],
["show(G)"]              = [[Строит график на основе параметров, представленных в виде таблицы Lua.]],
["tplot(v,[x,y1,y2..])"] = [[Построение графика на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
["tsurf(v,[x1,y1,z1,z2..])"] = [[Построение графика поверхности на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
["surfplot(x1,y1,fn1,[nm,[x2,y2..]])"] = [[Построение поверхности. 'x' и 'y' - списки чисел, 'fn' - функция двух агрументов, 'nm' - имя поверхности.]],
["copy(G)"]              = [[Возвращает копию параметров графика.]],
["add(tCurve)"]          = [[Добавить функцию для построения.]],
["plot(x1,[y1,[nm,[x2,..]]])"] = [['x' - список чисел, 'y' - список или функция, 'nm' - имя кривой.]],
},
---------- numeric.lua ----------
Num = {
["__module__"]           = [[Функции для численных расчётов. Все функции работают с точностью, определяемой параметром TOL.]],
["solve(fn,dA,dB)"]      = [[Поиск корня уравнения fn(x)=0 на интервале [a,b].]],
["der(fn,x)"]            = [[Оценка производной функции в точке.]],
["TOL[=0.001]"]          = [[Точность решения.]],
["ode45(fn,tDelta,y0[,param])"] = [[Численное решение ОДУ.
Первый параметр задаёт уравнение, второй - временной интервал, третий - начальное значение функции. Дополнительно можно определить такие параметры как шаг интегрирования и условие прерывания.
Возвращает таблицу промежуточных точек и конечное значение yn.]],
["Newton(fn,d0)"]        = [[Поиск корня методом Ньютона в окрестностях заданной точки.]],
["trapez(fn,a,b)"]       = [[Интегрирование методом трапеций.]],
},
---------- array.lua ----------
Arr = {
["__module__"]           = [[Операции с массивами, т.е. многомерными упорядоченными последовательностями элементов. Индексы задаются в виде таблицы. Индексация с единицы.]],
["copy(A)"]              = [[Возвращает копию массива.]],
--["comparison"]           = [[a == b, a ~= b]],
["apply(fn, ...)"]       = [[Формирует новый массив путём применения функции к одному или нескольким исходным.]],
["next(A)"]              = [[Итератор, который при каждом вызове возвращает индекс и элемент множества.]],
["Arr(tSize)"]           = [[Создаёт пустой массив заданного размера.]],
["get(A,tInd)"]          = [[Возвращает значение заданного элемента.]],
["capacity(A)"]          = [[Возвращает максимальное число элементов в массиве. Эквивалентно #A.]],
["rand(tSize)"]          = [[Создаёт массив случайных чисел от 0 до 1.]],
["concat(A1,A2,iAxis)"]  = [[Формирует новый массив путём объединения двух исходных по заданной оси.]],
["map(A,fn)"]            = [[Формирует новый массив путём применения функции к элементам исходного.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, -a, a^b]],
["sub(A,tInd1,tInd2)"]   = [[Возвращает массив, ограниченный двумя индексами.]],
["isEqual(A1,A2)"]       = [[Сравнение размерностей массивов.]],
["dim(A)"]               = [[Возвращает размерность массива.]],
["set(A,tInd,v)"]        = [[Присваивание значения заданному элементу.]],
},
---------- asciiplot.lua ----------
Ap = {
["__module__"]           = [[Визуализация данных с помощью псевдо-графики.]],
["reset(F[,bAxis=true,bLimits=true])"] = [[Очистка холста, определение отображаемых элементов.]],
["addPose(F,ir,ic,s)"]   = [[Установка символа s в указанную позицию.]],
["scale(F,factor)"]      = [[Изменить размер графика относительно размеров по-умолчанию.]],
["plot(F,...)"]          = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
["concat(...)"]          = [[Горизонтальное объединение графиков равного размера. Для двух объектов можно использовать оператор '..' .]],
["addPoint(F,dx,dy,s)"]  = [[Добавить точку с координатами (dx,dy) с помощью символа 's'.]],
["copy(F)"]              = [[Возвращает копию объекта.]],
["tplot(F,t[,tOpt={}])"] = [[Построение графика на основе таблицы, можно указать номера столбцов и дополнительные опции.]],
["Ap(dwidth,dheight)"]   = [[Новый график.]],
["addString(F,ir,ic,s)"] = [[Добавление строки в указанную позицию.]],
},
---------- stat.lua ----------
Stat = {
["__module__"]           = [[Статистические вычисления. Исходные данные представлены в виде Lua таблиц.]],
["min(t)"]               = [[Возвращает наименьший элемент и его индекс.]],
["std(t[,tw])"]          = [[Возвращает математическое ожидание и дисперсию.]],
["sum(t)"]               = [[Возвращает сумму элементов.]],
["median(t)"]            = [[Медиана списка.]],
["max(t)"]               = [[Максимальный элемент и его индекс.]],
["tpdf(d,N)"]            = [[Плотность распределения Стьюдента.]],
["harmmean(t[,tw])"]     = [[Гармоническое среднее.]],
["tcdf(d,N)"]            = [[Распределение Стьюдента.]],
["mean(t[,tw])"]         = [[Вычисляет среднее значение.]],
["histcounts(X[,rng=10])"] = [[Распределение данных по интервалам. Можно указать число интервалов разбиения, либо задать границы в виде таблицы.]],
["geomean(t[,tw])"]      = [[Геометрическое среднее.]],
["moment(N,t[,tw])"]     = [[Центральный момент x порядка n (с весами p).]],
["freq(t)"]              = [[Возвращает таблицу частот элементов.]],
},
---------- special.lua ----------
Spec = {
["__module__"]           = [[Специальные функции.]],
["bessely(n,x)"]         = [[Функция Бесселя второго рода.]],
["besselk(N,x)"]         = [[Модифицированная функция Бесселя Kn(x).]],
["gamma(z)"]             = [[Гамма-функция.]],
["dawson(x)"]            = [[Интеграл Доусона.]],
["erf(x)"]               = [[Функция ошибки.]],
["besselj(N,x)"]         = [[Функция Бесселя первого рода.]],
["expint(n,x)"]          = [[Экспоненциальный интеграл En(x).]],
["legendre(n,x)"]        = [[Список коэффициентов полиномов Лежандра.]],
["gammq(N,x)"]           = [[Неполная гамма-функция Q(N,x) = 1-P(N,x).]],
["besseli(N,x)"]         = [[Модифицированная функция Бесселя In(x).]],
["gammp(N,x)"]           = [[Неполная гамма-функция P(N,x).]],
["gammaln(z)"]           = [[Натуральный логарифм гамма-функции.]],
["betaln(z,w)"]          = [[Натуральный логарифм бета-функции.]],
["beta(z,w)"]            = [[Бета-функция.]],
["erfc(x)"]              = [[Дополнительная функция ошибки.]],
["betainc(x,a,b)"]       = [[Неполная бета-функция Ix(a,b).]],
["gammainc(x,N[,type='lower'])"] = [[Неполная гамма-функция, P (lower - нижняя) или Q (upper - верхняя).]],
},
---------- polynomial.lua ----------
Poly = {
["__module__"]           = [[Действия над полиномами.]],
["fit(tX,tY,N)"]         = [[Аппроксимация точек полиномом заданной степени.]],
["spline(tX,tY)"]        = [[Интерполяция данных кубическими сплайнами. Возвращает таблицу полиномов.]],
["val(P,v)"]             = [[Вычисляет значение полинома в заданной точке. Эквивалентно вызаву P(x).]],
["lin(tX,tY[,v0=0,vN=v0])"] = [[Линейная интерполяция. Возвращает таблицу полиномов.]],
["der(P)"]               = [[Первая производная полинома.]],
["ppval(tP,d[,N]"]       = [[Вычисляет значение интерполяции из таблицы полиномов, можно использовать индекс полинома для ускорения расчёта.]],
--["comparison"]           = [[a==b, a~=b]],
["Poly(...)"]            = [[Создаёт полином на основе списка коэффициентов.]],
["build(root1,root2,...)"] = [[Строит полином на основе списка корней.]],
["int(P[,d0=0])"]        = [[Первообразная полинома, x0 - свободный коэффициент.]],
["roots(P)"]             = [[Поиск действительных и комплексных корней полинома.]],
["taylor(v,vF[,vF',vF''..])"] = [[Формирует полином Тейлора в окрестности заданной точки.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
["real(P)"]              = [[Возвращает список действительных корней полинома.]],
["copy(P)"]              = [[Возвращает копию полинома.]],
["lagrange(tX,tY)"]      = [[Интерполяция данных полиномом Лагранжа.]],
},
}