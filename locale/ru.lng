---------- locale/ru.lng ----------
{
language = 'Русский',
authors  = [[Станистав Михель]],
---------- dialog ----------
Dialog = {
["done"]                 = [[Выполнено.]],
["use_import"]           = [[

Используйте
  use 'модуль' или use {'модульA','модульB' ...}
для подключения дополнительных модулей.
]],
["intro"]                = [[-------- help([функция]) = справка --------------
---------- use([модуль]) = импорт функций -------
----------------- quit() = выход ----------------
]],
},
---------- main.lua ----------
Main = {
["__module__"]           = [[Программа для математических расчётов на Lua.]],
["Log(sFlag)"]           = [[Сохранение сессии в файл лога. Используйте 'on'/'off' чтобы запустить/остановить процесс.]],
["asin(d)"]              = [[Арксинус x.]],
["tan(d)"]               = [[Тангенс x.]],
["Map(fn,t)"]            = [[Вычисляет функцию для всех элементов списка (таблицы), возвращает новый список.]],
["_pi"]                  = [[Число pi.]],
["sin(d)"]               = [[Синус x.]],
["abs(d)"]               = [[Абсолютная величина.]],
["Range(dBegin,dEnd,[dStep])"] = [[Генерация диапазона чисел.]],
["_ans"]                 = [[Результат последней операции.]],
["Type(v)"]              = [[Печатает тип объекта, распознаёт типы, заданные в Sonata.]],
["cos(d)"]               = [[Косинус x.]],
["Round(f,[N=0])"]       = [[Округление числа до заданного количества десятичных знаков.]],
["Print(...)"]           = [[Дополненная функция печати, показывает элементы таблицы, представляет числа в н "научно" виде.]],
["randn([dMean=0,dev=1])"] = [[Нормально распределённая случайная величина с заданным средним значением и дисперсией.]],
["tanh(d)"]              = [[Гиперболический тангенс.]],
["acos(d)"]              = [[Арккосинус x.]],
["sqrt(dPos)"]           = [[Квадратный корень.]],
["rand()"]               = [[Случайное число от 0 до 1.]],
["Run(sFile,[bInt=false])"] = [[Выполнить lua- или note- файл. Установите флаг bInt для интерактивного выполнения.]],
["cosh(d)"]              = [[Гиперболический косинус.]],
["atanh(x)"]             = [[Гиперболический арктангенс.]],
["log(dPos)"]            = [[Натуральный логарифм.]],
["randi(N)"]             = [[Случайное целое число от 1 до N.]],
["exp(d)"]               = [[Экспонента.]],
["sinh(d)"]              = [[Гиперболический синус.]],
["acosh(x)"]             = [[Гиперболический арккосинус.]],
["atan2(dy,dx)"]         = [[Арктангенс dy/dx с учётом знака.]],
["_e"]                   = [[Число Эйлера.]],
["asinh(x)"]             = [[Гиперболический арксинус.]],
},
---------- matrix.lua ----------
Mat = {
["__module__"]           = [[Операции с матрицами. На нулевые элементы память не расходуется. Индексация с единицы.]],
["Mat {tRow1,tRow2,..}"] = [[Создаёт матрицу на основе списка строк.]],
["reshape([iRows=size,iCols=1])"] = [[Изменить размер матрицы.]],
["Mat:zeros(rows,[cols=rows])"] = [[Формирует матрицу нулей.]],
["Mat:zip(fn,M1,M2,...)"] = [[Поэлементно применяет функцию к матрицам для формирования новой матрицы.]],
["concat(M,sDir)"]       = [[Объединяет две матрица горизонтально (dir='h') или вертикально (dir='v').
Горизонтальная конкатенация доступна в виде M1 .. M2, а вертикальная - M1 // M2.]],
["copy()"]               = [[Возвращает копию матрицы.]],
["Mat:V({...})"]         = [[Преобразует список чисел в вектор.]],
["inv()"]                = [[Обратная матрица.]],
["pinv()"]               = [[Вовзращает псевдо-обратную матрицу.]],
["rref()"]               = [[Преобразование матрицы методом Гаусса.]],
["lu()"]                 = [[LU преобразование матрицы. Возвращает L,U и P.]],
["Mat:fill(iRows,iCols,[val=1])"] = [[Создать матрицу, заполненную заданным числом.]],
["round([N=6])"]         = [[Округлить все элементы матрицы до заданного числа знаков.]],
["T()"]                  = [[Транспонирование матрицы. Эквивалентно T().]],
["insert(tR,tC,M)"]      = [[Вставляет матрицу в заданный диапазон строк и столбцов.]],
["norm()"]               = [[Евклидова норма.]],
["chol()"]               = [[Преобразование Холески для положительно определённой симметричной матрицы.]],
["diag()"]               = [[Извлекает диагональные элементы либо формирует новую матрицу из вектора. n - индекс диагонали.]],
["cols()"]               = [[Число столбцов.]],
["qr()"]                 = [[QR разложение матрицы. Возвращает Q и R.]],
["tr()"]                 = [[След матрицы.]],
["map(fn)"]              = [[Формирует новую матрицу путём применения указанной функции к исходной. Функция может зависеть как от элементов, f(x) так и от индексов f(x,row,col).]],
["det()"]                = [[Определитель матрицы.]],
["dot(V)"]               = [[Скалярное произведение векторов.]],
["rows()"]               = [[Число строк.]],
["table()"]              = [[Преобразует матрицу в обыкновенную Lua таблицу.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
--["comparison"]           = [[a==b, a~=b]],
["Mat:eye(iRows,[iCols=iRows])"] = [[Единичная матрица.]],
["range(tR,tC)"]         = [[Возвращает подматрицу с заданным интервалом строк и столбцов.]],
["rank()"]               = [[Возвращает ранг матрицы.]],
["cross(V)"]             = [[Векторное произведение 3-элементных векторов.]],
["H()"]                  = [[Сопряженная транспонированная матрица.]],
},
---------- array.lua ----------
Arr = {
["__module__"]           = [[Операции с массивами, т.е. многомерными упорядоченными последовательностями элементов. Индексы задаются в виде таблицы. Индексация с единицы.]],
["sub(tInd1,tInd2)"]     = [[Возвращает массив, ограниченный двумя индексами.]],
["get(tInd)"]            = [[Возвращает значение заданного элемента.]],
["capacity()"]           = [[Возвращает максимальное число элементов в массиве. Эквивалентно #A.]],
["set(tInd,v)"]          = [[Присваивание значения заданному элементу.]],
["concat(A,iAxis)"]      = [[Формирует новый массив путём объединения двух исходных по заданной оси.]],
["dim()"]                = [[Возвращает размерность массива.]],
["map(fn)"]              = [[Формирует новый массив путём применения функции к элементам исходного.]],
["isEqual(A)"]           = [[Сравнение размерностей массивов.]],
["copy()"]               = [[Возвращает копию массива.]],
["Arr {n1,n2,..}"]       = [[Создаёт пустой массив заданного размера.]],
["ipairs()"]             = [[Итератор, который при каждом вызове возвращает индекс и элемент множества.]],
["Arr:zip(fn, ...)"]     = [[Применяет функцию к списку массивов для получения нового массива.]],
--["comparison"]           = [[a == b, a ~= b]],
},
---------- geodesy.lua ----------
Geo = {
["__module__"]           = [[Преобразования координат и другие геодезические задачи.]],
["Geo:grav(dB)"]         = [[Международная формула гравитации, аргумент в радианах.]],
["projM(tBL)"]           = [[Возвращает северное и восточное положение точки в проекции Меркатора.]],
["toBLH(tXYZ)"]          = [[Приобразовать геоцентрические координаты в геодезические.]],
["A.blhInto[B]"]         = [[Возвращает функцию для преобразования геодезических координат из A в B с помощью метода Молоденского.]],
["Geo:fromENU(tBLr,tXYZr,tTop)"] = [[Преобразовать топоцентрические координаты точки в геоцентрические.]],
["Geo:toENU(tBLr,tXYZr,tCatr)"] = [[Преобразовать геоцентрические координаты точки в топоцентрические.]],
["A.xyzInto[B]"]         = [[Возвращает функцию для преобразования геоцентрических координат из системы A в B.]],
["solveDir(BLH,azimuth,dist)"] = [[Решение прямой задачи геодезии, поиск положения и азимута второй точки при заданных начальной точке, направлении и расстоянии.]],
["solveInv(BLH1,BLH2)"]  = [[Решение обратной задачи геодеции, поиск расстояния и азимутов для двух заданных точек.]],
["projGK(tBL)"]          = [[Вовзращает северное и восточное положение точки в проекции Гаусса-Крюгера.]],
["toXYZ(tBLH)"]          = [[Преобразует геодезические координаты в геоцентрические.]],
["Geo:dms2rad(d,[m=0,s=0])"] = [[Преобразует градусы, минуты и секунды в радианы.]],
["Geo:deg2dms(d)"]       = [[Возвращает градусы, минуты и секунды для заданного угла в градусах.]],
},
---------- const.lua ----------
_C = {
["__module__"]           = [[Разнообразные константы.]],
["astro.pc"]             = [[Один парсек.]],
["phy.e"]                = [[Заряд электрона.]],
["phy.sigma"]            = [[Постоянная Стефана-Больцмана.]],
["phy.NA"]               = [[Число Авогадро.]],
["math.phi"]             = [[Золотое сечение.]],
["math.pi"]              = [[Отношение длины окружности к её диаметру.]],
["phy.c"]                = [[Скорость света.]],
["_C:remove(sName)"]     = [[Удаление константы.]],
["phy.Rinf"]             = [[Постоянная Ридберга.]],
["phy.Vm"]               = [[Объём моля идеального газа.]],
["phy.g"]                = [[Ускорение свободного падения.]],
["phy.G"]                = [[Гравитационная постоянная.]],
["phy.k"]                = [[Постоянная Больцмана.]],
["_C:add(sName,value,[sUnits])"] = [[Добавление временной константы.]],
["phy.h"]                = [[Число планка.]],
["math.e"]               = [[Основание натурального логарифма.]],
["phy.R"]                = [[Универсальная газовая постоянная.]],
["phy.mu0"]              = [[Магнитная постоянная.]],
["phy.eps0"]             = [[Электрическая постоянная.]],
["astro.ly"]             = [[Световой год.]],
},
---------- quaternion.lua ----------
Quat = {
["__module__"]           = [[Операции над кватернионами.]],
["z()"]                  = [[Компонента z.]],
["x()"]                  = [[Компонента x.]],
["toRot()"]              = [[Возвращает эквивалентную матрицу вращения.]],
["abs()"]                = [[Норма кватерниона.]],
["Quat:fromAA(fAng,vAxe)"] = [[Возвращает кватернион для заданного угла и оси вращения.]],
["inv()"]                = [[Возвращает крватернион, обратный к данному.]],
["y()"]                  = [[Компонента y.]],
["Quat:fromRot(M)"]      = [[Строит кватернион на основе угла поворота и оси вращения.]],
["mat()"]                = [[Представление в виде эквивалентной матрицы.]],
["rotate(vec)"]          = [[Возвращает вектор, полученный при вращении с помощью заданного кватерниона.]],
["im()"]                 = [[Возвращает таблицу мнимых элементов кватерниона.]],
["normalize()"]          = [[Возвращает единичный кватернион.]],
["slerp(Q,f)"]           = [[Сферическая линейная интерполяция двух кватернионов.]],
--["arithmetic"]           = [[a + b, a - b, a * b, a ^ k, -a]],
--["comparison"]           = [[a == b, a ~= b]],
["re()"]                 = [[Действительная часть (эквивалентно Q.w).]],
["Quat {w,x,y,z}"]       = [[Новый кватернион.]],
["toAA()"]               = [[Возвращает угол поворота и ось вращения.]],
["conj()"]               = [[Сопряжённый кватернион.]],
["w()"]                  = [[Действительная часть w.]],
},
---------- bigint.lua ----------
Int = {
["__module__"]           = [[Вычисления с целыми числами произвольной длины.]],
["factorize()"]          = [[Возвращает список простых множителей для данного числа.]],
["gcd(B)"]               = [[Наибольший общий делитель.]],
["Int(v)"]               = [[Создаёт большое целое число на основе числа, строки или таблицы.]],
["Int:random(B)"]        = [[Псевдо-случайное число от 0 до B.]],
["fact()"]               = [[Вычисляет факториал целого неотрицательного числа.]],
["rebase(N)"]            = [[Конвертирует число в новую систему счисления.]],
["isPrime([sMethod])"]   = [[Проверка числа на простоту. Установите метод 'Fermat' для использования малой теоремы Ферма.]],
["eq(B)"]                = [[Проверка равенства двух чисел.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
["float()"]              = [[Представление в виде числа с плавающей точкой.]],
["abs()"]                = [[Возвращает модуль числа.]],
["at(N)"]                = [[Возвращает цифру в позиции N.]],
["base()"]               = [[Возвращает основание системы счисления.]],
},
---------- numeric.lua ----------
Num = {
["__module__"]           = [[Функции для численных расчётов. Все функции работают с точностью, определяемой параметром TOL.]],
["Num:solve(fn,dA,dB)"]  = [[Поиск корня уравнения fn(x)=0 на интервале [a,b].]],
["Num:Newton(fn,d0)"]    = [[Поиск корня методом Ньютона в окрестностях заданной точки.]],
["Num:ode45(fn,tDelta,y0,[param])"] = [[Численное решение ОДУ.
Первый параметр задаёт уравнение, второй - временной интервал, третий - начальное значение функции. Дополнительно можно определить такие параметры как шаг интегрирования и условие прерывания.
Возвращает таблицу промежуточных точек и конечное значение yn.]],
["Num:der(fn,x)"]        = [[Оценка производной функции в точке.]],
["Num:trapez(fn,a,b)"]   = [[Интегрирование методом трапеций.]],
["TOL[=0.001]"]          = [[Точность решения.]],
},
---------- complex.lua ----------
_Z = {
["__module__"]           = [[Вычисления с комплексными числами.]],
["asinh()"]              = [[Комплексный обратный гиперболический синус.]],
["re()"]                 = [[Действительная часть.]],
["im()"]                 = [[Мнимая часть.]],
["sin()"]                = [[Комплексный синус.]],
["_Z([vRe=0,vIm=0])"]    = [[Создание комплексного числа.]],
["cosh()"]               = [[Комплексный гиперболический косинус.]],
["asin()"]               = [[Комплексный обратный синус.]],
["abs()"]                = [[Модуль комплексного числа.]],
["conj()"]               = [[Комплексно-сопряженное число. Эквивалентно ~C.]],
["acos()"]               = [[Комплексный обратный косинус.]],
["acosh()"]              = [[Комплексный обратный гиперболический косинус.]],
["_Z:trig(vModule,vAngle)"] = [[Создание комплексного числа по модули и агрументу.]],
["tanh()"]               = [[Комплексный гиперболический тангенс.]],
["atan()"]               = [[Комплексный обратный тангенс.]],
["sinh()"]               = [[Комплексный гиперболический синус.]],
["tan()"]                = [[Комплексный тангенс.]],
["sqrt()"]               = [[Комплексный квадратный корень.]],
["round([N=6])"]         = [[Возвращает число с округлением до заданного количества знаков.]],
["cos()"]                = [[Комплексный косинус.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
--["comparison"]           = [[a==b, a~=b]],
["atanh()"]              = [[Комплексный обратный гиперболический тангенс.]],
["exp()"]                = [[Комплексная экспонента.]],
["log()"]                = [[Комплексный логарифм.]],
["_Z:i([v=1])"]          = [[Возвращает комплексное число v*i.]],
["arg()"]                = [[Возвращает агрумент комплексного числа.]],
},
---------- units.lua ----------
Unit = {
["__module__"]           = [[Операции с единицами измерения.]],
--["arithmetic"]           = [[U1+U2, U1-U2, U1*U2, U1/U2, U1^N]],
--["comparison"]           = [[U1==U2, U1~=U2, U1<U2, U1<=U2, U1>U2, U1>=U2]],
["Unit(v,[u])"]          = [[Создание числа и/или единиц измерения.]],
["prefix"]               = [[Таблица дольных и кратных приставок.]],
["convert(fn)"]          = [[Преобразование единиц измерения, возвращает новый объект или nil.]],
["copy()"]               = [[Создание копии объекта с его единицами измерения.]],
["Unit:add(U,rule)"]     = [[Добавление нового правила преобразования единиц измерения.]],
},
---------- special.lua ----------
Spec = {
["__module__"]           = [[Специальные функции.]],
["Spec:bessely(n,x)"]    = [[Функция Бесселя второго рода.]],
["Spec:betaln(z,w)"]     = [[Натуральный логарифм бета-функции.]],
["Spec:gammp(N,x)"]      = [[Неполная гамма-функция P(N,x).]],
["Spec:gammainc(x,N,[type='lower'])"] = [[Неполная гамма-функция, P (lower - нижняя) или Q (upper - верхняя).]],
["Spec:dawson(x)"]       = [[Интеграл Доусона.]],
["Spec:gammq(N,x)"]      = [[Неполная гамма-функция Q(N,x) = 1-P(N,x).]],
["Spec:gammaln(z)"]      = [[Натуральный логарифм гамма-функции.]],
["Spec:gamma(z)"]        = [[Гамма функция.]],
["Spec:legendre(n,x)"]   = [[Список коэффициентов полиномов Лежандра.]],
["Spec:besselj(N,x)"]    = [[Функция Бесселя первого рода.]],
["Spec:beta(z,w)"]       = [[Бета-функция.]],
["Spec:erf(x)"]          = [[Функция ошибки.]],
["Spec:besselk(N,x)"]    = [[Модифицированная функция Бесселя Kn(x).]],
["Spec:besseli(N,x)"]    = [[Модифицированная функция Бесселя In(x).]],
["Spec:betainc(x,a,b)"]  = [[Неполная бета-функция Ix(a,b).]],
["Spec:erfc(x)"]         = [[Дополнительная функция ошибки.]],
["Spec:expint(n,x)"]     = [[Экспоненциальный интеграл En(x).]],
},
---------- rational.lua ----------
Rat = {
["__module__"]           = [[Операции с числами, представленными в виде дроби.]],
["eq(R)"]                = [[Проверка равенства двух чисел.]],
["num()"]                = [[Возвращает числитель.]],
["Rat:gcd(va,vb)"]       = [[Наибольший общий делитель.]],
["Rat:from(f,[N=5])"]    = [[Получение дроби из числа в десятичном виде.]],
["denom()"]              = [[Возвращает знаменатель.]],
--["arithmetic"]           = [[R1+R2, R1-R2, R1*R2, R1/R2, -R, R1^R2]],
--["comparison"]           = [[R1<R2, R1<=R2, R1>R2, R1>=R2, R1==R2, R1~=R2]],
["Rat(m,[n=1])"]         = [[Для создания рационального числа укажите числитель и (опционально) знаменатель.]],
["float()"]              = [[Представление рационального числа в десятичном виде.]],
},
---------- asciiplot.lua ----------
Ap = {
["__module__"]           = [[Визуализация данных с помощью псевдо-графики.]],
["bar(t,[vy=2,ix=1])"]   = [[Столбчатая диаграмма. vy может быть индексом y в таблице t либо списком y-в.]],
["reset()"]              = [[Очистка холста.]],
["Ap([iWidth=75,iHeight=23])"] = [[Новый график.]],
["addString(ir,ic,s)"]   = [[Добавление строки в указанную позицию.]],
["plot(...)"]            = [[Построение графиков данных для аргументов типа 't', 't1,t1', 'fn,nm', 'fn1,fn2' и т.д.]],
["scale(factor,[bDefault=false])"] = [[Изменить размер графика относительно начальных размеров.]],
["addPoint(dx,dy,s)"]    = [[Добавить точку с координатами (dx,dy) с помощью символа 's'.]],
["addPose(ir,ic,s)"]     = [[Установка символа s в указанную позицию.]],
["tplot(t,[tOpt={}])"]   = [[Построение графика на основе таблицы, можно указать номера столбцов и дополнительные опции.]],
["Ap:concat(...)"]       = [[Горизонтальное объединение графиков равного размера. Для двух объектов можно использовать оператор '..' .]],
["copy()"]               = [[Возвращает копию объекта.]],
},
---------- data.lua ----------
Data = {
["__module__"]           = [[Обработка данных и статистические расчёты.]],
["Data:harmmean(t,[tw])"] = [[Гармоническое среднее.]],
["Data:isNot(t,fn)"]     = [[Возвращает инвертированные веса для булевой функции.]],
["Data:median(t)"]       = [[Возвращает медиану распределения.]],
["Data:xGt(d)"]          = [[Возвращает функцию для условия x > d.]],
["Data:Fn(sExpr,[iArg=2])"] = [[Генерирует функцию из строки с параметрами x1, x2 и т.д.]],
["Data:xEq(d)"]          = [[Возвращает функцию для условия x == d.]],
["Data:geomean(t,[tw])"] = [[Геометрическое среднее.]],
["Data:std(t,[tw])"]     = [[Возвращает стандартное отклонение и дисперсию.]],
["Data:zip(fn,...)"]     = [[Последовательно применяет функцию к списку векторов.]],
["Data:is(t,fn)"]        = [[Возвращает массив весов на основе булевой функции.]],
["Data:mean(t,[tw])"]    = [[Вычисляет среднее значение.]],
["Data:csvwrite(sFile,t,[char=',',bCol=false])"] = [[Сохраняет таблицу в файл с заданным разделителем.]],
["Data:csvread(sFile,[delim=',',bCol=false])"] = [[Формирует таблицу на основе файла с заданным разделителем.]],
["Data:tcdf(d,N)"]       = [[Распределение Стьюдента.]],
["Data:cov2(t1,t2)"]     = [[Вычисляет ковариацию для двух списков.]],
["Data:xLt(d)"]          = [[Возвращает функцию для условия x < d.]],
["Data:freq(t)"]         = [[Возвращает таблицу частот элементов.]],
["Data:histcounts(X,[rng=10])"] = [[Распределение данных по интервалам. Можно указать число интервалов разбиения, либо задать границы в виде таблицы.]],
["Data:sum(t)"]          = [[Возвращает сумму элементов.]],
["Data:tpdf(d,N)"]       = [[Плотность распределения Стьюдента.]],
["Data:max(t)"]          = [[Максимальный элемент и его индекс.]],
["Data:ref(t,[iBeg=1,iEnd=#t])"] = [[Возвращает "ссылку" на таблицу элементов.]],
["Data:xIn(d1,d2)"]      = [[Возвращает функцию для условия d1 <= x <= d2.]],
["Data:moment(N,t,[tw])"] = [[Центральный момент t порядка N (с весами tw).]],
["Data:min(t)"]          = [[Возвращает наименьший элемент и его индекс.]],
["Data:filter(t,vCond)"] = [[Вильтрует список данных. Условием является булева функция или массив весов.]],
["Data:cov(t)"]          = [[Возвращает матрицу ковариации для списка векторов.]],
},
---------- graph.lua ----------
Graph = {
["__module__"]           = [[Операции с графами.]],
["nodes()"]              = [[Возвращает список узвло графа.]],
["bfs(vStart,vGoal)"]    = [[Поиск в ширину. Возвращает флаг результата и найденный путь.]],
["isDirected()"]         = [[True если граф направленный.]],
["isWeighted()"]         = [[True если граф взвешенный.]],
["Graph {v1,v2,..}"]     = [[Создает новый граф.]],
["remove(v)"]            = [[Удаляет узел или ребро. Узлы представляются именем, рёбра - двухэлементным списком.]],
["pathD(vStart,[vGoal])"] = [[Поиск кратчайшего пути алгоритмом Дейкстры. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["edges()"]              = [[Возвращает список рёбер.]],
["pathBF(vStart,[vGoal])"] = [[Поиск кратчайшего пути алгоритмом Беллмана-Форда. Возвращает таблицу расстояний и узлов. Если задана цель, возвращает путь и его длину.]],
["isNegative()"]         = [[True если граф содержит отрицательные веса.]],
["dfs(vStart,vGoal)"]    = [[Поиск в глубину. Возвращает флаг результата и найденный путь.]],
["copy()"]               = [[Создаёт копию графа.]],
["add(v)"]               = [[Добавляет узел (одиночное имя) или ребро. Ребро представлено списком, содержащим начало, конец и, при необходимости, вес (веса).]],
["isComplete()"]         = [[True если граф полный.]],
},
---------- gnuplot.lua ----------
Gp = {
["__module__"]           = [[Интерфейс для взаимодействия с Gnuplot.]],
["Gp:tpolar(v,[x,y1,y2..])"] = [[График в полярных координатах для таблицы, матрицы или файла. Опциональные элементы определяют стоблцы.]],
["Gp:tplot(v[,x,y1,y2..])"] = [[Построение графика на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
["keys"]                 = [[  Описание параметров:
{math.sin, title='sin'}                      -- строит график для Lua функции, добавляет текст в легенду
{'sin.dat', ln=1, lw=2}                      -- строит график для файла с учётом цвета и толщины маркеров
{tbl, with='lines'}                          -- строит график для Lua таблицы с помощью линий
title='Graph name'                           -- имя графика в целом
xrange={0,10}                                -- диапазон x от 0 до 10
yrange={-2,2}                                -- диапазон y
zrange={0,5}                                 -- диапазон z
trange={1,2}                                 -- изменение параметра в случае параметрической функции
xtitle='A', ytitle='B'                       -- имена осей
terminal='jpeg'                              -- сохранение результата в файл
output='my_plot.jpg'                         -- имя файла для вывода результата
parametric=true                              -- параметрическое представление функции
size='square'                                -- установить квадратный размер изображения
polar=true                                   -- график в полярных координатах
grid='polar'                                 -- изменить тип сетки на полярный
legend=false                                 -- отключить легенду
surface=true                                 -- построение трёхмерного графика
samples=200                                  -- задать число точек на графике
raw='set pm3d'                               -- позволяет написать команды Gnuplot в явном виде
]],
["Gp:plot(x1[,y1,nm,x2,..])"] = [['x' - список чисел, 'y' - список или функция, 'nm' - имя кривой.]],
["Gp:surfplot(x1,y1,fn1,[nm,x2,y2..])"] = [[Построение поверхности. 'x' и 'y' - списки чисел, 'fn' - функция двух агрументов, 'nm' - имя поверхности.]],
["show()"]               = [[Строит график на основе параметров, представленных в виде таблицы Lua.]],
["copy()"]               = [[Возвращает копию параметров графика.]],
["add(tCurve)"]          = [[Добавить функцию для построения.]],
["Gp:tsurf(v,[x1,y1,z1,z2..])"] = [[Построение графика поверхности на основе таблицы, матрицы или файла. Опциональные элементы определяют необходимые столбцы.]],
["Gp:polarplot(x1,y1,[nm,x2,y2..])"] = [[График в полярных координатах. 'x' - список чисел, 'y' - список либо функция, 'nm' - имя кривой.]],
["Gp()"]                 = [[Подготовка таблицы для Gnuplot.]],
},
---------- lens.lua ----------
Lens = {
["__module__"]           = [[Матричные методы в параксиальной оптике.]],
["Lens:afocal(dm)"]      = [[Возвращает матрицу для афокальной системы.]],
["Lens:ref(dr,dn1,dn2)"] = [[Возвращает матрицу для преломления с учётом показателей преломления и радиуса кривизны поверхности.]],
--["operations"]           = [[L1 == L2, L1 .. L2]],
["inv()"]                = [[Инвертированная матрица системы.]],
["Lens:thin(df)"]        = [[Возвращает матрицу для тонкой линзы при заданном фокальном расстоянии.]],
["Lens:solve(fn,ind,d0)"] = [[Поиск условий, при которых компонент с заданным индексом равен 0. d0 - начальное предположение.]],
["cardinal([dn1=1,dn2=1])"] = [[Поиск положения кардинальных точек системы относительно входных и выходных плоскостей, с учётом показателей преломления. Возвращает список расстояний.]],
["isUnit()"]             = [[Проверка, является ли матрица единичной.]],
["transform(dy,dV)"]     = [[Определяет положение луча 'dy' и оптический угол 'dV' (= v*n) на выходе оптической системы. Эквивалентно вызову L(dy,dV).]],
["Lens:mirror(dr,dn)"]   = [[Возвращает матрицу отражения на кривой поверхности с учётом показателя преломления.]],
["Lens:trans(dt,dn)"]    = [[Возвращает матрицу перемещения с учётом показателя преломления.]],
["copy()"]               = [[Возвращает копию объекта.]],
["Lens {dA,dB,dC,dD}"]   = [[Новый объект с произвольными параметрами A, B, C, D.]],
["det()"]                = [[Возвращает определитель матрицы.]],
},
---------- polynomial.lua ----------
Poly = {
["__module__"]           = [[Действия над полиномами.]],
["der()"]                = [[Первая производная полинома.]],
["real()"]               = [[Возвращает список действительных корней полинома.]],
["Poly:lagrange(tX,tY)"] = [[Интерполяция данных полиномом Лагранжа.]],
["roots()"]              = [[Поиск действительных и комплексных корней полинома.]],
["Poly:fit(tX,tY,N)"]    = [[Аппроксимация точек полиномом заданной степени.]],
["int([d0=0])"]          = [[Первообразная полинома, x0 - свободный коэффициент.]],
["Poly:taylor(v,vF,[vF',vF''..])"] = [[Формирует полином Тейлора в окрестности заданной точки.]],
["Poly:spline(tX,tY)"]   = [[Интерполяция данных кубическими сплайнами. Возвращает таблицу полиномов.]],
["Poly:lin(tX,tY,[v0=0,vN=v0])"] = [[Линейная интерполяция. Возвращает таблицу полиномов.]],
["val(v)"]               = [[Вычисляет значение полинома в заданной точке. Эквивалентно вызаву P(x).]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
--["comparison"]           = [[a==b, a~=b]],
["copy()"]               = [[Возвращает копию полинома.]],
["Poly:ppval(tP,d,[N]"]  = [[Вычисляет значение интерполяции из таблицы полиномов, можно использовать индекс полинома для ускорения расчёта.]],
["Poly {..,v1,v0}"]      = [[Создаёт полином на основе списка коэффициентов.]],
["Poly:build(root1,root2,...)"] = [[Строит полином на основе списка корней.]],
},
}
