-- Welcome to Sonata Lua Calculus!
-- Here you can find some tips about it.
-- Print 'quit' to exit the program. 
-- Press "Enter" to continue...
-- PAUSE

--	BASICS
-- Available functions can be listed using:
help()
-- PAUSE

-- Information about function can be obtained as
help(round)
-- PAUSE

-- By the way, this is an interactive mode.
-- You can enter Lua valid expression after '?>'
-- and see the result. For example, try to get help
-- for any other function. 
-- PAUSE

-- You can calculate arithmetical expressions
-- and create variables. 
x = 3
2*x^2+3*x+5
-- Available constants:
_pi
_e
-- Last result is saved to variable
_ans
-- PAUSE

--	MODULES
-- Additional modules could be loaded 
-- with the help of "use" function.
-- List of modules, aliases and the current status:
help(use)
-- PAUSE 

-- In order to load module, enter 
--    use 'name'
-- or
--    use ('name1')
-- Module will be available for its alias.
use 'array'
a = Arr.rand {2,2,2}      -- new array with size 2x2x2
-- Functions can be called as methods of class
Arr.get(a, {1,1,1})
-- or object
a:get{1,1,1}              -- get element with index (1,1,1)
-- PAUSE

-- Several modules could be loaded as
--    use {'name1','name2'}
-- or 
--    use({'name1','name2'})
use {'complex', 'bigint'}
-- PAUSE

-- It is possible to use alias instead of module name
use 'Num'
-- PAUSE

-- In order to load all modules, enter
use 'all'
-- PAUSE

-- Some modules modify the program environment.
-- For example, if the 'complex' is loaded,
-- you can can work with complex unit
_i
-- and some functions can work with it
sqrt(-4)
exp(3+_i*4)
-- PAUSE

--	Brief module overview
-- PAUSE
--	COMPLEX
-- Operations with complex numbers.
a = Comp(1,2)          -- real and complex components
b = 3+_i*4             -- use complex unit
a / b                  
a ^ b                  -- complex power
sin(b)                 -- modified function behavior
-- PAUSE

--	MATRIX
-- Manipulations with matrices.
a = Mat({      \
  {1, 2},      \
  {3, 4}})             -- write matrix row by row
b = Mat {{5,6},{7,8}}  
a[2][1]                -- get element (indexation from 1)
a[2][1] = 5            -- set new value
a:get(-1,-1)           -- function 'get' can work with negative indices
a:get(1,{1,2})         -- and return submatrix
-- PAUSE
a * b                  -- arithmetic is available 
0.5 * a                -- combination with numbers
b:inv()                -- inverse matrix
b:det()                -- determinant
-- PAUSE
a .. b                 -- horizontal concatenation
c = a // b             -- vertical concatenation
c 
c:pinv()               -- pseudo-inverse
-- PAUSE

--	NUMERIC
-- Numerical solutions for some typical problems.
-- Tolerance is defined with parameter
Num.TOL
fn = function (x)          \
  return 2*sin(x)+sin(2*x) \
end -- introduce some function
Num.Newton(fn, _pi/3)  -- find root near the pi/3
Num.der(fn, _pi/3)     -- estimate derivative in the point
Num.trapez(fn, 0, _pi/3) -- find integral from 0 to pi/3
-- Solve ODE 
t,yn = Num.ode45(                               \
  function(t,y) return t*y end,  -- y' = f(t,y) \
  {1,3},                         -- t = 1..3    \
  1)                             -- y(1) = 1
yn                     -- y(3)
-- PAUSE

--	POLYNOM
-- Work with polynomials.
a = Poly {2,3,4,5}     -- sequence of coefficients, from kn to k0 
b = Poly {1,2} 
a(1)                   -- value of the polynomial for x=1
c = a * b              -- apply arithmetic operations
c:str('s')             -- 'pretty print' representation
b:int(3)               -- integrate polynomial, use initial condition
a:der()                -- differentiation
t = a:real()           -- find real roots
t[1] 
-- PAUSE

--	BIGINT
-- Operations with long integers.
a = Int(1234)          -- create new from number
b = Int '56789'        -- or from string
-- Typical operations are available
a - b
a * b
b^50 
_ans:val()             -- decimal representation
c = Int(50):fact()     -- factorial
a:rebase(42)           -- get value in new numerical base
-- PAUSE

--	ARRAY
-- Provides basic operations with arrays,
-- i.e. multidimensional ordered sequence of elements.
a = Arr {2,3,1}        -- create empty array of size 2x3x1
a:set({1,2,1},3)       -- do a(1,2,1) = 3
a:get{1,2,1}           -- get a(1,2,1) 
b = Arr.rand{2,3,1}    -- random elements
c = a+b                -- element-wise sum
for ind, val in c:next() do    \
  print(string.format("c(%d,%d,%d)=%s", ind[1],ind[2],ind[3],val)) \
end
-- PAUSE

--	CONST
-- Some useful constants.
_C.phy.G                  -- gravitational constant
_C.phy.G_u                -- units of measurement are available with postfix '_u'
-- It is possible to define own constant.
-- It can't be modified.
_C.add('foo',42)
_C.foo
-- ...and remove it
_C.remove('foo')
-- PAUSE

--	GRAPH
-- Manipulations with graphs.
-- Define graph with edges 'ab' and 'bc' and node 'd'
g = Graph {{'a','b'},{'b','c'},'d'}
-- nodes:
for _,v in ipairs(g:nodes()) do \
  print(v)                      \
end
-- edges: 
for _,v in ipairs(g:edges()) do \
  print(v[1],v[2])              \
end
-- default weight is 1
g['a']['b']
-- you can add weighted edges
g:add {'b','e',w=2}
g:add ('f')
-- find path
found, path = g:bfs('a','c')
for _, v in ipairs(path) do  \
  print(v)                   \
end

-- PAUSE

--	RATIONAL
-- Rational numbers.
a = Rat(1,2)
b = Rat(1,3)
-- arithmetics
a + b
a * b
a / b
-- float point representation
a:val()
a:Nu()      -- numerator
a:De()      -- denominator
-- PAUSE

--	SPECIAL
-- Some special functions.
Spec.beta(1,3)
Spec.erf(2)
Spec.gamma(2.2)
Spec.besselj(2, 0.5)
-- PAUSE

--	UNITS
-- Conversation between measurement units.
-- Define rules
Unit.add('h', Unit(60, 'min'))       -- 1 h = 60 min
Unit.add('min', Unit(60, 'sec'))     -- 1 min = 60 sec
-- new variable
v = Unit(2, 'm/sec')
-- convert to 'km/h'
v['km/h']
-- arithmetic is possible
t = Unit(10,'sec')
s = v * t
s
-- PAUSE

--	QUATERNION
-- Quaternions and rotation.
a = Quat{1,2,3,4}        -- {w,x,y,z}
b = Quat{w=3,x=4}        -- y=0 and z=0
-- arithmetics
a + b
a * b
b + 1
a:inv()
-- slerp
Quat.slerp(a,b,0.5)      -- use normalization inside
-- PAUSE 

--	GNUPLOT
-- If you have 'Gnuplot' system, it can be called
-- from the Sonata LC.
-- Plot data in Matlab style.
a = Range(0,6,0.1)
b = Map(sin,a)
plot(a,b)
-- second argument can be function
plot(a,sin,'sin', a,cos,'cos')
-- PAUSE

-- You can make polar plot
polar(a,sin,a,cos)
-- PAUSE

-- or plot surface.
function fun(x,y) return x*x + y*y end
surf(a,a,fun)
-- PAUSE

-- Plot data from table, matrix or file.
function fun(x)             \
  return {x,sin(x),cos(x)}  \
end
b = Map(fun, a)
-- define x,y
tplot(b,1,3)
-- plot all by default
tpolar(b)
-- PAUSE

-- Use 'Gp' if you need more control.
--
-- We wish you a pleasant work with the program!
