--	Brief module overview
use '*'
-- PAUSE
--	COMPLEX
-- Operations with complex numbers.
a = Z(1,2)            -- real and complex components
b = 3+Z:i(4)          -- use complex unit
a / b
a ^ b                  -- complex power
sin(b)                 -- modified function behavior
-- PAUSE

--	MATRIX
-- Manipulations with matrices.
a = Mat({      \
  {1, 2},      \
  {3, 4}})             -- write matrix row by row
b = Mat {{5,6},{7,8}}
a[2][1]                -- get element (indexation from 1)
a[2][1] = 5            -- set new value
a(-1,-1)           -- 'function' call can work with negative indices
a(1,{1,2})         -- and return submatrix
a * b                  -- arithmetic is available
0.5 * a                -- combination with numbers
b:inv()                -- inverse matrix
b:det()                -- determinant
a .. b                 -- horizontal concatenation
c = Mat:ver{a,b}       -- vertical concatenation
c
c:pinv()               -- pseudo-inverse
-- PAUSE

--	NUMERIC
-- Numerical solutions for some typical problems.
-- Tolerance is defined with parameter
Num.TOL
fn = function (x)          \
  return 2*sin(x)+sin(2*x) \
end -- introduce some function
Num:newton(fn, PI/3)  -- find root near the pi/3
Num:der(fn, PI/3)     -- estimate derivative in the point
Num:int(fn, 0, PI/3)  -- find integral from 0 to pi/3
-- Solve ODE
xy = Num:ode(                                   \
  function(t,y) return t*y end,  -- y' = f(t,y) \
  {1,3},                         -- t = 1..3    \
  1)                             -- y(1) = 1
xy[#xy][2]                       -- y(3)
-- PAUSE

--	POLYNOM
-- Work with polynomials.
a = Poly {2,3,4,5}     -- sequence of coefficients, from kn to k0
b = Poly {1,2}
a(1)                   -- value of the polynomial for x=1
c = a * b              -- apply arithmetic operations
c:str('s')             -- 'pretty print' representation
b:int(3)               -- integrate polynomial, use initial condition
a:der()                -- differentiation
t = a:roots()          -- find roots
t[1]
-- PAUSE

--	BIGINT
-- Operations with long integers.
a = Int(1234)          -- create new from number
b = Int '56789'        -- or from string
-- Typical operations are available
a - b
a * b
b^50
ANS:float()           -- decimal representation
Int(50):F()           -- factorial
a:digits(42)          -- get value in new numerical base
-- PAUSE

--	CONST
-- Some useful constants.
C.phy.G                  -- gravitational constant
C.phy.G_u                -- units of measurement are available with postfix '_u'
-- It is possible to define own constant.
-- It can't be modified.
C:add('foo',42)
C.foo
-- ...and remove it
C:remove('foo')
-- PAUSE

--	GRAPH
-- Manipulations with graphs.
-- Define graph with edges 'ab' and 'bc' and node 'd'
g = Graph()
g:addEdges {{'a','b'}, {'b','c'}}
g:add('d')
-- nodes:
for _,v in ipairs(g:nodes()) do \
  print(v)                      \
end
-- edges:
for _,v in ipairs(g:edges()) do \
  print(v[1],v[2])              \
end
-- default weight is 1
g:edge('a','b')
-- you can add weighted edges
g:add ('b','e', 2)
g:add ('f')
-- find path
path = g:search('a','c', 'bfs')
for _, v in ipairs(path) do  \
  print(v)                   \
end

-- PAUSE

--	RATIONAL
-- Rational numbers.
a = Rat(1,2)
b = Rat(1,3)
-- arithmetics
a + b
a * b
a / b
-- float point representation
a:float()
a:num()        -- numerator
a:denom()      -- denominator
-- PAUSE

--	SPECIAL
-- Some special functions.
Spec:beta(1,3)
Spec:erf(2)
Spec:gamma(2.2)
Spec:besselj(2, 0.5)
-- PAUSE

--	UNITS
-- Conversation between measurement units.
-- Define rules
U.rules['h'] = U(60, 'min')       -- 1 h = 60 min
U.rules['min'] = U(60, 'sec')     -- 1 min = 60 sec
-- new variable
v = 2 * U'm/sec'
-- convert to 'km/h'
v 'km/h'
-- arithmetic is possible
t = U(10,'sec')
s = v * t
s
-- PAUSE

--	QUATERNION
-- Quaternions and rotation.
a = Quat{1,2,3,4}        -- {w,x,y,z}
b = Quat{w=3,x=4}        -- y=0 and z=0
-- arithmetics
a + b
a * b
b + 1
a:inv()
-- slerp
a:slerp(b,0.5)      -- use normalization inside
-- PAUSE

--	ASCIIPLOT
-- Plot data in Matlab style.
a = D:range(0, 6, 0.1)
b = Map(math.sin, a)
fig = Ap()
fig:plot(a,b)
fig
-- second argument can be function
fig:plot(a, b, 'sin', math.cos, 'cos')
fig
-- PAUSE

--	DATA
-- Data processing and statistics.
X = {3,2,5,6,3,4,3,1}
w = {1,1,0}
-- analyze
D:std(X, w)
D:filter(X, "x1 % 2 == 0")
-- print
t = {{1,2,3},{4,5,6}}
D:md(t, {'a', 'b', 'c'})
-- PAUSE

--	GEODESY
-- Coordinate transformations and other tasks.
wgs = Geo()
ll = {B=45, L=60, H=1000}
wgs:bl2utm(ll)
Geo:hashEncode(ll, 7)
-- PAUSE

--	LENS
-- Matrix methods in optics.
-- simple lens
lens = Lens: R(1, 200, 1.56) : T(5) : R(-200, 1)
lens:cardinal()
-- laser cavity
air_rod = Lens: T(250) : T(20, 1.56)
mirror = Lens:M(-300)
cavity = mirror .. air_rod .. mirror .. air_rod
print(cavity:emit(1.064e-6))  -- curvature, beam, wrist, location
-- PAUSE

--	QUBIT
-- Emulate quantum computation.
-- make gates
g = Qb:gates(2):H():X(0):Y(1):Z()
g
-- apply transformation to quantum system
a = 0.1*Qb'|00>' + 0.3*Qb'|01>' + 0.5*Qb'|11>'
a:normalize()
b = g(a)
b
b:prob '10'
b:meas()
-- PAUSE

--	RANDOM
-- Random distrubutions.
rnd = Rand:new()  -- custom generator
rnd:norm(1, 0.5)
rnd:exp(0.6)
rnd:rayleigh(0.4)
-- PAUSE

--	SYMBOLIC
-- Elements of computer algebra.
x, a = Sym('x'), Sym(2)
p, q = Sym:parse('x-y, x+y')
p:eval {x=2, y=1}
p + q
(a*p*q*x):expand()
(x^3-a*x+x^2):diff(x)
